@using RazorLight
@using System.Linq
@using System.Collections.Generic
@using CsQuery.ExtensionMethods.Internal
@using Generator
@using Generator.Schema
@using Newtonsoft.Json
@inherits Generator.CodeTemplatePage<Generator.Schema.YamlSpecification>
// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information

/*
IMPORTANT NOTE
==============
This file has been generated. 
If you wish to submit a PR please modify the original csharp file and submit the PR with that change. Thanks!
*/

// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using System.Net;
using System.Runtime.Serialization;
using Nest;

namespace Elastic.CommonSchema.Elasticsearch
{
	/// <summary>
	/// Utilities for Elastic Common Schema version @(Model.FullVersion)
	/// To be used in conjunction with the NEST client.
	/// <para/>
	/// The Elastic Common Schema (ECS) defines a common set of fields for ingesting data into Elasticsearch.
	/// A common schema helps you correlate data from sources like logs and metrics or IT operations analytics
	/// and security analytics.
	/// <para/>
	/// See: https://github.com/elastic/ecs
	/// </summary>
	public class NESTIndexTemplates
	{
		/// <summary>
		/// Get a Put Index Template Descriptor for use with <see cref="Nest.PutIndexTemplateRequest"/>
		/// designed for use with Elastic Common Schema version @(Model.FullVersion)
		/// </summary>
		/// @Raw("<param name=\"name\">The name of the index template.</param>")
		/// <returns>An instance of <see cref="Nest.PutIndexTemplateDescriptor"/>.</returns>
		public static PutIndexTemplateDescriptor GetIndexTemplate(Name name)
		{
			var indexTemplate = new PutIndexTemplateDescriptor(name);

			indexTemplate.IndexPatterns("ecs-*");
			indexTemplate.Order(1);
			indexTemplate.Settings(s =>
				s.Setting("index", 
					new
					{
						refresh_interval = "5s",
						mapping = new
						{
							total_fields = new
							{
								limit = 100000
							}
						}
					}));

			indexTemplate.Map(GetTypeMappingDescriptor());
			
			return indexTemplate;
		}

		/// <summary>
		/// Get a type mapping descriptor for use with <see cref="Nest.PutIndexTemplateDescriptor"/>
		/// designed for use with Elastic Common Schema version @(Model.FullVersion)
		/// </summary>
		public static Func@(Raw("<TypeMappingDescriptor<Base>, ITypeMapping>")) GetTypeMappingDescriptor()
		{
			return map =>
				 map.Meta(meta => meta.Add("version", "@(Model.FullVersion)"))
					.DateDetection(false)
					.DynamicTemplates(dynamicTemplate =>
						dynamicTemplate.DynamicTemplate("strings_as_keyword",
							template =>
								template.MatchMappingType("string")
									.Mapping(mapping =>
										mapping.Keyword(keyword =>
											keyword.IgnoreAbove(1024)))))
					.Properties<Base>(properties =>
						properties
@foreach (var field in Model.BaseYamlSchema().GetFieldsFlat())
{
<text>							.@(Raw(field.MappingType()))(p => p.Name(n => n.@(field.PropertyName()))@(field.Extras()))
</text> 
}@foreach (var schema in Model.NonBaseYamlSchemas())
{
<text>							.Object<@schema.NamePCased()>(o =>
								o.Properties(a => a
@foreach (var field in schema.GetFieldsFlat())
{
<text>									.@(Raw(field.MappingType()))(p => p.Name(n => n.@(field.PropertyName()))@(field.Extras()))
</text> 
}
							))
</text>
}
						);
		}
	}
}