@using RazorLight
@using System.Linq
@using System.Collections.Generic
@using System.Reflection.Metadata
@using CsQuery.ExtensionMethods.Internal
@using Generator
@using Generator.Schema
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using Newtonsoft.Json
@inherits Generator.CodeTemplatePage<Generator.Schema.EcsSpecification>
// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/*
IMPORTANT NOTE
==============
This file has been generated. 
If you wish to submit a PR please modify the original csharp file and submit the PR with that change. Thanks!
*/

using System;
using System.Collections.Generic;
using Utf8Json;
@{ var index = 0; }
namespace Elastic.CommonSchema.Serialization
{
    internal class BaseJsonFormatter : IJsonFormatter@(Raw("<Base>"))
    {
        private static readonly IncrementingAutomataDictionary AutomataDictionary = new IncrementingAutomataDictionary
        {
            // Base fields
@foreach (var field in Model.BaseFieldsOrdered)
{<text>            { "@(field.Item2.Name)" }, // @(index++)
</text>}
            // Complex types
@foreach (var schema in Model.YamlSchemasOrdered.Skip(1))
{<text>            { "@(schema.Name)" }, // @(index++)
</text>}
        };

        public Base Deserialize(ref JsonReader reader, IJsonFormatterResolver formatterResolver)
        {
            var count = 0;
            var ecsEvent = new Base();
            string loglevel = null;
            string message = null;
            DateTimeOffset? timestamp = null;
            bool ReadRef@(Raw("<T>")) (ref JsonReader reader, ref T set)
            {
                var formatter = formatterResolver.GetFormatter@(Raw("<T>"))();
                set = formatter.Deserialize(ref reader, formatterResolver);
                return true;
            }
            bool Read@(Raw("<T>")) (ref JsonReader reader, Base b, Action@(Raw("<Base, T>")) set)
            {
                var formatter = formatterResolver.GetFormatter@(Raw("<T>"))();
                set(b, formatter.Deserialize(ref reader, formatterResolver));
                return true;
            }
            static bool ReadString(ref JsonReader reader, ref string stringProp)
            {
                stringProp = reader.ReadString();
                return true;
            }
            
            while (reader.ReadIsInObject(ref count))
            {
                var propertyName = reader.ReadPropertyNameSegmentRaw();
                if (AutomataDictionary.TryGetValue(propertyName, out var value))
                {
                    @{ index = 0; }
                    _ = value switch
                    {
@foreach (var field in Model.BaseFieldsOrdered)
{
    if (field.Item1 != "WriteProp" && field.Item2.ClrType == "string")
{<text>                        @(index++) => ReadString(ref reader, ref @(field.Item2.Name.Replace(".",""))),
</text>}
    else if (field.Item1 != "WriteProp")
{<text>                        @(index++) => ReadRef<@(Raw(field.Item2.ClrType))>(ref reader, ref @(field.Item2.Name.Replace(".",""))),
</text>}
    else
{<text>                        @(index++) => Read<@(Raw(field.Item2.ClrType))>(ref reader, ecsEvent, (b, v) => b.@(FileGenerator.PascalCase(field.Item2.Name)) = v),
</text>}
}
@foreach (var schema in Model.YamlSchemasOrdered.Skip(1))
{<text>                        @(index++) => Read<@(FileGenerator.PascalCase(schema.Name))>(ref reader, ecsEvent, (b, v) => b.@(FileGenerator.PascalCase(schema.Name)) = v),
</text>}
                        _ => false
                    };
                }
            }
            ecsEvent.Log ??= new Log();
            ecsEvent.Log.Level = loglevel;
            ecsEvent.Message = message;
            ecsEvent.Timestamp = timestamp;
            return ecsEvent;
        }

        public void Serialize(ref JsonWriter writer, Base value, IJsonFormatterResolver formatterResolver)
        {
            if (value == null) return;
            writer.WriteBeginObject();
@{ index = 0; }
            // Base fields
@foreach (var field in Model.BaseFieldsOrdered)
{
    if (field.Item1 != "WriteProp")
    {<text>            @(field.Item1)(ref writer, value, formatterResolver); // @(index++)
</text>}
    else
    {<text>            @(field.Item1)(ref writer, "@field.Item2.Name", value.@FileGenerator.PascalCase(field.Item2.Name), formatterResolver); // @(index++)
</text>}
}
            // Complex types
@foreach (var schema in Model.YamlSchemasOrdered.Skip(1))
{<text>            WriteProp(ref writer, "@(schema.Name)", value.@(FileGenerator.PascalCase(schema.Name)), formatterResolver); // @(index++)
</text>}
            writer.WriteEndObject();
        }

        private static void WriteMessage(ref JsonWriter writer, Base value, IJsonFormatterResolver formatterResolver)
        {
            writer.WritePropertyName("message");
            if (value.Message != null)
                writer.WriteString(value.Message);
            else writer.WriteNull();
            writer.WriteValueSeparator();
        }

        private static void WriteLogLevel(ref JsonWriter writer, Base value, IJsonFormatterResolver formatterResolver)
        {
            writer.WritePropertyName("log.level");
            if (value.Log?.Level != null)
                writer.WriteString(value.Log.Level);
            else writer.WriteNull();
            writer.WriteValueSeparator();
        }
        
        private static void WriteTimestamp(ref JsonWriter writer, Base value, IJsonFormatterResolver formatterResolver)
        {
            writer.WritePropertyName("timestamp");
            var formatter = formatterResolver.GetFormatter@(Raw("<DateTimeOffset?>"))();
            formatter.Serialize(ref writer, value.Timestamp, formatterResolver);
            writer.WriteValueSeparator();
        }
        
        private static void WriteProp@(Raw("<T>"))(ref JsonWriter writer, string key, T value, IJsonFormatterResolver formatterResolver)
        {
            if (value == null) return;
            writer.WriteNameSeparator();
            writer.WritePropertyName(key);
            var formatter = formatterResolver.GetFormatter@(Raw("<T>"))();
            formatter.Serialize(ref writer, value, formatterResolver);
        }
    }
}