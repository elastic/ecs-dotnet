@using RazorLight
@using System.Linq
@using System.Collections.Generic
@using System.Reflection.Metadata
@using CsQuery.ExtensionMethods.Internal
@using Generator
@using Generator.Schema
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using Newtonsoft.Json
@inherits Generator.CodeTemplatePage<Generator.Schema.YamlSpecification>
// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information

/*
IMPORTANT NOTE
==============
This file has been generated. 
If you wish to submit a PR please modify the original csharp file and submit the PR with that change. Thanks!
*/

using System;
using System.Collections.Generic;
using System.Text.Json;

namespace Elastic.CommonSchema.Serialization
{
	internal partial class BaseJsonConverter@(Raw("<TBase>")) : EcsJsonConverterBase@(Raw("<TBase>"))
		where TBase : Base, new()
	{
		private static bool ReadProperties(
			ref Utf8JsonReader reader, 
			TBase ecsEvent, 
			ref DateTimeOffset? timestamp, 
			ref string loglevel
		)
		{
			var propertyName = reader.GetString();
			reader.Read();
			return propertyName switch
			{
@foreach (var field in Model.BaseFieldsOrdered)
{
	var name = field.Item2.Name;
	if (name == YamlSpecification.TimestampFieldName)
{<text>				"@(name)" => ReadDateTime(ref reader, ref @(name)),
</text>}
	else if (name == YamlSpecification.LogLevelFieldName)
{<text>				"@(name)" => ReadString(ref reader, ref loglevel),
</text>}
	else
{<text>				"@(name)" => ReadProp<@(Raw(field.Item2.ClrType()))>(ref reader, "@name", ecsEvent, (b, v) => b.@(FileGenerator.PascalCase(field.Item2.Name)) = v),
</text>}
}
@foreach (var schema in Model.BaseYamlSchema().GetFieldsNested())
{<text>				"@schema.Name" => ReadProp<@(schema.NamePCased)>(ref reader, "@schema.Name", ecsEvent, (b, v) => b.@(schema.NamePCased) = v),
</text>}
@foreach (var schema in Model.NonBaseYamlSchemas())
{<text>				"@schema.Name" => ReadProp<@(schema.NamePCased())>(ref reader, "@schema.Name", ecsEvent, (b, v) => b.@(schema.NamePCased()) = v),
</text>}
				_ =>
					typeof(Base) == ecsEvent.GetType()
						? false
						: ecsEvent.TryRead(propertyName, out var t)
							? ecsEvent.ReceiveProperty(propertyName, ReadPropDeserialize(ref reader, t))
							: false
			};
		}

		public override void Write(Utf8JsonWriter writer, TBase value, JsonSerializerOptions options)
		{
			if (value == null)
			{
				writer.WriteNullValue();
				return;
			}
			writer.WriteStartObject();
			// Base fields
@foreach (var field in Model.BaseFieldsOrdered)
{
	if (field.Item1 != "WriteProp")
	{<text>			@(field.Item1)(writer, value);
</text>}
	else
	{<text>			@(field.Item1)(writer, "@field.Item2.Name", value.@FileGenerator.PascalCase(field.Item2.Name));
</text>}
}
			// Complex types
@foreach (var nestedField in Model.BaseYamlSchema().GetFieldsNested())
{
<text>			WriteProp(writer, "@(nestedField.Name)", value.@(nestedField.NamePCased));
</text>}
@foreach (var schema in Model.YamlSchemasOrdered.Skip(1))
{<text>			WriteProp(writer, "@(schema.Name)", value.@(schema.NamePCased()));
</text>}
			if (typeof(Base) != value.GetType())
				value.WriteAdditionalProperties((k, v) => WriteProp(writer, k, v));
			writer.WriteEndObject();
		}
	}
}