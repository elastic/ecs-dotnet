@using RazorLight
@using System.Linq
@using System.Collections.Generic
@using System.Reflection.Metadata
@using CsQuery.ExtensionMethods.Internal
@using Generator
@using Generator.Schema
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using Newtonsoft.Json
@inherits Generator.CodeTemplatePage<Generator.Schema.EcsSpecification>
// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information

/*
IMPORTANT NOTE
==============
This file has been generated.
If you wish to submit a PR please modify the original csharp file and submit the PR with that change. Thanks!
*/

using System;
using NLog;
using NLog.Layouts;
using NLog.Config;
using System.Text;
using System.Collections.Generic;

namespace Elastic.CommonSchema
{
	public class EcsSchemaLayout : Layout
	{
	     private class EcsJsonLayout : JsonLayout
         {
@foreach (var pair in Model.BaseFieldsOrdered.Where(f => f.Item2.FlatName != "_metadata"))
{<text>            public JsonAttribute @pair.Item2.PropertyName { get; } = new JsonAttribute("@pair.Item2.Name", "@NLogHelper.GetMapping(pair.Item2)", @pair.Item2.Encode().ToString().ToLower());
</text>}

@foreach (var schema in Model.NonBaseYamlSchemas())
{foreach (var field in schema.GetFieldsFlat().Where(f => f.FlatName != "log.level"))
{<text>            public JsonAttribute @FileGenerator.PascalCase(field.FlatName) { get; } = new JsonAttribute("@field.Name", "@NLogHelper.GetMapping(field)", true);
</text>}}

                public JsonLayout Metadata { get; }

				public EcsJsonLayout()
                {
@foreach (var pair in Model.BaseFieldsOrdered.Where(f => f.Item2.FlatName != "_metadata"))
{<text>			        Attributes.Add(@pair.Item2.PropertyName);
</text>}

@foreach (var schema in Model.NonBaseYamlSchemas())
{<text>			        Attributes.Add(new JsonAttribute("@schema.Name", new JsonLayout
			        {
						Attributes =
						{
@foreach (var field in schema.GetFieldsFlat())
{<text>			        		@FileGenerator.PascalCase(field.FlatName),
</text>}			        	}
			        }));

</text>}

	              Metadata = new JsonLayout()
	              {
	                 IncludeAllProperties = true,
	                 IncludeMdlc = false,
	                 MaxRecursionLimit = 1,
	                 RenderEmptyObject = false,
	             };

	             Attributes.Add(new JsonAttribute("_metadata", Metadata, false));
			}

			public void Render(LogEventInfo logEvent, StringBuilder target) => base.RenderFormattedMessage(logEvent, target);

		}

	     private readonly EcsJsonLayout _innerLayout = new EcsJsonLayout();

	     protected override void RenderFormattedMessage(LogEventInfo logEvent, StringBuilder target)
	     {
	          _innerLayout.Render(logEvent, target);
	     }

		 protected override string GetFormattedMessage(LogEventInfo logEvent)
		 {
			 throw new NotImplementedException();
		 }

	     public Layout SchemaLayout => _innerLayout; // Necessary for NLog config reflection/initialization

	     public bool IncludeAllProperties
	     {
	         get => _innerLayout.Metadata.IncludeAllProperties;
	         set => _innerLayout.Metadata.IncludeAllProperties = value;
	     }

	     public bool IncludeMdlc
	     {
	         get => _innerLayout.Metadata.IncludeMdlc;
	         set => _innerLayout.Metadata.IncludeMdlc = value;
	     }

	     public int MaxRecursionLimit
	     {
	         get => _innerLayout.Metadata.MaxRecursionLimit;
	         set => _innerLayout.Metadata.MaxRecursionLimit= value;
	     }

	     [ArrayParameter(typeof(JsonAttribute), "attribute")]
	     public IList<JsonAttribute> Attributes
	     {
	         get => _innerLayout.Metadata.Attributes;
	         set
	         {
	               _innerLayout.Metadata.Attributes.Clear();
				   if (value == null)
					   return;
				   foreach (var jsonAttribute in value)
				   {
					   _innerLayout.Metadata.Attributes.Add(jsonAttribute);
				   }
			 }
	     }

@foreach (var schema in Model.NonBaseYamlSchemas())
{foreach (var field in schema.GetFieldsFlat())
{<text>	    public Layout @FileGenerator.PascalCase(field.FlatName)
		{
			get => _innerLayout.@(FileGenerator.PascalCase(field.FlatName)).Layout;
			set => _innerLayout.@(FileGenerator.PascalCase(field.FlatName)).Layout = value;
		}
 </text>}}
	}
}
