@using RazorLight
@using System.Linq
@using System.Collections.Generic
@using System.Reflection.Metadata
@using System.Security.Cryptography.X509Certificates
@using CsQuery.ExtensionMethods.Internal
@using Generator
@using Generator.Schema
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using Newtonsoft.Json
@inherits Generator.CodeTemplatePage<Generator.Schema.EcsSpecification>
// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information

/*
IMPORTANT NOTE
==============
This file has been generated. 
If you wish to submit a PR please modify the original csharp file and submit the PR with that change. Thanks!
*/

// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using System.Net;
using System.Runtime.Serialization;

namespace Elastic.CommonSchema
{
	/// <summary>
	/// Elastic Common Schema version @(Model.YamlSchemasOrdered.First().FullVersion)
	/// <para/>
	/// The Elastic Common Schema (ECS) defines a common set of fields for ingesting data into Elasticsearch.
	/// A common schema helps you correlate data from sources like logs and metrics or IT operations analytics
	/// and security analytics.
	/// <para/>
	/// See: https://github.com/elastic/ecs
	/// </summary>
	public partial class Base
	{
		/// <summary>
		/// Elastic Common Schema version
		/// </summary>
		public static string Version => "@(Model.YamlSchemasOrdered.First().FullVersion)";

		/// <summary>
		/// Container for additional metadata against this event.
		/// </summary>
		[DataMember(Name = "_metadata")]
		public @Raw("IDictionary<string, object>") Metadata { get; set; }

@foreach (var schema in Model.NonBaseYamlSchemas())
{
<text>		/// <summary>
		/// @Raw(schema.DescriptionSanitized)
		/// </summary>
		[DataMember(Name = "@Raw(schema.Name)")]
		public @FileGenerator.PascalCase(schema.Name) @FileGenerator.PascalCase(schema.Name) { get; set; }

</text>
}
@foreach (var field in Model.BaseYamlSchema().GetFieldsFlat())
{
<text>		/// <summary>
		/// @Raw(field.DescriptionSanitized)
		/// </summary>
		/// <remarks>@field.Level.ToString("f")</remarks>
		@if (field.Example != null)
		{
<text>		/// <example>@Raw(JsonConvert.SerializeObject(field.Example).Trim('"'))</example>
</text>
		}
		[DataMember(Name = "@Raw(field.JsonFieldName)")]
		public @Raw(field.ClrType) @(field.PropertyName) { get; set; }

</text> 
}
@foreach (var field in Model.BaseYamlSchema().GetFieldsNested())
{
<text>		/// <summary>
		/// @Raw(field.Description)
		/// </summary>
		[DataMember(Name = "@Raw(field.ClassName.ToLower())")]
		public @field.ClassNameType @FileGenerator.PascalCase(field.ClassName) { get; set; }

</text> 
}
    }

@foreach (var nestedField in Model.BaseYamlSchema().GetFieldsNested())
{
	foreach (var child in nestedField.Children)
	{
		if (child.Children.Count > 0)
		{
			throw new System.ArgumentException("Template does not support grandchildren fields.");
		}
		
<text>	/// <summary>
	/// @nestedField.ClassName@child.ClassName, property of <see cref="@FileGenerator.PascalCase(Model.BaseYamlSchema().Name)@nestedField.ClassName" />
	/// </summary>
	public class @child.ClassName
	{
	@foreach (var field in child.Fields)
	{
<text>		/// <summary>
		/// @nestedField.ClassName @Raw(field.DescriptionSanitized)
		/// </summary>
		/// <remarks>@field.Level.ToString("f")</remarks>
		@if (field.Example != null)
		{
<text>		/// <example>@Raw(JsonConvert.SerializeObject(field.Example).Trim('"'))</example>
</text> 
		}
		[DataMember(Name = "@Raw(string.Join(".", field.Name.ToLower().Split('.').Skip(2)))")]
		public @Raw(field.ClrType) @FileGenerator.PascalCase(field.Name).Replace(nestedField.ClassName + child.ClassName, string.Empty) { get; set; }

</text>}
	}

</text>
	}
		
<text>	/// <summary>
	/// @nestedField.ClassName, property of <see cref="@FileGenerator.PascalCase(Model.BaseYamlSchema().Name)" />
	/// </summary>
	public class @nestedField.ClassName
	{
@foreach (var child in nestedField.Children)
	{<text>		/// <summary>
		/// @child.ClassName property.
		/// </summary>		   
		[DataMember(Name = "@child.ClassName.ToLower()")]
		public @nestedField.ClassName@child.ClassName @child.ClassName { get; set; }

</text>}
@foreach (var field in nestedField.Fields)
	{<text>		/// <summary>
		/// @Raw(field.DescriptionSanitized)
		/// </summary>
		/// <remarks>@field.Level.ToString("f")</remarks>
		@if (field.Example != null)
		{
<text>		/// <example>@Raw(JsonConvert.SerializeObject(field.Example).Trim('"'))</example>
</text> 
		}
		[DataMember(Name = "@Raw(string.Join(".", field.Name.ToLower().Split('.').Skip(1)))")]
		public @Raw(field.ClrType) @FileGenerator.PascalCase(field.Name).Replace(nestedField.ClassName, string.Empty) { get; set; }

</text>}
	}

</text>
}

@foreach (var schema in Model.NonBaseYamlSchemas())
{
	foreach (var nestedField in schema.GetFieldsNested())
	{
	foreach (var child in nestedField.Children)
	{
		if (child.Children.Count > 0)
		{
			throw new System.ArgumentException("Template does not support grandchildren fields.");
		}
		
<text>	/// <summary>
	/// @nestedField.ClassName@child.ClassName, property of <see cref="@FileGenerator.PascalCase(schema.Name)@nestedField.ClassName" />
	/// </summary>
	public class @nestedField.ClassName@child.ClassName
	{
	@foreach (var field in child.Fields)
	{
<text>		/// <summary>
		/// @nestedField.ClassName @Raw(field.DescriptionSanitized)
		/// </summary>
		/// <remarks>@field.Level.ToString("f")</remarks>
		@if (field.Example != null)
		{
<text>		/// <example>@Raw(JsonConvert.SerializeObject(field.Example).Trim('"'))</example>
</text> 
		}
		[DataMember(Name = "@Raw(string.Join(".", field.Name.ToLower().Split('.').Skip(2)))")]
		public @Raw(field.ClrType) @FileGenerator.PascalCase(field.Name).Replace(nestedField.ClassName + child.ClassName, string.Empty) { get; set; }

</text>}
	}

</text>
	}
		
<text>	/// <summary>
	/// @nestedField.ClassName, property of <see cref="@FileGenerator.PascalCase(schema.Name)" />
	/// </summary>
	public class @FileGenerator.PascalCase(schema.Name)@nestedField.ClassName
	{
@foreach (var child in nestedField.Children)
	{<text>		/// <summary>
		/// @child.ClassName property.
		/// </summary>		   
		[DataMember(Name = "@child.ClassName.ToLower()")]
		public @nestedField.ClassName@child.ClassName @child.ClassName { get; set; }

</text>}
@foreach (var field in nestedField.Fields)
	{<text>		/// <summary>
		/// @Raw(field.DescriptionSanitized)
		/// </summary>
		/// <remarks>@field.Level.ToString("f")</remarks>
		@if (field.Example != null)
		{
<text>		/// <example>@Raw(JsonConvert.SerializeObject(field.Example).Trim('"'))</example>
</text> 
		}
		[DataMember(Name = "@Raw(string.Join(".", field.Name.ToLower().Split('.').Skip(1)))")]
		public @Raw(field.ClrType) @FileGenerator.PascalCase(field.Name).Replace(nestedField.ClassName, string.Empty) { get; set; }

</text>}
	}

</text>
	}

foreach (var field in schema.Fields.Where(f => f.Value.IsCustomEnum))
{
<text>	/// <summary>
	/// @Raw(field.Value.DescriptionSanitized)
    /// </summary>
	public class @field.Value.GetEnumClrTypeName
	{
	@foreach (var value in field.Value.AllowedValues)
	{
<text>        /// <summary>
        /// @Raw(value.DescriptionSanitized)
		/// </summary>
		public const string @FileGenerator.PascalCase(value.Name) = "@value.Name";

</text>
	}
	}

</text>
}
	
<text>	/// <summary>
	/// @Raw(schema.DescriptionSanitized)
	/// </summary>
	@if (!schema.Footnote.IsNullOrEmpty())
	{
<text>	/// <remarks>
	/// @Raw(schema.Footnote)
	/// </remarks>
</text>
	}
	public @(schema.Name == "log" ? "partial " : "")class @FileGenerator.PascalCase(schema.Name) 
	{
	@if (schema.Nestings != null)
	{
foreach (var nesting in schema.Nestings)
{<text>		/// <summary>
		/// @FileGenerator.PascalCase(nesting) nested field.
		/// <para/>
		/// @Model.YamlSchemas.Single(y => y.Name == nesting).DescriptionSanitized
		/// </summary>
		[DataMember(Name = "@nesting")]
		public @FileGenerator.PascalCase(nesting) @FileGenerator.PascalCase(nesting) { get; set; }

</text>}
	}
@foreach (var field in schema.GetFieldsNested())
	{<text>		/// <summary>
		/// @Raw(field.Description)
		/// </summary>
		[DataMember(Name = "@Raw(field.ClassName.ToLower())")]
		public @FileGenerator.PascalCase(schema.Name)@field.ClassNameType @FileGenerator.PascalCase(field.ClassName) { get; set; }

</text>}
@foreach (var field in schema.GetFieldsFlat())
	{<text>		/// <summary>
		/// @Raw(field.DescriptionSanitized)
		/// </summary>
		/// <remarks>@field.Level.ToString("f")</remarks>
		@if (field.Example != null)
		{
<text>		/// <example>@Raw(JsonConvert.SerializeObject(field.Example).Trim('"'))</example>
</text>}
		[DataMember(Name = "@Raw(field.JsonFieldName)")]
		public @Raw(field.ClrType) @(field.PropertyName) { get; set; }

</text>}
	}

</text>}
}

namespace Elastic.CommonSchema.Elasticsearch
{
	/// <summary>
	/// Elastic Common Schema version @(Model.YamlSchemasOrdered.First().FullVersion) index templates to be used with Elasticsearch.
	/// </summary>
	public static class IndexTemplates
	{
@foreach (var template in Model.Templates)
{<text>		/// <summary>
		/// Elastic Common Schema version @(Model.YamlSchemasOrdered.First().FullVersion) index template for Elasticsearch version @(template.Key)
		/// See the Put Index Template API documentation: https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html
		/// </summary>
		/// <returns>Index template string that can be used with the Put Index Template API.</returns>
		public static string GetIndexTemplateForElasticsearch@(template.Key)(string indexPattern = "ecs-*") { return "@Raw(System.Text.RegularExpressions.Regex.Replace(template.Value, @"\r\n?|\n", "").Replace("\"", "\\\"").Replace("ecs-*", "\" + indexPattern + \""))"; }

</text>}
	}
}