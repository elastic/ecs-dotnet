// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information

/*
IMPORTANT NOTE
==============
This file has been generated. 
If you wish to submit a PR please modify the original csharp file and submit the PR with that change. Thanks!
*/

// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using System.Net;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using Elastic.CommonSchema.Serialization;
using static Elastic.CommonSchema.PropDispatch;

namespace Elastic.CommonSchema
{
	///<summary>All properties that <see cref="EcsDocument.AssignField" /> supports </summary>
	public static class LogTemplateProperties
	{
		///<summary>
		/// <para><c>@timestamp</c></para>
		/// <para>Date/time when the event originated.
		/// This is the date/time extracted from the event, typically representing when the event was generated by the source.
		/// If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.
		/// Required field for all events.
		/// <para><br/>This is a required field</para></para>
		/// <example>5/23/2016 8:05:34â€¯AM</example>
		///</summary>
		public static string Timestamp = nameof(Timestamp);
		///<summary>
		/// <para><c>message</c></para>
		/// <para>For log events the message field contains the log message, optimized for viewing in a log viewer.
		/// For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.
		/// If multiple messages exist, they can be combined into one message.</para>
		/// <example>Hello World</example>
		///</summary>
		public static string Message = nameof(Message);
		///<summary>
		/// <para><c>span.id</c></para>
		/// <para>Unique identifier of the span within the scope of its trace.
		/// A span represents an operation within a transaction, such as a request to another service, or a database query.</para>
		/// <example>3ff9a8981b7ccd5a</example>
		///</summary>
		public static string SpanId = nameof(SpanId);
		///<summary>
		/// <para><c>trace.id</c></para>
		/// <para>Unique identifier of the trace.
		/// A trace groups multiple events like transactions that belong together. For example, a user request handled by multiple inter-connected services.</para>
		/// <example>4bf92f3577b34da6a3ce929d0e0e4736</example>
		///</summary>
		public static string TraceId = nameof(TraceId);
		///<summary>
		/// <para><c>transaction.id</c></para>
		/// <para>Unique identifier of the transaction within the scope of its trace.
		/// A transaction is the highest level of work measured within a service, such as a request to a server.</para>
		/// <example>00f067aa0ba902b7</example>
		///</summary>
		public static string TransactionId = nameof(TransactionId);
		///<summary>
		/// <para><c>agent.build.original</c></para>
		/// <para>Extended build information for the agent.
		/// This field is intended to contain any build information that a data source may provide, no specific formatting is required.</para>
		/// <example>metricbeat version 7.6.0 (amd64), libbeat 7.6.0 [6a23e8f8f30f5001ba344e4e54d8d9cb82cb107c built 2020-02-05 23:10:10 +0000 UTC]</example>
		///</summary>
		public static string AgentBuildOriginal = nameof(AgentBuildOriginal);
		///<summary>
		/// <para><c>agent.ephemeral_id</c></para>
		/// <para>Ephemeral identifier of this agent (if one exists).
		/// This id normally changes across restarts, but `agent.id` does not.</para>
		/// <example>8a4f500f</example>
		///</summary>
		public static string AgentEphemeralId = nameof(AgentEphemeralId);
		///<summary>
		/// <para><c>agent.id</c></para>
		/// <para>Unique identifier of this agent (if one exists).
		/// Example: For Beats this would be beat.id.</para>
		/// <example>8a4f500d</example>
		///</summary>
		public static string AgentId = nameof(AgentId);
		///<summary>
		/// <para><c>agent.name</c></para>
		/// <para>Custom name of the agent.
		/// This is a name that can be given to an agent. This can be helpful if for example two Filebeat instances are running on the same host but a human readable separation is needed on which Filebeat instance data is coming from.</para>
		/// <example>foo</example>
		///</summary>
		public static string AgentName = nameof(AgentName);
		///<summary>
		/// <para><c>agent.type</c></para>
		/// <para>Type of the agent.
		/// The agent type always stays the same and should be given by the agent used. In case of Filebeat the agent would always be Filebeat also if two Filebeat instances are run on the same machine.</para>
		/// <example>filebeat</example>
		///</summary>
		public static string AgentType = nameof(AgentType);
		///<summary>
		/// <para><c>agent.version</c></para>
		/// <para>Version of the agent.</para>
		/// <example>6.0.0-rc2</example>
		///</summary>
		public static string AgentVersion = nameof(AgentVersion);
		///<summary>
		/// <para><c>as.number</c></para>
		/// <para>Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.</para>
		/// <example>15169</example>
		///</summary>
		public static string AsNumber = nameof(AsNumber);
		///<summary>
		/// <para><c>as.organization.name</c></para>
		/// <para>Organization name.</para>
		/// <example>Google LLC</example>
		///</summary>
		public static string AsOrganizationName = nameof(AsOrganizationName);
		///<summary>
		/// <para><c>client.address</c></para>
		/// <para>Some event client addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
		/// Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.</para>
		/// <example></example>
		///</summary>
		public static string ClientAddress = nameof(ClientAddress);
		///<summary>
		/// <para><c>client.bytes</c></para>
		/// <para>Bytes sent from the client to the server.</para>
		/// <example>184</example>
		///</summary>
		public static string ClientBytes = nameof(ClientBytes);
		///<summary>
		/// <para><c>client.domain</c></para>
		/// <para>The domain name of the client system.
		/// This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.</para>
		/// <example>foo.example.com</example>
		///</summary>
		public static string ClientDomain = nameof(ClientDomain);
		///<summary>
		/// <para><c>client.ip</c></para>
		/// <para>IP address of the client (IPv4 or IPv6).</para>
		/// <example></example>
		///</summary>
		public static string ClientIp = nameof(ClientIp);
		///<summary>
		/// <para><c>client.mac</c></para>
		/// <para>MAC address of the client.
		/// The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
		/// <para>pattern: </para></para>
		/// <example>00-00-5E-00-53-23</example>
		///</summary>
		public static string ClientMac = nameof(ClientMac);
		///<summary>
		/// <para><c>client.nat.ip</c></para>
		/// <para>Translated IP of source based NAT sessions (e.g. internal client to internet).
		/// Typically connections traversing load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		public static string ClientNatIp = nameof(ClientNatIp);
		///<summary>
		/// <para><c>client.nat.port</c></para>
		/// <para>Translated port of source based NAT sessions (e.g. internal client to internet).
		/// Typically connections traversing load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		public static string ClientNatPort = nameof(ClientNatPort);
		///<summary>
		/// <para><c>client.packets</c></para>
		/// <para>Packets sent from the client to the server.</para>
		/// <example>12</example>
		///</summary>
		public static string ClientPackets = nameof(ClientPackets);
		///<summary>
		/// <para><c>client.port</c></para>
		/// <para>Port of the client.</para>
		/// <example></example>
		///</summary>
		public static string ClientPort = nameof(ClientPort);
		///<summary>
		/// <para><c>client.registered_domain</c></para>
		/// <para>The highest registered client domain, stripped of the subdomain.
		/// For example, the registered domain for "foo.example.com" is "example.com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".</para>
		/// <example>example.com</example>
		///</summary>
		public static string ClientRegisteredDomain = nameof(ClientRegisteredDomain);
		///<summary>
		/// <para><c>client.subdomain</c></para>
		/// <para>The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
		/// For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.</para>
		/// <example>east</example>
		///</summary>
		public static string ClientSubdomain = nameof(ClientSubdomain);
		///<summary>
		/// <para><c>client.top_level_domain</c></para>
		/// <para>The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".</para>
		/// <example>co.uk</example>
		///</summary>
		public static string ClientTopLevelDomain = nameof(ClientTopLevelDomain);
		///<summary>
		/// <para><c>client.as.number</c></para>
		/// <para>Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.</para>
		/// <example>15169</example>
		///</summary>
		public static string ClientAsNumber = nameof(ClientAsNumber);
		///<summary>
		/// <para><c>client.as.organization.name</c></para>
		/// <para>Organization name.</para>
		/// <example>Google LLC</example>
		///</summary>
		public static string ClientAsOrganizationName = nameof(ClientAsOrganizationName);
		///<summary>
		/// <para><c>client.geo.city_name</c></para>
		/// <para>City name.</para>
		/// <example>Montreal</example>
		///</summary>
		public static string ClientGeoCityName = nameof(ClientGeoCityName);
		///<summary>
		/// <para><c>client.geo.continent_code</c></para>
		/// <para>Two-letter code representing continent's name.</para>
		/// <example>NA</example>
		///</summary>
		public static string ClientGeoContinentCode = nameof(ClientGeoContinentCode);
		///<summary>
		/// <para><c>client.geo.continent_name</c></para>
		/// <para>Name of the continent.</para>
		/// <example>North America</example>
		///</summary>
		public static string ClientGeoContinentName = nameof(ClientGeoContinentName);
		///<summary>
		/// <para><c>client.geo.country_iso_code</c></para>
		/// <para>Country ISO code.</para>
		/// <example>CA</example>
		///</summary>
		public static string ClientGeoCountryIsoCode = nameof(ClientGeoCountryIsoCode);
		///<summary>
		/// <para><c>client.geo.country_name</c></para>
		/// <para>Country name.</para>
		/// <example>Canada</example>
		///</summary>
		public static string ClientGeoCountryName = nameof(ClientGeoCountryName);
		///<summary>
		/// <para><c>client.geo.location</c></para>
		/// <para>Longitude and latitude.</para>
		/// <example>{ "lon": -73.614830, "lat": 45.505918 }</example>
		///</summary>
		public static string ClientGeoLocation = nameof(ClientGeoLocation);
		///<summary>
		/// <para><c>client.geo.name</c></para>
		/// <para>User-defined description of a location, at the level of granularity they care about.
		/// Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
		/// Not typically used in automated geolocation.</para>
		/// <example>boston-dc</example>
		///</summary>
		public static string ClientGeoName = nameof(ClientGeoName);
		///<summary>
		/// <para><c>client.geo.postal_code</c></para>
		/// <para>Postal code associated with the location.
		/// Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.</para>
		/// <example>94040</example>
		///</summary>
		public static string ClientGeoPostalCode = nameof(ClientGeoPostalCode);
		///<summary>
		/// <para><c>client.geo.region_iso_code</c></para>
		/// <para>Region ISO code.</para>
		/// <example>CA-QC</example>
		///</summary>
		public static string ClientGeoRegionIsoCode = nameof(ClientGeoRegionIsoCode);
		///<summary>
		/// <para><c>client.geo.region_name</c></para>
		/// <para>Region name.</para>
		/// <example>Quebec</example>
		///</summary>
		public static string ClientGeoRegionName = nameof(ClientGeoRegionName);
		///<summary>
		/// <para><c>client.geo.timezone</c></para>
		/// <para>The time zone of the location, such as IANA time zone name.</para>
		/// <example>America/Argentina/Buenos_Aires</example>
		///</summary>
		public static string ClientGeoTimezone = nameof(ClientGeoTimezone);
		///<summary>
		/// <para><c>client.user.domain</c></para>
		/// <para>Name of the directory the user is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string ClientUserDomain = nameof(ClientUserDomain);
		///<summary>
		/// <para><c>client.user.email</c></para>
		/// <para>User email address.</para>
		/// <example></example>
		///</summary>
		public static string ClientUserEmail = nameof(ClientUserEmail);
		///<summary>
		/// <para><c>client.user.full_name</c></para>
		/// <para>User's full name, if available.</para>
		/// <example>Albert Einstein</example>
		///</summary>
		public static string ClientUserFullName = nameof(ClientUserFullName);
		///<summary>
		/// <para><c>client.user.hash</c></para>
		/// <para>Unique user hash to correlate information for a user in anonymized form.
		/// Useful if `user.id` or `user.name` contain confidential information and cannot be used.</para>
		/// <example></example>
		///</summary>
		public static string ClientUserHash = nameof(ClientUserHash);
		///<summary>
		/// <para><c>client.user.id</c></para>
		/// <para>Unique identifier of the user.</para>
		/// <example>S-1-5-21-202424912787-2692429404-2351956786-1000</example>
		///</summary>
		public static string ClientUserId = nameof(ClientUserId);
		///<summary>
		/// <para><c>client.user.name</c></para>
		/// <para>Short name or login of the user.</para>
		/// <example>a.einstein</example>
		///</summary>
		public static string ClientUserName = nameof(ClientUserName);
		///<summary>
		/// <para><c>client.user.group.domain</c></para>
		/// <para>Name of the directory the group is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string ClientUserGroupDomain = nameof(ClientUserGroupDomain);
		///<summary>
		/// <para><c>client.user.group.id</c></para>
		/// <para>Unique identifier for the group on the system/platform.</para>
		/// <example></example>
		///</summary>
		public static string ClientUserGroupId = nameof(ClientUserGroupId);
		///<summary>
		/// <para><c>client.user.group.name</c></para>
		/// <para>Name of the group.</para>
		/// <example></example>
		///</summary>
		public static string ClientUserGroupName = nameof(ClientUserGroupName);
		///<summary>
		/// <para><c>client.user.risk.calculated_level</c></para>
		/// <para>A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>High</example>
		///</summary>
		public static string ClientUserRiskCalculatedLevel = nameof(ClientUserRiskCalculatedLevel);
		///<summary>
		/// <para><c>client.user.risk.calculated_score</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>880.73</example>
		///</summary>
		public static string ClientUserRiskCalculatedScore = nameof(ClientUserRiskCalculatedScore);
		///<summary>
		/// <para><c>client.user.risk.calculated_score_norm</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.</para>
		/// <example>88.73</example>
		///</summary>
		public static string ClientUserRiskCalculatedScoreNorm = nameof(ClientUserRiskCalculatedScoreNorm);
		///<summary>
		/// <para><c>client.user.risk.static_level</c></para>
		/// <para>A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>High</example>
		///</summary>
		public static string ClientUserRiskStaticLevel = nameof(ClientUserRiskStaticLevel);
		///<summary>
		/// <para><c>client.user.risk.static_score</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>830.0</example>
		///</summary>
		public static string ClientUserRiskStaticScore = nameof(ClientUserRiskStaticScore);
		///<summary>
		/// <para><c>client.user.risk.static_score_norm</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.</para>
		/// <example>83.0</example>
		///</summary>
		public static string ClientUserRiskStaticScoreNorm = nameof(ClientUserRiskStaticScoreNorm);
		///<summary>
		/// <para><c>cloud.account.id</c></para>
		/// <para>The cloud account or organization id used to identify different entities in a multi-tenant environment.
		/// Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.</para>
		/// <example>666777888999</example>
		///</summary>
		public static string CloudAccountId = nameof(CloudAccountId);
		///<summary>
		/// <para><c>cloud.account.name</c></para>
		/// <para>The cloud account name or alias used to identify different entities in a multi-tenant environment.
		/// Examples: AWS account name, Google Cloud ORG display name.</para>
		/// <example>elastic-dev</example>
		///</summary>
		public static string CloudAccountName = nameof(CloudAccountName);
		///<summary>
		/// <para><c>cloud.availability_zone</c></para>
		/// <para>Availability zone in which this host, resource, or service is located.</para>
		/// <example>us-east-1c</example>
		///</summary>
		public static string CloudAvailabilityZone = nameof(CloudAvailabilityZone);
		///<summary>
		/// <para><c>cloud.instance.id</c></para>
		/// <para>Instance ID of the host machine.</para>
		/// <example>i-1234567890abcdef0</example>
		///</summary>
		public static string CloudInstanceId = nameof(CloudInstanceId);
		///<summary>
		/// <para><c>cloud.instance.name</c></para>
		/// <para>Instance name of the host machine.</para>
		/// <example></example>
		///</summary>
		public static string CloudInstanceName = nameof(CloudInstanceName);
		///<summary>
		/// <para><c>cloud.machine.type</c></para>
		/// <para>Machine type of the host machine.</para>
		/// <example>t2.medium</example>
		///</summary>
		public static string CloudMachineType = nameof(CloudMachineType);
		///<summary>
		/// <para><c>cloud.project.id</c></para>
		/// <para>The cloud project identifier.
		/// Examples: Google Cloud Project id, Azure Project id.</para>
		/// <example>my-project</example>
		///</summary>
		public static string CloudProjectId = nameof(CloudProjectId);
		///<summary>
		/// <para><c>cloud.project.name</c></para>
		/// <para>The cloud project name.
		/// Examples: Google Cloud Project name, Azure Project name.</para>
		/// <example>my project</example>
		///</summary>
		public static string CloudProjectName = nameof(CloudProjectName);
		///<summary>
		/// <para><c>cloud.provider</c></para>
		/// <para>Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean.</para>
		/// <example>aws</example>
		///</summary>
		public static string CloudProvider = nameof(CloudProvider);
		///<summary>
		/// <para><c>cloud.region</c></para>
		/// <para>Region in which this host, resource, or service is located.</para>
		/// <example>us-east-1</example>
		///</summary>
		public static string CloudRegion = nameof(CloudRegion);
		///<summary>
		/// <para><c>cloud.service.name</c></para>
		/// <para>The cloud service name is intended to distinguish services running on different platforms within a provider, eg AWS EC2 vs Lambda, GCP GCE vs App Engine, Azure VM vs App Server.
		/// Examples: app engine, app service, cloud run, fargate, lambda.</para>
		/// <example>lambda</example>
		///</summary>
		public static string CloudServiceName = nameof(CloudServiceName);
		///<summary>
		/// <para><c>code_signature.digest_algorithm</c></para>
		/// <para>The hashing algorithm used to sign the process.
		/// This value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.</para>
		/// <example>sha256</example>
		///</summary>
		public static string CodeSignatureDigestAlgorithm = nameof(CodeSignatureDigestAlgorithm);
		///<summary>
		/// <para><c>code_signature.exists</c></para>
		/// <para>Boolean to capture if a signature is present.</para>
		/// <example>true</example>
		///</summary>
		public static string CodeSignatureExists = nameof(CodeSignatureExists);
		///<summary>
		/// <para><c>code_signature.signing_id</c></para>
		/// <para>The identifier used to sign the process.
		/// This is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.</para>
		/// <example>com.apple.xpc.proxy</example>
		///</summary>
		public static string CodeSignatureSigningId = nameof(CodeSignatureSigningId);
		///<summary>
		/// <para><c>code_signature.status</c></para>
		/// <para>Additional information about the certificate status.
		/// This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.</para>
		/// <example>ERROR_UNTRUSTED_ROOT</example>
		///</summary>
		public static string CodeSignatureStatus = nameof(CodeSignatureStatus);
		///<summary>
		/// <para><c>code_signature.subject_name</c></para>
		/// <para>Subject name of the code signer</para>
		/// <example>Microsoft Corporation</example>
		///</summary>
		public static string CodeSignatureSubjectName = nameof(CodeSignatureSubjectName);
		///<summary>
		/// <para><c>code_signature.team_id</c></para>
		/// <para>The team identifier used to sign the process.
		/// This is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.</para>
		/// <example>EQHXZ8M8AV</example>
		///</summary>
		public static string CodeSignatureTeamId = nameof(CodeSignatureTeamId);
		///<summary>
		/// <para><c>code_signature.timestamp</c></para>
		/// <para>Date and time when the code signature was generated and signed.</para>
		/// <example>1/1/2021 12:10:30â€¯PM</example>
		///</summary>
		public static string CodeSignatureTimestamp = nameof(CodeSignatureTimestamp);
		///<summary>
		/// <para><c>code_signature.trusted</c></para>
		/// <para>Stores the trust status of the certificate chain.
		/// Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.</para>
		/// <example>true</example>
		///</summary>
		public static string CodeSignatureTrusted = nameof(CodeSignatureTrusted);
		///<summary>
		/// <para><c>code_signature.valid</c></para>
		/// <para>Boolean to capture if the digital signature is verified against the binary content.
		/// Leave unpopulated if a certificate was unchecked.</para>
		/// <example>true</example>
		///</summary>
		public static string CodeSignatureValid = nameof(CodeSignatureValid);
		///<summary>
		/// <para><c>container.cpu.usage</c></para>
		/// <para>Percent CPU used which is normalized by the number of CPU cores and it ranges from 0 to 1. Scaling factor: 1000.</para>
		/// <example></example>
		///</summary>
		public static string ContainerCpuUsage = nameof(ContainerCpuUsage);
		///<summary>
		/// <para><c>container.disk.read.bytes</c></para>
		/// <para>The total number of bytes (gauge) read successfully (aggregated from all disks) since the last metric collection.</para>
		/// <example></example>
		///</summary>
		public static string ContainerDiskReadBytes = nameof(ContainerDiskReadBytes);
		///<summary>
		/// <para><c>container.disk.write.bytes</c></para>
		/// <para>The total number of bytes (gauge) written successfully (aggregated from all disks) since the last metric collection.</para>
		/// <example></example>
		///</summary>
		public static string ContainerDiskWriteBytes = nameof(ContainerDiskWriteBytes);
		///<summary>
		/// <para><c>container.id</c></para>
		/// <para>Unique container id.</para>
		/// <example></example>
		///</summary>
		public static string ContainerId = nameof(ContainerId);
		///<summary>
		/// <para><c>container.image.name</c></para>
		/// <para>Name of the image the container was built on.</para>
		/// <example></example>
		///</summary>
		public static string ContainerImageName = nameof(ContainerImageName);
		///<summary>
		/// <para><c>container.memory.usage</c></para>
		/// <para>Memory usage percentage and it ranges from 0 to 1. Scaling factor: 1000.</para>
		/// <example></example>
		///</summary>
		public static string ContainerMemoryUsage = nameof(ContainerMemoryUsage);
		///<summary>
		/// <para><c>container.name</c></para>
		/// <para>Container name.</para>
		/// <example></example>
		///</summary>
		public static string ContainerName = nameof(ContainerName);
		///<summary>
		/// <para><c>container.network.egress.bytes</c></para>
		/// <para>The number of bytes (gauge) sent out on all network interfaces by the container since the last metric collection.</para>
		/// <example></example>
		///</summary>
		public static string ContainerNetworkEgressBytes = nameof(ContainerNetworkEgressBytes);
		///<summary>
		/// <para><c>container.network.ingress.bytes</c></para>
		/// <para>The number of bytes received (gauge) on all network interfaces by the container since the last metric collection.</para>
		/// <example></example>
		///</summary>
		public static string ContainerNetworkIngressBytes = nameof(ContainerNetworkIngressBytes);
		///<summary>
		/// <para><c>container.runtime</c></para>
		/// <para>Runtime managing this container.</para>
		/// <example>docker</example>
		///</summary>
		public static string ContainerRuntime = nameof(ContainerRuntime);
		///<summary>
		/// <para><c>container.security_context.privileged</c></para>
		/// <para>Indicates whether the container is running in privileged mode.</para>
		/// <example></example>
		///</summary>
		public static string ContainerSecurityContextPrivileged = nameof(ContainerSecurityContextPrivileged);
		///<summary>
		/// <para><c>data_stream.dataset</c></para>
		/// <para>The field can contain anything that makes sense to signify the source of the data.
		/// Examples include `nginx.access`, `prometheus`, `endpoint` etc. For data streams that otherwise fit, but that do not have dataset set we use the value "generic" for the dataset value. `event.dataset` should have the same value as `data_stream.dataset`.
		/// Beyond the Elasticsearch data stream naming criteria noted above, the `dataset` value has additional restrictions:
		///   * Must not contain `-`
		///   * No longer than 100 characters</para>
		/// <example>nginx.access</example>
		///</summary>
		public static string DataStreamDataset = nameof(DataStreamDataset);
		///<summary>
		/// <para><c>data_stream.namespace</c></para>
		/// <para>A user defined namespace. Namespaces are useful to allow grouping of data.
		/// Many users already organize their indices this way, and the data stream naming scheme now provides this best practice as a default. Many users will populate this field with `default`. If no value is used, it falls back to `default`.
		/// Beyond the Elasticsearch index naming criteria noted above, `namespace` value has the additional restrictions:
		///   * Must not contain `-`
		///   * No longer than 100 characters</para>
		/// <example>production</example>
		///</summary>
		public static string DataStreamNamespace = nameof(DataStreamNamespace);
		///<summary>
		/// <para><c>data_stream.type</c></para>
		/// <para>An overarching type for the data stream.
		/// Currently allowed values are "logs" and "metrics". We expect to also add "traces" and "synthetics" in the near future.</para>
		/// <example>logs</example>
		///</summary>
		public static string DataStreamType = nameof(DataStreamType);
		///<summary>
		/// <para><c>destination.address</c></para>
		/// <para>Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
		/// Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.</para>
		/// <example></example>
		///</summary>
		public static string DestinationAddress = nameof(DestinationAddress);
		///<summary>
		/// <para><c>destination.bytes</c></para>
		/// <para>Bytes sent from the destination to the source.</para>
		/// <example>184</example>
		///</summary>
		public static string DestinationBytes = nameof(DestinationBytes);
		///<summary>
		/// <para><c>destination.domain</c></para>
		/// <para>The domain name of the destination system.
		/// This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.</para>
		/// <example>foo.example.com</example>
		///</summary>
		public static string DestinationDomain = nameof(DestinationDomain);
		///<summary>
		/// <para><c>destination.ip</c></para>
		/// <para>IP address of the destination (IPv4 or IPv6).</para>
		/// <example></example>
		///</summary>
		public static string DestinationIp = nameof(DestinationIp);
		///<summary>
		/// <para><c>destination.mac</c></para>
		/// <para>MAC address of the destination.
		/// The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
		/// <para>pattern: </para></para>
		/// <example>00-00-5E-00-53-23</example>
		///</summary>
		public static string DestinationMac = nameof(DestinationMac);
		///<summary>
		/// <para><c>destination.nat.ip</c></para>
		/// <para>Translated ip of destination based NAT sessions (e.g. internet to private DMZ)
		/// Typically used with load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		public static string DestinationNatIp = nameof(DestinationNatIp);
		///<summary>
		/// <para><c>destination.nat.port</c></para>
		/// <para>Port the source session is translated to by NAT Device.
		/// Typically used with load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		public static string DestinationNatPort = nameof(DestinationNatPort);
		///<summary>
		/// <para><c>destination.packets</c></para>
		/// <para>Packets sent from the destination to the source.</para>
		/// <example>12</example>
		///</summary>
		public static string DestinationPackets = nameof(DestinationPackets);
		///<summary>
		/// <para><c>destination.port</c></para>
		/// <para>Port of the destination.</para>
		/// <example></example>
		///</summary>
		public static string DestinationPort = nameof(DestinationPort);
		///<summary>
		/// <para><c>destination.registered_domain</c></para>
		/// <para>The highest registered destination domain, stripped of the subdomain.
		/// For example, the registered domain for "foo.example.com" is "example.com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".</para>
		/// <example>example.com</example>
		///</summary>
		public static string DestinationRegisteredDomain = nameof(DestinationRegisteredDomain);
		///<summary>
		/// <para><c>destination.subdomain</c></para>
		/// <para>The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
		/// For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.</para>
		/// <example>east</example>
		///</summary>
		public static string DestinationSubdomain = nameof(DestinationSubdomain);
		///<summary>
		/// <para><c>destination.top_level_domain</c></para>
		/// <para>The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".</para>
		/// <example>co.uk</example>
		///</summary>
		public static string DestinationTopLevelDomain = nameof(DestinationTopLevelDomain);
		///<summary>
		/// <para><c>destination.as.number</c></para>
		/// <para>Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.</para>
		/// <example>15169</example>
		///</summary>
		public static string DestinationAsNumber = nameof(DestinationAsNumber);
		///<summary>
		/// <para><c>destination.as.organization.name</c></para>
		/// <para>Organization name.</para>
		/// <example>Google LLC</example>
		///</summary>
		public static string DestinationAsOrganizationName = nameof(DestinationAsOrganizationName);
		///<summary>
		/// <para><c>destination.geo.city_name</c></para>
		/// <para>City name.</para>
		/// <example>Montreal</example>
		///</summary>
		public static string DestinationGeoCityName = nameof(DestinationGeoCityName);
		///<summary>
		/// <para><c>destination.geo.continent_code</c></para>
		/// <para>Two-letter code representing continent's name.</para>
		/// <example>NA</example>
		///</summary>
		public static string DestinationGeoContinentCode = nameof(DestinationGeoContinentCode);
		///<summary>
		/// <para><c>destination.geo.continent_name</c></para>
		/// <para>Name of the continent.</para>
		/// <example>North America</example>
		///</summary>
		public static string DestinationGeoContinentName = nameof(DestinationGeoContinentName);
		///<summary>
		/// <para><c>destination.geo.country_iso_code</c></para>
		/// <para>Country ISO code.</para>
		/// <example>CA</example>
		///</summary>
		public static string DestinationGeoCountryIsoCode = nameof(DestinationGeoCountryIsoCode);
		///<summary>
		/// <para><c>destination.geo.country_name</c></para>
		/// <para>Country name.</para>
		/// <example>Canada</example>
		///</summary>
		public static string DestinationGeoCountryName = nameof(DestinationGeoCountryName);
		///<summary>
		/// <para><c>destination.geo.location</c></para>
		/// <para>Longitude and latitude.</para>
		/// <example>{ "lon": -73.614830, "lat": 45.505918 }</example>
		///</summary>
		public static string DestinationGeoLocation = nameof(DestinationGeoLocation);
		///<summary>
		/// <para><c>destination.geo.name</c></para>
		/// <para>User-defined description of a location, at the level of granularity they care about.
		/// Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
		/// Not typically used in automated geolocation.</para>
		/// <example>boston-dc</example>
		///</summary>
		public static string DestinationGeoName = nameof(DestinationGeoName);
		///<summary>
		/// <para><c>destination.geo.postal_code</c></para>
		/// <para>Postal code associated with the location.
		/// Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.</para>
		/// <example>94040</example>
		///</summary>
		public static string DestinationGeoPostalCode = nameof(DestinationGeoPostalCode);
		///<summary>
		/// <para><c>destination.geo.region_iso_code</c></para>
		/// <para>Region ISO code.</para>
		/// <example>CA-QC</example>
		///</summary>
		public static string DestinationGeoRegionIsoCode = nameof(DestinationGeoRegionIsoCode);
		///<summary>
		/// <para><c>destination.geo.region_name</c></para>
		/// <para>Region name.</para>
		/// <example>Quebec</example>
		///</summary>
		public static string DestinationGeoRegionName = nameof(DestinationGeoRegionName);
		///<summary>
		/// <para><c>destination.geo.timezone</c></para>
		/// <para>The time zone of the location, such as IANA time zone name.</para>
		/// <example>America/Argentina/Buenos_Aires</example>
		///</summary>
		public static string DestinationGeoTimezone = nameof(DestinationGeoTimezone);
		///<summary>
		/// <para><c>destination.user.domain</c></para>
		/// <para>Name of the directory the user is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string DestinationUserDomain = nameof(DestinationUserDomain);
		///<summary>
		/// <para><c>destination.user.email</c></para>
		/// <para>User email address.</para>
		/// <example></example>
		///</summary>
		public static string DestinationUserEmail = nameof(DestinationUserEmail);
		///<summary>
		/// <para><c>destination.user.full_name</c></para>
		/// <para>User's full name, if available.</para>
		/// <example>Albert Einstein</example>
		///</summary>
		public static string DestinationUserFullName = nameof(DestinationUserFullName);
		///<summary>
		/// <para><c>destination.user.hash</c></para>
		/// <para>Unique user hash to correlate information for a user in anonymized form.
		/// Useful if `user.id` or `user.name` contain confidential information and cannot be used.</para>
		/// <example></example>
		///</summary>
		public static string DestinationUserHash = nameof(DestinationUserHash);
		///<summary>
		/// <para><c>destination.user.id</c></para>
		/// <para>Unique identifier of the user.</para>
		/// <example>S-1-5-21-202424912787-2692429404-2351956786-1000</example>
		///</summary>
		public static string DestinationUserId = nameof(DestinationUserId);
		///<summary>
		/// <para><c>destination.user.name</c></para>
		/// <para>Short name or login of the user.</para>
		/// <example>a.einstein</example>
		///</summary>
		public static string DestinationUserName = nameof(DestinationUserName);
		///<summary>
		/// <para><c>destination.user.group.domain</c></para>
		/// <para>Name of the directory the group is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string DestinationUserGroupDomain = nameof(DestinationUserGroupDomain);
		///<summary>
		/// <para><c>destination.user.group.id</c></para>
		/// <para>Unique identifier for the group on the system/platform.</para>
		/// <example></example>
		///</summary>
		public static string DestinationUserGroupId = nameof(DestinationUserGroupId);
		///<summary>
		/// <para><c>destination.user.group.name</c></para>
		/// <para>Name of the group.</para>
		/// <example></example>
		///</summary>
		public static string DestinationUserGroupName = nameof(DestinationUserGroupName);
		///<summary>
		/// <para><c>destination.user.risk.calculated_level</c></para>
		/// <para>A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>High</example>
		///</summary>
		public static string DestinationUserRiskCalculatedLevel = nameof(DestinationUserRiskCalculatedLevel);
		///<summary>
		/// <para><c>destination.user.risk.calculated_score</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>880.73</example>
		///</summary>
		public static string DestinationUserRiskCalculatedScore = nameof(DestinationUserRiskCalculatedScore);
		///<summary>
		/// <para><c>destination.user.risk.calculated_score_norm</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.</para>
		/// <example>88.73</example>
		///</summary>
		public static string DestinationUserRiskCalculatedScoreNorm = nameof(DestinationUserRiskCalculatedScoreNorm);
		///<summary>
		/// <para><c>destination.user.risk.static_level</c></para>
		/// <para>A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>High</example>
		///</summary>
		public static string DestinationUserRiskStaticLevel = nameof(DestinationUserRiskStaticLevel);
		///<summary>
		/// <para><c>destination.user.risk.static_score</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>830.0</example>
		///</summary>
		public static string DestinationUserRiskStaticScore = nameof(DestinationUserRiskStaticScore);
		///<summary>
		/// <para><c>destination.user.risk.static_score_norm</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.</para>
		/// <example>83.0</example>
		///</summary>
		public static string DestinationUserRiskStaticScoreNorm = nameof(DestinationUserRiskStaticScoreNorm);
		///<summary>
		/// <para><c>device.id</c></para>
		/// <para>The unique identifier of a device. The identifier must not change across application sessions but stay fixed for an instance of a (mobile) device. 
		/// On iOS, this value must be equal to the vendor identifier (https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android, this value must be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application.
		/// For GDPR and data protection law reasons this identifier should not carry information that would allow to identify a user.</para>
		/// <example>00000000-54b3-e7c7-0000-000046bffd97</example>
		///</summary>
		public static string DeviceId = nameof(DeviceId);
		///<summary>
		/// <para><c>device.manufacturer</c></para>
		/// <para>The vendor name of the device manufacturer.</para>
		/// <example>Samsung</example>
		///</summary>
		public static string DeviceManufacturer = nameof(DeviceManufacturer);
		///<summary>
		/// <para><c>device.model.identifier</c></para>
		/// <para>The machine readable identifier of the device model.</para>
		/// <example>SM-G920F</example>
		///</summary>
		public static string DeviceModelIdentifier = nameof(DeviceModelIdentifier);
		///<summary>
		/// <para><c>device.model.name</c></para>
		/// <para>The human readable marketing name of the device model.</para>
		/// <example>Samsung Galaxy S6</example>
		///</summary>
		public static string DeviceModelName = nameof(DeviceModelName);
		///<summary>
		/// <para><c>dll.name</c></para>
		/// <para>Name of the library.
		/// This generally maps to the name of the file on disk.</para>
		/// <example>kernel32.dll</example>
		///</summary>
		public static string DllName = nameof(DllName);
		///<summary>
		/// <para><c>dll.path</c></para>
		/// <para>Full file path of the library.</para>
		/// <example>C:\Windows\System32\kernel32.dll</example>
		///</summary>
		public static string DllPath = nameof(DllPath);
		///<summary>
		/// <para><c>dll.hash.md5</c></para>
		/// <para>MD5 hash.</para>
		/// <example></example>
		///</summary>
		public static string DllHashMd5 = nameof(DllHashMd5);
		///<summary>
		/// <para><c>dll.hash.sha1</c></para>
		/// <para>SHA1 hash.</para>
		/// <example></example>
		///</summary>
		public static string DllHashSha1 = nameof(DllHashSha1);
		///<summary>
		/// <para><c>dll.hash.sha256</c></para>
		/// <para>SHA256 hash.</para>
		/// <example></example>
		///</summary>
		public static string DllHashSha256 = nameof(DllHashSha256);
		///<summary>
		/// <para><c>dll.hash.sha384</c></para>
		/// <para>SHA384 hash.</para>
		/// <example></example>
		///</summary>
		public static string DllHashSha384 = nameof(DllHashSha384);
		///<summary>
		/// <para><c>dll.hash.sha512</c></para>
		/// <para>SHA512 hash.</para>
		/// <example></example>
		///</summary>
		public static string DllHashSha512 = nameof(DllHashSha512);
		///<summary>
		/// <para><c>dll.hash.ssdeep</c></para>
		/// <para>SSDEEP hash.</para>
		/// <example></example>
		///</summary>
		public static string DllHashSsdeep = nameof(DllHashSsdeep);
		///<summary>
		/// <para><c>dll.hash.tlsh</c></para>
		/// <para>TLSH hash.</para>
		/// <example></example>
		///</summary>
		public static string DllHashTlsh = nameof(DllHashTlsh);
		///<summary>
		/// <para><c>dll.pe.architecture</c></para>
		/// <para>CPU architecture target for the file.</para>
		/// <example>x64</example>
		///</summary>
		public static string DllPeArchitecture = nameof(DllPeArchitecture);
		///<summary>
		/// <para><c>dll.pe.company</c></para>
		/// <para>Internal company name of the file, provided at compile-time.</para>
		/// <example>Microsoft Corporation</example>
		///</summary>
		public static string DllPeCompany = nameof(DllPeCompany);
		///<summary>
		/// <para><c>dll.pe.description</c></para>
		/// <para>Internal description of the file, provided at compile-time.</para>
		/// <example>Paint</example>
		///</summary>
		public static string DllPeDescription = nameof(DllPeDescription);
		///<summary>
		/// <para><c>dll.pe.file_version</c></para>
		/// <para>Internal version of the file, provided at compile-time.</para>
		/// <example>6.3.9600.17415</example>
		///</summary>
		public static string DllPeFileVersion = nameof(DllPeFileVersion);
		///<summary>
		/// <para><c>dll.pe.go_import_hash</c></para>
		/// <para>A hash of the Go language imports in a PE file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// The algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).</para>
		/// <example>10bddcb4cee42080f76c88d9ff964491</example>
		///</summary>
		public static string DllPeGoImportHash = nameof(DllPeGoImportHash);
		///<summary>
		/// <para><c>dll.pe.go_imports</c></para>
		/// <para>List of imported Go language element names and types.</para>
		/// <example></example>
		///</summary>
		public static string DllPeGoImports = nameof(DllPeGoImports);
		///<summary>
		/// <para><c>dll.pe.go_imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string DllPeGoImportsNamesEntropy = nameof(DllPeGoImportsNamesEntropy);
		///<summary>
		/// <para><c>dll.pe.go_imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string DllPeGoImportsNamesVarEntropy = nameof(DllPeGoImportsNamesVarEntropy);
		///<summary>
		/// <para><c>dll.pe.go_stripped</c></para>
		/// <para>Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.</para>
		/// <example></example>
		///</summary>
		public static string DllPeGoStripped = nameof(DllPeGoStripped);
		///<summary>
		/// <para><c>dll.pe.imphash</c></para>
		/// <para>A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.</para>
		/// <example>0c6803c4e922103c4dca5963aad36ddf</example>
		///</summary>
		public static string DllPeImphash = nameof(DllPeImphash);
		///<summary>
		/// <para><c>dll.pe.import_hash</c></para>
		/// <para>A hash of the imports in a PE file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is a synonym for imphash.</para>
		/// <example>d41d8cd98f00b204e9800998ecf8427e</example>
		///</summary>
		public static string DllPeImportHash = nameof(DllPeImportHash);
		///<summary>
		/// <para><c>dll.pe.imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string DllPeImportsNamesEntropy = nameof(DllPeImportsNamesEntropy);
		///<summary>
		/// <para><c>dll.pe.imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string DllPeImportsNamesVarEntropy = nameof(DllPeImportsNamesVarEntropy);
		///<summary>
		/// <para><c>dll.pe.original_file_name</c></para>
		/// <para>Internal name of the file, provided at compile-time.</para>
		/// <example>MSPAINT.EXE</example>
		///</summary>
		public static string DllPeOriginalFileName = nameof(DllPeOriginalFileName);
		///<summary>
		/// <para><c>dll.pe.pehash</c></para>
		/// <para>A hash of the PE header and data from one or more PE sections. An pehash can be used to cluster files by transforming structural information about a file into a hash value.
		/// Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.</para>
		/// <example>73ff189b63cd6be375a7ff25179a38d347651975</example>
		///</summary>
		public static string DllPePehash = nameof(DllPePehash);
		///<summary>
		/// <para><c>dll.pe.product</c></para>
		/// <para>Internal product name of the file, provided at compile-time.</para>
		/// <example>MicrosoftÂ® WindowsÂ® Operating System</example>
		///</summary>
		public static string DllPeProduct = nameof(DllPeProduct);
		///<summary>
		/// <para><c>dll.code_signature.digest_algorithm</c></para>
		/// <para>The hashing algorithm used to sign the process.
		/// This value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.</para>
		/// <example>sha256</example>
		///</summary>
		public static string DllCodeSignatureDigestAlgorithm = nameof(DllCodeSignatureDigestAlgorithm);
		///<summary>
		/// <para><c>dll.code_signature.exists</c></para>
		/// <para>Boolean to capture if a signature is present.</para>
		/// <example>true</example>
		///</summary>
		public static string DllCodeSignatureExists = nameof(DllCodeSignatureExists);
		///<summary>
		/// <para><c>dll.code_signature.signing_id</c></para>
		/// <para>The identifier used to sign the process.
		/// This is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.</para>
		/// <example>com.apple.xpc.proxy</example>
		///</summary>
		public static string DllCodeSignatureSigningId = nameof(DllCodeSignatureSigningId);
		///<summary>
		/// <para><c>dll.code_signature.status</c></para>
		/// <para>Additional information about the certificate status.
		/// This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.</para>
		/// <example>ERROR_UNTRUSTED_ROOT</example>
		///</summary>
		public static string DllCodeSignatureStatus = nameof(DllCodeSignatureStatus);
		///<summary>
		/// <para><c>dll.code_signature.subject_name</c></para>
		/// <para>Subject name of the code signer</para>
		/// <example>Microsoft Corporation</example>
		///</summary>
		public static string DllCodeSignatureSubjectName = nameof(DllCodeSignatureSubjectName);
		///<summary>
		/// <para><c>dll.code_signature.team_id</c></para>
		/// <para>The team identifier used to sign the process.
		/// This is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.</para>
		/// <example>EQHXZ8M8AV</example>
		///</summary>
		public static string DllCodeSignatureTeamId = nameof(DllCodeSignatureTeamId);
		///<summary>
		/// <para><c>dll.code_signature.timestamp</c></para>
		/// <para>Date and time when the code signature was generated and signed.</para>
		/// <example>1/1/2021 12:10:30â€¯PM</example>
		///</summary>
		public static string DllCodeSignatureTimestamp = nameof(DllCodeSignatureTimestamp);
		///<summary>
		/// <para><c>dll.code_signature.trusted</c></para>
		/// <para>Stores the trust status of the certificate chain.
		/// Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.</para>
		/// <example>true</example>
		///</summary>
		public static string DllCodeSignatureTrusted = nameof(DllCodeSignatureTrusted);
		///<summary>
		/// <para><c>dll.code_signature.valid</c></para>
		/// <para>Boolean to capture if the digital signature is verified against the binary content.
		/// Leave unpopulated if a certificate was unchecked.</para>
		/// <example>true</example>
		///</summary>
		public static string DllCodeSignatureValid = nameof(DllCodeSignatureValid);
		///<summary>
		/// <para><c>dns.id</c></para>
		/// <para>The DNS packet identifier assigned by the program that generated the query. The identifier is copied to the response.</para>
		/// <example>62111</example>
		///</summary>
		public static string DnsId = nameof(DnsId);
		///<summary>
		/// <para><c>dns.op_code</c></para>
		/// <para>The DNS operation code that specifies the kind of query in the message. This value is set by the originator of a query and copied into the response.</para>
		/// <example>QUERY</example>
		///</summary>
		public static string DnsOpCode = nameof(DnsOpCode);
		///<summary>
		/// <para><c>dns.question.class</c></para>
		/// <para>The class of records being queried.</para>
		/// <example>IN</example>
		///</summary>
		public static string DnsQuestionClass = nameof(DnsQuestionClass);
		///<summary>
		/// <para><c>dns.question.name</c></para>
		/// <para>The name being queried.
		/// If the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \t, \r, and \n respectively.</para>
		/// <example>www.example.com</example>
		///</summary>
		public static string DnsQuestionName = nameof(DnsQuestionName);
		///<summary>
		/// <para><c>dns.question.registered_domain</c></para>
		/// <para>The highest registered domain, stripped of the subdomain.
		/// For example, the registered domain for "foo.example.com" is "example.com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".</para>
		/// <example>example.com</example>
		///</summary>
		public static string DnsQuestionRegisteredDomain = nameof(DnsQuestionRegisteredDomain);
		///<summary>
		/// <para><c>dns.question.subdomain</c></para>
		/// <para>The subdomain is all of the labels under the registered_domain.
		/// If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.</para>
		/// <example>www</example>
		///</summary>
		public static string DnsQuestionSubdomain = nameof(DnsQuestionSubdomain);
		///<summary>
		/// <para><c>dns.question.top_level_domain</c></para>
		/// <para>The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".</para>
		/// <example>co.uk</example>
		///</summary>
		public static string DnsQuestionTopLevelDomain = nameof(DnsQuestionTopLevelDomain);
		///<summary>
		/// <para><c>dns.question.type</c></para>
		/// <para>The type of record being queried.</para>
		/// <example>AAAA</example>
		///</summary>
		public static string DnsQuestionType = nameof(DnsQuestionType);
		///<summary>
		/// <para><c>dns.response_code</c></para>
		/// <para>The DNS response code.</para>
		/// <example>NOERROR</example>
		///</summary>
		public static string DnsResponseCode = nameof(DnsResponseCode);
		///<summary>
		/// <para><c>dns.type</c></para>
		/// <para>The type of DNS event captured, query or answer.
		/// If your source of DNS events only gives you DNS queries, you should only create dns events of type `dns.type:query`.
		/// If your source of DNS events gives you answers as well, you should create one event per query (optionally as soon as the query is seen). And a second event containing all query details as well as an array of answers.</para>
		/// <example>answer</example>
		///</summary>
		public static string DnsType = nameof(DnsType);
		///<summary>
		/// <para><c>ecs.version</c></para>
		/// <para>ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
		/// When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
		/// <para><br/>This is a required field</para></para>
		/// <example>1.0.0</example>
		///</summary>
		public static string EcsVersion = nameof(EcsVersion);
		///<summary>
		/// <para><c>elf.architecture</c></para>
		/// <para>Machine architecture of the ELF file.</para>
		/// <example>x86-64</example>
		///</summary>
		public static string ElfArchitecture = nameof(ElfArchitecture);
		///<summary>
		/// <para><c>elf.byte_order</c></para>
		/// <para>Byte sequence of ELF file.</para>
		/// <example>Little Endian</example>
		///</summary>
		public static string ElfByteOrder = nameof(ElfByteOrder);
		///<summary>
		/// <para><c>elf.cpu_type</c></para>
		/// <para>CPU type of the ELF file.</para>
		/// <example>Intel</example>
		///</summary>
		public static string ElfCpuType = nameof(ElfCpuType);
		///<summary>
		/// <para><c>elf.creation_date</c></para>
		/// <para>Extracted when possible from the file's metadata. Indicates when it was built or compiled. It can also be faked by malware creators.</para>
		/// <example></example>
		///</summary>
		public static string ElfCreationDate = nameof(ElfCreationDate);
		///<summary>
		/// <para><c>elf.go_import_hash</c></para>
		/// <para>A hash of the Go language imports in an ELF file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// The algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).</para>
		/// <example>10bddcb4cee42080f76c88d9ff964491</example>
		///</summary>
		public static string ElfGoImportHash = nameof(ElfGoImportHash);
		///<summary>
		/// <para><c>elf.go_imports</c></para>
		/// <para>List of imported Go language element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ElfGoImports = nameof(ElfGoImports);
		///<summary>
		/// <para><c>elf.go_imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string ElfGoImportsNamesEntropy = nameof(ElfGoImportsNamesEntropy);
		///<summary>
		/// <para><c>elf.go_imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string ElfGoImportsNamesVarEntropy = nameof(ElfGoImportsNamesVarEntropy);
		///<summary>
		/// <para><c>elf.go_stripped</c></para>
		/// <para>Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.</para>
		/// <example></example>
		///</summary>
		public static string ElfGoStripped = nameof(ElfGoStripped);
		///<summary>
		/// <para><c>elf.header.abi_version</c></para>
		/// <para>Version of the ELF Application Binary Interface (ABI).</para>
		/// <example></example>
		///</summary>
		public static string ElfHeaderAbiVersion = nameof(ElfHeaderAbiVersion);
		///<summary>
		/// <para><c>elf.header.class</c></para>
		/// <para>Header class of the ELF file.</para>
		/// <example></example>
		///</summary>
		public static string ElfHeaderClass = nameof(ElfHeaderClass);
		///<summary>
		/// <para><c>elf.header.data</c></para>
		/// <para>Data table of the ELF header.</para>
		/// <example></example>
		///</summary>
		public static string ElfHeaderData = nameof(ElfHeaderData);
		///<summary>
		/// <para><c>elf.header.entrypoint</c></para>
		/// <para>Header entrypoint of the ELF file.</para>
		/// <example></example>
		///</summary>
		public static string ElfHeaderEntrypoint = nameof(ElfHeaderEntrypoint);
		///<summary>
		/// <para><c>elf.header.object_version</c></para>
		/// <para>"0x1" for original ELF files.</para>
		/// <example></example>
		///</summary>
		public static string ElfHeaderObjectVersion = nameof(ElfHeaderObjectVersion);
		///<summary>
		/// <para><c>elf.header.os_abi</c></para>
		/// <para>Application Binary Interface (ABI) of the Linux OS.</para>
		/// <example></example>
		///</summary>
		public static string ElfHeaderOsAbi = nameof(ElfHeaderOsAbi);
		///<summary>
		/// <para><c>elf.header.type</c></para>
		/// <para>Header type of the ELF file.</para>
		/// <example></example>
		///</summary>
		public static string ElfHeaderType = nameof(ElfHeaderType);
		///<summary>
		/// <para><c>elf.header.version</c></para>
		/// <para>Version of the ELF header.</para>
		/// <example></example>
		///</summary>
		public static string ElfHeaderVersion = nameof(ElfHeaderVersion);
		///<summary>
		/// <para><c>elf.import_hash</c></para>
		/// <para>A hash of the imports in an ELF file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is an ELF implementation of the Windows PE imphash.</para>
		/// <example>d41d8cd98f00b204e9800998ecf8427e</example>
		///</summary>
		public static string ElfImportHash = nameof(ElfImportHash);
		///<summary>
		/// <para><c>elf.imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ElfImportsNamesEntropy = nameof(ElfImportsNamesEntropy);
		///<summary>
		/// <para><c>elf.imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ElfImportsNamesVarEntropy = nameof(ElfImportsNamesVarEntropy);
		///<summary>
		/// <para><c>elf.telfhash</c></para>
		/// <para>telfhash symbol hash for ELF file.</para>
		/// <example></example>
		///</summary>
		public static string ElfTelfhash = nameof(ElfTelfhash);
		///<summary>
		/// <para><c>email.content_type</c></para>
		/// <para>Information about how the message is to be displayed.
		/// Typically a MIME type.</para>
		/// <example>text/plain</example>
		///</summary>
		public static string EmailContentType = nameof(EmailContentType);
		///<summary>
		/// <para><c>email.delivery_timestamp</c></para>
		/// <para>The date and time when the email message was received by the service or client.</para>
		/// <example>11/10/2020 10:12:34â€¯PM</example>
		///</summary>
		public static string EmailDeliveryTimestamp = nameof(EmailDeliveryTimestamp);
		///<summary>
		/// <para><c>email.direction</c></para>
		/// <para>The direction of the message based on the sending and receiving domains.</para>
		/// <example>inbound</example>
		///</summary>
		public static string EmailDirection = nameof(EmailDirection);
		///<summary>
		/// <para><c>email.local_id</c></para>
		/// <para>Unique identifier given to the email by the source that created the event.
		/// Identifier is not persistent across hops.</para>
		/// <example>c26dbea0-80d5-463b-b93c-4e8b708219ce</example>
		///</summary>
		public static string EmailLocalId = nameof(EmailLocalId);
		///<summary>
		/// <para><c>email.message_id</c></para>
		/// <para>Identifier from the RFC 5322 `Message-ID:` email header that refers to a particular email message.</para>
		/// <example>81ce15$8r2j59@mail01.example.com</example>
		///</summary>
		public static string EmailMessageId = nameof(EmailMessageId);
		///<summary>
		/// <para><c>email.origination_timestamp</c></para>
		/// <para>The date and time the email message was composed. Many email clients will fill in this value automatically when the message is sent by a user.</para>
		/// <example>11/10/2020 10:12:34â€¯PM</example>
		///</summary>
		public static string EmailOriginationTimestamp = nameof(EmailOriginationTimestamp);
		///<summary>
		/// <para><c>email.sender.address</c></para>
		/// <para>Per RFC 5322, specifies the address responsible for the actual transmission of the message.</para>
		/// <example></example>
		///</summary>
		public static string EmailSenderAddress = nameof(EmailSenderAddress);
		///<summary>
		/// <para><c>email.subject</c></para>
		/// <para>A brief summary of the topic of the message.</para>
		/// <example>Please see this important message.</example>
		///</summary>
		public static string EmailSubject = nameof(EmailSubject);
		///<summary>
		/// <para><c>email.x_mailer</c></para>
		/// <para>The name of the application that was used to draft and send the original email message.</para>
		/// <example>Spambot v2.5</example>
		///</summary>
		public static string EmailXMailer = nameof(EmailXMailer);
		///<summary>
		/// <para><c>error.code</c></para>
		/// <para>Error code describing the error.</para>
		/// <example></example>
		///</summary>
		public static string ErrorCode = nameof(ErrorCode);
		///<summary>
		/// <para><c>error.id</c></para>
		/// <para>Unique identifier for the error.</para>
		/// <example></example>
		///</summary>
		public static string ErrorId = nameof(ErrorId);
		///<summary>
		/// <para><c>error.message</c></para>
		/// <para>Error message.</para>
		/// <example></example>
		///</summary>
		public static string ErrorMessage = nameof(ErrorMessage);
		///<summary>
		/// <para><c>error.stack_trace</c></para>
		/// <para>The stack trace of this error in plain text.</para>
		/// <example></example>
		///</summary>
		public static string ErrorStackTrace = nameof(ErrorStackTrace);
		///<summary>
		/// <para><c>error.type</c></para>
		/// <para>The type of the error, for example the class name of the exception.</para>
		/// <example>java.lang.NullPointerException</example>
		///</summary>
		public static string ErrorType = nameof(ErrorType);
		///<summary>
		/// <para><c>event.action</c></para>
		/// <para>The action captured by the event.
		/// This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.</para>
		/// <example>user-password-change</example>
		///</summary>
		public static string EventAction = nameof(EventAction);
		///<summary>
		/// <para><c>event.agent_id_status</c></para>
		/// <para>Agents are normally responsible for populating the `agent.id` field value. If the system receiving events is capable of validating the value based on authentication information for the client then this field can be used to reflect the outcome of that validation.
		/// For example if the agent's connection is authenticated with mTLS and the client cert contains the ID of the agent to which the cert was issued then the `agent.id` value in events can be checked against the certificate. If the values match then `event.agent_id_status: verified` is added to the event, otherwise one of the other allowed values should be used.
		/// If no validation is performed then the field should be omitted.
		/// The allowed values are:
		/// `verified` - The `agent.id` field value matches expected value obtained from auth metadata.
		/// `mismatch` - The `agent.id` field value does not match the expected value obtained from auth metadata.
		/// `missing` - There was no `agent.id` field in the event to validate.
		/// `auth_metadata_missing` - There was no auth metadata or it was missing information about the agent ID.</para>
		/// <example>verified</example>
		///</summary>
		public static string EventAgentIdStatus = nameof(EventAgentIdStatus);
		///<summary>
		/// <para><c>event.code</c></para>
		/// <para>Identification code for this event, if one exists.
		/// Some event sources use event codes to identify messages unambiguously, regardless of message language or wording adjustments over time. An example of this is the Windows Event ID.</para>
		/// <example>4648</example>
		///</summary>
		public static string EventCode = nameof(EventCode);
		///<summary>
		/// <para><c>event.created</c></para>
		/// <para>`event.created` contains the date/time when the event was first read by an agent, or by your pipeline.
		/// This field is distinct from `@timestamp` in that `@timestamp` typically contain the time extracted from the original event.
		/// In most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent's or pipeline's ability to keep up with your event source.
		/// In case the two timestamps are identical, `@timestamp` should be used.</para>
		/// <example>5/23/2016 8:05:34â€¯AM</example>
		///</summary>
		public static string EventCreated = nameof(EventCreated);
		///<summary>
		/// <para><c>event.dataset</c></para>
		/// <para>Name of the dataset.
		/// If an event source publishes more than one type of log or events (e.g. access log, error log), the dataset is used to specify which one the event comes from.
		/// It's recommended but not required to start the dataset name with the module name, followed by a dot, then the dataset name.</para>
		/// <example>apache.access</example>
		///</summary>
		public static string EventDataset = nameof(EventDataset);
		///<summary>
		/// <para><c>event.duration</c></para>
		/// <para>Duration of the event in nanoseconds.
		/// If `event.start` and `event.end` are known this value should be the difference between the end and start time.</para>
		/// <example></example>
		///</summary>
		public static string EventDuration = nameof(EventDuration);
		///<summary>
		/// <para><c>event.end</c></para>
		/// <para>`event.end` contains the date when the event ended or when the activity was last observed.</para>
		/// <example></example>
		///</summary>
		public static string EventEnd = nameof(EventEnd);
		///<summary>
		/// <para><c>event.hash</c></para>
		/// <para>Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity.</para>
		/// <example>123456789012345678901234567890ABCD</example>
		///</summary>
		public static string EventHash = nameof(EventHash);
		///<summary>
		/// <para><c>event.id</c></para>
		/// <para>Unique ID to describe the event.</para>
		/// <example>8a4f500d</example>
		///</summary>
		public static string EventId = nameof(EventId);
		///<summary>
		/// <para><c>event.ingested</c></para>
		/// <para>Timestamp when an event arrived in the central data store.
		/// This is different from `@timestamp`, which is when the event originally occurred.  It's also different from `event.created`, which is meant to capture the first time an agent saw the event.
		/// In normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` &lt; `event.created` &lt; `event.ingested`.</para>
		/// <example>5/23/2016 8:05:35â€¯AM</example>
		///</summary>
		public static string EventIngested = nameof(EventIngested);
		///<summary>
		/// <para><c>event.kind</c></para>
		/// <para>This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.
		/// `event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.
		/// The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data is coming in at a regular interval or not.
		/// <para><br/>Allowed Values:</para>
		/// <list type="table">
		/// <listheader><term>Value</term><description>Description</description></listheader>
		/// <item><term>alert</term><description>This value indicates an event such as an alert or notable event, triggered by a detection rule executing externally to the Elastic Stack.
		/// `event.kind:alert` is often populated for events coming from firewalls, intrusion detection systems, endpoint detection and response systems, and so on.
		/// This value is not used by Elastic solutions for alert documents that are created by rules executing within the Kibana alerting framework.</description></item>
		/// <item><term>asset</term><description>This value indicates events whose primary purpose is to store an inventory of assets/entities and their attributes. Assets/entities are objects (such as users and hosts) that are expected to be subjects of detailed analysis within the system.
		/// Examples include lists of user identities or accounts ingested from directory services such as Active Directory (AD), inventory of hosts pulled from configuration management databases (CMDB), and lists of cloud storage buckets pulled from cloud provider APIs.
		/// This value is used by Elastic Security for asset management solutions. `event.kind: asset` is not used for normal system events or logs that are coming from an asset/entity, nor is it used for system events or logs coming from a directory or CMDB system.</description></item>
		/// <item><term>enrichment</term><description>The `enrichment` value indicates an event collected to provide additional context, often to other events.
		/// An example is collecting indicators of compromise (IOCs) from a threat intelligence provider with the intent to use those values to enrich other events. The IOC events from the intelligence provider should be categorized as `event.kind:enrichment`.</description></item>
		/// <item><term>event</term><description>This value is the most general and most common value for this field. It is used to represent events that indicate that something happened.</description></item>
		/// <item><term>metric</term><description>This value is used to indicate that this event describes a numeric measurement taken at given point in time.
		/// Examples include CPU utilization, memory usage, or device temperature.
		/// Metric events are often collected on a predictable frequency, such as once every few seconds, or once a minute, but can also be used to describe ad-hoc numeric metric queries.</description></item>
		/// <item><term>state</term><description>The state value is similar to metric, indicating that this event describes a measurement taken at given point in time, except that the measurement does not result in a numeric value, but rather one of a fixed set of categorical values that represent conditions or states.
		/// Examples include periodic events reporting Elasticsearch cluster state (green/yellow/red), the state of a TCP connection (open, closed, fin_wait, etc.), the state of a host with respect to a software vulnerability (vulnerable, not vulnerable), and the state of a system regarding compliance with a regulatory standard (compliant, not compliant).
		/// Note that an event that describes a change of state would not use `event.kind:state`, but instead would use 'event.kind:event' since a state change fits the more general event definition of something that happened.
		/// State events are often collected on a predictable frequency, such as once every few seconds, once a minute, once an hour, or once a day, but can also be used to describe ad-hoc state queries.</description></item>
		/// <item><term>pipeline_error</term><description>This value indicates that an error occurred during the ingestion of this event, and that event data may be missing, inconsistent, or incorrect. `event.kind:pipeline_error` is often associated with parsing errors.</description></item>
		/// <item><term>signal</term><description>This value is used by Elastic solutions (e.g., Security, Observability) for alert documents that are created by rules executing within the Kibana alerting framework.
		/// Usage of this value is reserved, and data ingestion pipelines must not populate `event.kind` with the value "signal".</description></item>
		/// </list></para>
		/// <example>alert</example>
		///</summary>
		public static string EventKind = nameof(EventKind);
		///<summary>
		/// <para><c>event.module</c></para>
		/// <para>Name of the module this data is coming from.
		/// If your monitoring agent supports the concept of modules or plugins to process events of a given source (e.g. Apache logs), `event.module` should contain the name of this module.</para>
		/// <example>apache</example>
		///</summary>
		public static string EventModule = nameof(EventModule);
		///<summary>
		/// <para><c>event.original</c></para>
		/// <para>Raw text message of entire event. Used to demonstrate log integrity or where the full log message (before splitting it up in multiple parts) may be required, e.g. for reindex.
		/// This field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`. If users wish to override this and index this field, please see `Field data types` in the `Elasticsearch Reference`.
		/// <para><br/>Stored but not available for search in Elasticsearch by default</para></para>
		/// <example>Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124; worm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232</example>
		///</summary>
		public static string EventOriginal = nameof(EventOriginal);
		///<summary>
		/// <para><c>event.outcome</c></para>
		/// <para>This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.
		/// `event.outcome` simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event.
		/// Note that when a single transaction is described in multiple events, each event may populate different values of `event.outcome`, according to their perspective.
		/// Also note that in the case of a compound event (a single event that contains multiple logical events), this field should be populated with the value that best captures the overall success or failure from the perspective of the event producer.
		/// Further note that not all events will have an associated outcome. For example, this field is generally not populated for metric events, events with `event.type:info`, or any events for which an outcome does not make logical sense.
		/// <para><br/>Allowed Values:</para>
		/// <list type="table">
		/// <listheader><term>Value</term><description>Description</description></listheader>
		/// <item><term>failure</term><description>Indicates that this event describes a failed result. A common example is `event.category:file AND event.type:access AND event.outcome:failure` to indicate that a file access was attempted, but was not successful.</description></item>
		/// <item><term>success</term><description>Indicates that this event describes a successful result. A common example is `event.category:file AND event.type:create AND event.outcome:success` to indicate that a file was successfully created.</description></item>
		/// <item><term>unknown</term><description>Indicates that this event describes only an attempt for which the result is unknown from the perspective of the event producer. For example, if the event contains information only about the request side of a transaction that results in a response, populating `event.outcome:unknown` in the request event is appropriate. The unknown value should not be used when an outcome doesn't make logical sense for the event. In such cases `event.outcome` should not be populated.</description></item>
		/// </list></para>
		/// <example>success</example>
		///</summary>
		public static string EventOutcome = nameof(EventOutcome);
		///<summary>
		/// <para><c>event.provider</c></para>
		/// <para>Source of the event.
		/// Event transports such as Syslog or the Windows Event Log typically mention the source of an event. It can be the name of the software that generated the event (e.g. Sysmon, httpd), or of a subsystem of the operating system (kernel, Microsoft-Windows-Security-Auditing).</para>
		/// <example>kernel</example>
		///</summary>
		public static string EventProvider = nameof(EventProvider);
		///<summary>
		/// <para><c>event.reason</c></para>
		/// <para>Reason why this event happened, according to the source.
		/// This describes the why of a particular action or outcome captured in the event. Where `event.action` captures the action from the event, `event.reason` describes why that action was taken. For example, a web proxy with an `event.action` which denied the request may also populate `event.reason` with the reason why (e.g. `blocked site`).</para>
		/// <example>Terminated an unexpected process</example>
		///</summary>
		public static string EventReason = nameof(EventReason);
		///<summary>
		/// <para><c>event.reference</c></para>
		/// <para>Reference URL linking to additional information about this event.
		/// This URL links to a static definition of this event. Alert events, indicated by `event.kind:alert`, are a common use case for this field.</para>
		/// <example>https://system.example.com/event/#0001234</example>
		///</summary>
		public static string EventReference = nameof(EventReference);
		///<summary>
		/// <para><c>event.risk_score</c></para>
		/// <para>Risk score or priority of the event (e.g. security solutions). Use your system's original value here.</para>
		/// <example></example>
		///</summary>
		public static string EventRiskScore = nameof(EventRiskScore);
		///<summary>
		/// <para><c>event.risk_score_norm</c></para>
		/// <para>Normalized risk score or priority of the event, on a scale of 0 to 100.
		/// This is mainly useful if you use more than one system that assigns risk scores, and you want to see a normalized value across all systems.</para>
		/// <example></example>
		///</summary>
		public static string EventRiskScoreNorm = nameof(EventRiskScoreNorm);
		///<summary>
		/// <para><c>event.sequence</c></para>
		/// <para>Sequence number of the event.
		/// The sequence number is a value published by some event sources, to make the exact ordering of events unambiguous, regardless of the timestamp precision.</para>
		/// <example></example>
		///</summary>
		public static string EventSequence = nameof(EventSequence);
		///<summary>
		/// <para><c>event.severity</c></para>
		/// <para>The numeric severity of the event according to your event source.
		/// What the different severity values mean can be different between sources and use cases. It's up to the implementer to make sure severities are consistent across events from the same source.
		/// The Syslog severity belongs in `log.syslog.severity.code`. `event.severity` is meant to represent the severity according to the event source (e.g. firewall, IDS). If the event source does not publish its own severity, you may optionally copy the `log.syslog.severity.code` to `event.severity`.</para>
		/// <example>7</example>
		///</summary>
		public static string EventSeverity = nameof(EventSeverity);
		///<summary>
		/// <para><c>event.start</c></para>
		/// <para>`event.start` contains the date when the event started or when the activity was first observed.</para>
		/// <example></example>
		///</summary>
		public static string EventStart = nameof(EventStart);
		///<summary>
		/// <para><c>event.timezone</c></para>
		/// <para>This field should be populated when the event's timestamp does not include timezone information already (e.g. default Syslog timestamps). It's optional otherwise.
		/// Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"), abbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").</para>
		/// <example></example>
		///</summary>
		public static string EventTimezone = nameof(EventTimezone);
		///<summary>
		/// <para><c>event.url</c></para>
		/// <para>URL linking to an external system to continue investigation of this event.
		/// This URL links to another system where in-depth investigation of the specific occurrence of this event can take place. Alert events, indicated by `event.kind:alert`, are a common use case for this field.</para>
		/// <example>https://mysystem.example.com/alert/5271dedb-f5b0-4218-87f0-4ac4870a38fe</example>
		///</summary>
		public static string EventUrl = nameof(EventUrl);
		///<summary>
		/// <para><c>faas.coldstart</c></para>
		/// <para>Boolean value indicating a cold start of a function.</para>
		/// <example></example>
		///</summary>
		public static string FaasColdstart = nameof(FaasColdstart);
		///<summary>
		/// <para><c>faas.execution</c></para>
		/// <para>The execution ID of the current function execution.</para>
		/// <example>af9d5aa4-a685-4c5f-a22b-444f80b3cc28</example>
		///</summary>
		public static string FaasExecution = nameof(FaasExecution);
		///<summary>
		/// <para><c>faas.id</c></para>
		/// <para>The unique identifier of a serverless function.
		/// For AWS Lambda it's the function ARN (Amazon Resource Name) without a version or alias suffix.</para>
		/// <example>arn:aws:lambda:us-west-2:123456789012:function:my-function</example>
		///</summary>
		public static string FaasId = nameof(FaasId);
		///<summary>
		/// <para><c>faas.name</c></para>
		/// <para>The name of a serverless function.</para>
		/// <example>my-function</example>
		///</summary>
		public static string FaasName = nameof(FaasName);
		///<summary>
		/// <para><c>faas.trigger.request_id</c></para>
		/// <para>The ID of the trigger request , message, event, etc.</para>
		/// <example>123456789</example>
		///</summary>
		public static string FaasTriggerRequestId = nameof(FaasTriggerRequestId);
		///<summary>
		/// <para><c>faas.trigger.type</c></para>
		/// <para>The trigger for the function execution.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>http</item>
		/// <item>pubsub</item>
		/// <item>datasource</item>
		/// <item>timer</item>
		/// <item>other</item>
		/// </list></para>
		/// <example>http</example>
		///</summary>
		public static string FaasTriggerType = nameof(FaasTriggerType);
		///<summary>
		/// <para><c>faas.version</c></para>
		/// <para>The version of a serverless function.</para>
		/// <example>123</example>
		///</summary>
		public static string FaasVersion = nameof(FaasVersion);
		///<summary>
		/// <para><c>file.accessed</c></para>
		/// <para>Last time the file was accessed.
		/// Note that not all filesystems keep track of access time.</para>
		/// <example></example>
		///</summary>
		public static string FileAccessed = nameof(FileAccessed);
		///<summary>
		/// <para><c>file.created</c></para>
		/// <para>File creation time.
		/// Note that not all filesystems store the creation time.</para>
		/// <example></example>
		///</summary>
		public static string FileCreated = nameof(FileCreated);
		///<summary>
		/// <para><c>file.ctime</c></para>
		/// <para>Last time the file attributes or metadata changed.
		/// Note that changes to the file content will update `mtime`. This implies `ctime` will be adjusted at the same time, since `mtime` is an attribute of the file.</para>
		/// <example></example>
		///</summary>
		public static string FileCtime = nameof(FileCtime);
		///<summary>
		/// <para><c>file.device</c></para>
		/// <para>Device that is the source of the file.</para>
		/// <example>sda</example>
		///</summary>
		public static string FileDevice = nameof(FileDevice);
		///<summary>
		/// <para><c>file.directory</c></para>
		/// <para>Directory where the file is located. It should include the drive letter, when appropriate.</para>
		/// <example>/home/alice</example>
		///</summary>
		public static string FileDirectory = nameof(FileDirectory);
		///<summary>
		/// <para><c>file.drive_letter</c></para>
		/// <para>Drive letter where the file is located. This field is only relevant on Windows.
		/// The value should be uppercase, and not include the colon.</para>
		/// <example>C</example>
		///</summary>
		public static string FileDriveLetter = nameof(FileDriveLetter);
		///<summary>
		/// <para><c>file.extension</c></para>
		/// <para>File extension, excluding the leading dot.
		/// Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").</para>
		/// <example>png</example>
		///</summary>
		public static string FileExtension = nameof(FileExtension);
		///<summary>
		/// <para><c>file.fork_name</c></para>
		/// <para>A fork is additional data associated with a filesystem object.
		/// On Linux, a resource fork is used to store additional data with a filesystem object. A file always has at least one fork for the data portion, and additional forks may exist.
		/// On NTFS, this is analogous to an Alternate Data Stream (ADS), and the default data stream for a file is just called $DATA. Zone.Identifier is commonly used by Windows to track contents downloaded from the Internet. An ADS is typically of the form: `C:\path\to\filename.extension:some_fork_name`, and `some_fork_name` is the value that should populate `fork_name`. `filename.extension` should populate `file.name`, and `extension` should populate `file.extension`. The full path, `file.path`, will include the fork name.</para>
		/// <example>Zone.Identifer</example>
		///</summary>
		public static string FileForkName = nameof(FileForkName);
		///<summary>
		/// <para><c>file.gid</c></para>
		/// <para>Primary group ID (GID) of the file.</para>
		/// <example>1001</example>
		///</summary>
		public static string FileGid = nameof(FileGid);
		///<summary>
		/// <para><c>file.group</c></para>
		/// <para>Primary group name of the file.</para>
		/// <example>alice</example>
		///</summary>
		public static string FileGroup = nameof(FileGroup);
		///<summary>
		/// <para><c>file.inode</c></para>
		/// <para>Inode representing the file in the filesystem.</para>
		/// <example>256383</example>
		///</summary>
		public static string FileInode = nameof(FileInode);
		///<summary>
		/// <para><c>file.mime_type</c></para>
		/// <para>MIME type should identify the format of the file or stream of bytes using https://www.iana.org/assignments/media-types/media-types.xhtml[IANA official types], where possible. When more than one type is applicable, the most specific type should be used.</para>
		/// <example></example>
		///</summary>
		public static string FileMimeType = nameof(FileMimeType);
		///<summary>
		/// <para><c>file.mode</c></para>
		/// <para>Mode of the file in octal representation.</para>
		/// <example>0640</example>
		///</summary>
		public static string FileMode = nameof(FileMode);
		///<summary>
		/// <para><c>file.mtime</c></para>
		/// <para>Last time the file content was modified.</para>
		/// <example></example>
		///</summary>
		public static string FileMtime = nameof(FileMtime);
		///<summary>
		/// <para><c>file.name</c></para>
		/// <para>Name of the file including the extension, without the directory.</para>
		/// <example>example.png</example>
		///</summary>
		public static string FileName = nameof(FileName);
		///<summary>
		/// <para><c>file.owner</c></para>
		/// <para>File owner's username.</para>
		/// <example>alice</example>
		///</summary>
		public static string FileOwner = nameof(FileOwner);
		///<summary>
		/// <para><c>file.path</c></para>
		/// <para>Full path to the file, including the file name. It should include the drive letter, when appropriate.</para>
		/// <example>/home/alice/example.png</example>
		///</summary>
		public static string FilePath = nameof(FilePath);
		///<summary>
		/// <para><c>file.size</c></para>
		/// <para>File size in bytes.
		/// Only relevant when `file.type` is "file".</para>
		/// <example>16384</example>
		///</summary>
		public static string FileSize = nameof(FileSize);
		///<summary>
		/// <para><c>file.target_path</c></para>
		/// <para>Target path for symlinks.</para>
		/// <example></example>
		///</summary>
		public static string FileTargetPath = nameof(FileTargetPath);
		///<summary>
		/// <para><c>file.type</c></para>
		/// <para>File type (file, dir, or symlink).</para>
		/// <example>file</example>
		///</summary>
		public static string FileType = nameof(FileType);
		///<summary>
		/// <para><c>file.uid</c></para>
		/// <para>The user ID (UID) or security identifier (SID) of the file owner.</para>
		/// <example>1001</example>
		///</summary>
		public static string FileUid = nameof(FileUid);
		///<summary>
		/// <para><c>file.hash.md5</c></para>
		/// <para>MD5 hash.</para>
		/// <example></example>
		///</summary>
		public static string FileHashMd5 = nameof(FileHashMd5);
		///<summary>
		/// <para><c>file.hash.sha1</c></para>
		/// <para>SHA1 hash.</para>
		/// <example></example>
		///</summary>
		public static string FileHashSha1 = nameof(FileHashSha1);
		///<summary>
		/// <para><c>file.hash.sha256</c></para>
		/// <para>SHA256 hash.</para>
		/// <example></example>
		///</summary>
		public static string FileHashSha256 = nameof(FileHashSha256);
		///<summary>
		/// <para><c>file.hash.sha384</c></para>
		/// <para>SHA384 hash.</para>
		/// <example></example>
		///</summary>
		public static string FileHashSha384 = nameof(FileHashSha384);
		///<summary>
		/// <para><c>file.hash.sha512</c></para>
		/// <para>SHA512 hash.</para>
		/// <example></example>
		///</summary>
		public static string FileHashSha512 = nameof(FileHashSha512);
		///<summary>
		/// <para><c>file.hash.ssdeep</c></para>
		/// <para>SSDEEP hash.</para>
		/// <example></example>
		///</summary>
		public static string FileHashSsdeep = nameof(FileHashSsdeep);
		///<summary>
		/// <para><c>file.hash.tlsh</c></para>
		/// <para>TLSH hash.</para>
		/// <example></example>
		///</summary>
		public static string FileHashTlsh = nameof(FileHashTlsh);
		///<summary>
		/// <para><c>file.pe.architecture</c></para>
		/// <para>CPU architecture target for the file.</para>
		/// <example>x64</example>
		///</summary>
		public static string FilePeArchitecture = nameof(FilePeArchitecture);
		///<summary>
		/// <para><c>file.pe.company</c></para>
		/// <para>Internal company name of the file, provided at compile-time.</para>
		/// <example>Microsoft Corporation</example>
		///</summary>
		public static string FilePeCompany = nameof(FilePeCompany);
		///<summary>
		/// <para><c>file.pe.description</c></para>
		/// <para>Internal description of the file, provided at compile-time.</para>
		/// <example>Paint</example>
		///</summary>
		public static string FilePeDescription = nameof(FilePeDescription);
		///<summary>
		/// <para><c>file.pe.file_version</c></para>
		/// <para>Internal version of the file, provided at compile-time.</para>
		/// <example>6.3.9600.17415</example>
		///</summary>
		public static string FilePeFileVersion = nameof(FilePeFileVersion);
		///<summary>
		/// <para><c>file.pe.go_import_hash</c></para>
		/// <para>A hash of the Go language imports in a PE file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// The algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).</para>
		/// <example>10bddcb4cee42080f76c88d9ff964491</example>
		///</summary>
		public static string FilePeGoImportHash = nameof(FilePeGoImportHash);
		///<summary>
		/// <para><c>file.pe.go_imports</c></para>
		/// <para>List of imported Go language element names and types.</para>
		/// <example></example>
		///</summary>
		public static string FilePeGoImports = nameof(FilePeGoImports);
		///<summary>
		/// <para><c>file.pe.go_imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string FilePeGoImportsNamesEntropy = nameof(FilePeGoImportsNamesEntropy);
		///<summary>
		/// <para><c>file.pe.go_imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string FilePeGoImportsNamesVarEntropy = nameof(FilePeGoImportsNamesVarEntropy);
		///<summary>
		/// <para><c>file.pe.go_stripped</c></para>
		/// <para>Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.</para>
		/// <example></example>
		///</summary>
		public static string FilePeGoStripped = nameof(FilePeGoStripped);
		///<summary>
		/// <para><c>file.pe.imphash</c></para>
		/// <para>A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.</para>
		/// <example>0c6803c4e922103c4dca5963aad36ddf</example>
		///</summary>
		public static string FilePeImphash = nameof(FilePeImphash);
		///<summary>
		/// <para><c>file.pe.import_hash</c></para>
		/// <para>A hash of the imports in a PE file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is a synonym for imphash.</para>
		/// <example>d41d8cd98f00b204e9800998ecf8427e</example>
		///</summary>
		public static string FilePeImportHash = nameof(FilePeImportHash);
		///<summary>
		/// <para><c>file.pe.imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string FilePeImportsNamesEntropy = nameof(FilePeImportsNamesEntropy);
		///<summary>
		/// <para><c>file.pe.imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string FilePeImportsNamesVarEntropy = nameof(FilePeImportsNamesVarEntropy);
		///<summary>
		/// <para><c>file.pe.original_file_name</c></para>
		/// <para>Internal name of the file, provided at compile-time.</para>
		/// <example>MSPAINT.EXE</example>
		///</summary>
		public static string FilePeOriginalFileName = nameof(FilePeOriginalFileName);
		///<summary>
		/// <para><c>file.pe.pehash</c></para>
		/// <para>A hash of the PE header and data from one or more PE sections. An pehash can be used to cluster files by transforming structural information about a file into a hash value.
		/// Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.</para>
		/// <example>73ff189b63cd6be375a7ff25179a38d347651975</example>
		///</summary>
		public static string FilePePehash = nameof(FilePePehash);
		///<summary>
		/// <para><c>file.pe.product</c></para>
		/// <para>Internal product name of the file, provided at compile-time.</para>
		/// <example>MicrosoftÂ® WindowsÂ® Operating System</example>
		///</summary>
		public static string FilePeProduct = nameof(FilePeProduct);
		///<summary>
		/// <para><c>file.x509.issuer.distinguished_name</c></para>
		/// <para>Distinguished name (DN) of issuing certificate authority.</para>
		/// <example>C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2 High Assurance Server CA</example>
		///</summary>
		public static string FileX509IssuerDistinguishedName = nameof(FileX509IssuerDistinguishedName);
		///<summary>
		/// <para><c>file.x509.not_after</c></para>
		/// <para>Time at which the certificate is no longer considered valid.</para>
		/// <example>7/16/2020 3:15:39â€¯AM</example>
		///</summary>
		public static string FileX509NotAfter = nameof(FileX509NotAfter);
		///<summary>
		/// <para><c>file.x509.not_before</c></para>
		/// <para>Time at which the certificate is first considered valid.</para>
		/// <example>8/16/2019 1:40:25â€¯AM</example>
		///</summary>
		public static string FileX509NotBefore = nameof(FileX509NotBefore);
		///<summary>
		/// <para><c>file.x509.public_key_algorithm</c></para>
		/// <para>Algorithm used to generate the public key.</para>
		/// <example>RSA</example>
		///</summary>
		public static string FileX509PublicKeyAlgorithm = nameof(FileX509PublicKeyAlgorithm);
		///<summary>
		/// <para><c>file.x509.public_key_curve</c></para>
		/// <para>The curve used by the elliptic curve public key algorithm. This is algorithm specific.</para>
		/// <example>nistp521</example>
		///</summary>
		public static string FileX509PublicKeyCurve = nameof(FileX509PublicKeyCurve);
		///<summary>
		/// <para><c>file.x509.public_key_exponent</c></para>
		/// <para>Exponent used to derive the public key. This is algorithm specific.
		/// <para><br/>Stored but not available for search in Elasticsearch by default</para></para>
		/// <example>65537</example>
		///</summary>
		public static string FileX509PublicKeyExponent = nameof(FileX509PublicKeyExponent);
		///<summary>
		/// <para><c>file.x509.public_key_size</c></para>
		/// <para>The size of the public key space in bits.</para>
		/// <example>2048</example>
		///</summary>
		public static string FileX509PublicKeySize = nameof(FileX509PublicKeySize);
		///<summary>
		/// <para><c>file.x509.serial_number</c></para>
		/// <para>Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.</para>
		/// <example>55FBB9C7DEBF09809D12CCAA</example>
		///</summary>
		public static string FileX509SerialNumber = nameof(FileX509SerialNumber);
		///<summary>
		/// <para><c>file.x509.signature_algorithm</c></para>
		/// <para>Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.</para>
		/// <example>SHA256-RSA</example>
		///</summary>
		public static string FileX509SignatureAlgorithm = nameof(FileX509SignatureAlgorithm);
		///<summary>
		/// <para><c>file.x509.subject.distinguished_name</c></para>
		/// <para>Distinguished name (DN) of the certificate subject entity.</para>
		/// <example>C=US, ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net</example>
		///</summary>
		public static string FileX509SubjectDistinguishedName = nameof(FileX509SubjectDistinguishedName);
		///<summary>
		/// <para><c>file.x509.version_number</c></para>
		/// <para>Version of x509 format.</para>
		/// <example>3</example>
		///</summary>
		public static string FileX509VersionNumber = nameof(FileX509VersionNumber);
		///<summary>
		/// <para><c>file.code_signature.digest_algorithm</c></para>
		/// <para>The hashing algorithm used to sign the process.
		/// This value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.</para>
		/// <example>sha256</example>
		///</summary>
		public static string FileCodeSignatureDigestAlgorithm = nameof(FileCodeSignatureDigestAlgorithm);
		///<summary>
		/// <para><c>file.code_signature.exists</c></para>
		/// <para>Boolean to capture if a signature is present.</para>
		/// <example>true</example>
		///</summary>
		public static string FileCodeSignatureExists = nameof(FileCodeSignatureExists);
		///<summary>
		/// <para><c>file.code_signature.signing_id</c></para>
		/// <para>The identifier used to sign the process.
		/// This is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.</para>
		/// <example>com.apple.xpc.proxy</example>
		///</summary>
		public static string FileCodeSignatureSigningId = nameof(FileCodeSignatureSigningId);
		///<summary>
		/// <para><c>file.code_signature.status</c></para>
		/// <para>Additional information about the certificate status.
		/// This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.</para>
		/// <example>ERROR_UNTRUSTED_ROOT</example>
		///</summary>
		public static string FileCodeSignatureStatus = nameof(FileCodeSignatureStatus);
		///<summary>
		/// <para><c>file.code_signature.subject_name</c></para>
		/// <para>Subject name of the code signer</para>
		/// <example>Microsoft Corporation</example>
		///</summary>
		public static string FileCodeSignatureSubjectName = nameof(FileCodeSignatureSubjectName);
		///<summary>
		/// <para><c>file.code_signature.team_id</c></para>
		/// <para>The team identifier used to sign the process.
		/// This is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.</para>
		/// <example>EQHXZ8M8AV</example>
		///</summary>
		public static string FileCodeSignatureTeamId = nameof(FileCodeSignatureTeamId);
		///<summary>
		/// <para><c>file.code_signature.timestamp</c></para>
		/// <para>Date and time when the code signature was generated and signed.</para>
		/// <example>1/1/2021 12:10:30â€¯PM</example>
		///</summary>
		public static string FileCodeSignatureTimestamp = nameof(FileCodeSignatureTimestamp);
		///<summary>
		/// <para><c>file.code_signature.trusted</c></para>
		/// <para>Stores the trust status of the certificate chain.
		/// Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.</para>
		/// <example>true</example>
		///</summary>
		public static string FileCodeSignatureTrusted = nameof(FileCodeSignatureTrusted);
		///<summary>
		/// <para><c>file.code_signature.valid</c></para>
		/// <para>Boolean to capture if the digital signature is verified against the binary content.
		/// Leave unpopulated if a certificate was unchecked.</para>
		/// <example>true</example>
		///</summary>
		public static string FileCodeSignatureValid = nameof(FileCodeSignatureValid);
		///<summary>
		/// <para><c>file.elf.architecture</c></para>
		/// <para>Machine architecture of the ELF file.</para>
		/// <example>x86-64</example>
		///</summary>
		public static string FileElfArchitecture = nameof(FileElfArchitecture);
		///<summary>
		/// <para><c>file.elf.byte_order</c></para>
		/// <para>Byte sequence of ELF file.</para>
		/// <example>Little Endian</example>
		///</summary>
		public static string FileElfByteOrder = nameof(FileElfByteOrder);
		///<summary>
		/// <para><c>file.elf.cpu_type</c></para>
		/// <para>CPU type of the ELF file.</para>
		/// <example>Intel</example>
		///</summary>
		public static string FileElfCpuType = nameof(FileElfCpuType);
		///<summary>
		/// <para><c>file.elf.creation_date</c></para>
		/// <para>Extracted when possible from the file's metadata. Indicates when it was built or compiled. It can also be faked by malware creators.</para>
		/// <example></example>
		///</summary>
		public static string FileElfCreationDate = nameof(FileElfCreationDate);
		///<summary>
		/// <para><c>file.elf.go_import_hash</c></para>
		/// <para>A hash of the Go language imports in an ELF file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// The algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).</para>
		/// <example>10bddcb4cee42080f76c88d9ff964491</example>
		///</summary>
		public static string FileElfGoImportHash = nameof(FileElfGoImportHash);
		///<summary>
		/// <para><c>file.elf.go_imports</c></para>
		/// <para>List of imported Go language element names and types.</para>
		/// <example></example>
		///</summary>
		public static string FileElfGoImports = nameof(FileElfGoImports);
		///<summary>
		/// <para><c>file.elf.go_imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string FileElfGoImportsNamesEntropy = nameof(FileElfGoImportsNamesEntropy);
		///<summary>
		/// <para><c>file.elf.go_imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string FileElfGoImportsNamesVarEntropy = nameof(FileElfGoImportsNamesVarEntropy);
		///<summary>
		/// <para><c>file.elf.go_stripped</c></para>
		/// <para>Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.</para>
		/// <example></example>
		///</summary>
		public static string FileElfGoStripped = nameof(FileElfGoStripped);
		///<summary>
		/// <para><c>file.elf.header.abi_version</c></para>
		/// <para>Version of the ELF Application Binary Interface (ABI).</para>
		/// <example></example>
		///</summary>
		public static string FileElfHeaderAbiVersion = nameof(FileElfHeaderAbiVersion);
		///<summary>
		/// <para><c>file.elf.header.class</c></para>
		/// <para>Header class of the ELF file.</para>
		/// <example></example>
		///</summary>
		public static string FileElfHeaderClass = nameof(FileElfHeaderClass);
		///<summary>
		/// <para><c>file.elf.header.data</c></para>
		/// <para>Data table of the ELF header.</para>
		/// <example></example>
		///</summary>
		public static string FileElfHeaderData = nameof(FileElfHeaderData);
		///<summary>
		/// <para><c>file.elf.header.entrypoint</c></para>
		/// <para>Header entrypoint of the ELF file.</para>
		/// <example></example>
		///</summary>
		public static string FileElfHeaderEntrypoint = nameof(FileElfHeaderEntrypoint);
		///<summary>
		/// <para><c>file.elf.header.object_version</c></para>
		/// <para>"0x1" for original ELF files.</para>
		/// <example></example>
		///</summary>
		public static string FileElfHeaderObjectVersion = nameof(FileElfHeaderObjectVersion);
		///<summary>
		/// <para><c>file.elf.header.os_abi</c></para>
		/// <para>Application Binary Interface (ABI) of the Linux OS.</para>
		/// <example></example>
		///</summary>
		public static string FileElfHeaderOsAbi = nameof(FileElfHeaderOsAbi);
		///<summary>
		/// <para><c>file.elf.header.type</c></para>
		/// <para>Header type of the ELF file.</para>
		/// <example></example>
		///</summary>
		public static string FileElfHeaderType = nameof(FileElfHeaderType);
		///<summary>
		/// <para><c>file.elf.header.version</c></para>
		/// <para>Version of the ELF header.</para>
		/// <example></example>
		///</summary>
		public static string FileElfHeaderVersion = nameof(FileElfHeaderVersion);
		///<summary>
		/// <para><c>file.elf.import_hash</c></para>
		/// <para>A hash of the imports in an ELF file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is an ELF implementation of the Windows PE imphash.</para>
		/// <example>d41d8cd98f00b204e9800998ecf8427e</example>
		///</summary>
		public static string FileElfImportHash = nameof(FileElfImportHash);
		///<summary>
		/// <para><c>file.elf.imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string FileElfImportsNamesEntropy = nameof(FileElfImportsNamesEntropy);
		///<summary>
		/// <para><c>file.elf.imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string FileElfImportsNamesVarEntropy = nameof(FileElfImportsNamesVarEntropy);
		///<summary>
		/// <para><c>file.elf.telfhash</c></para>
		/// <para>telfhash symbol hash for ELF file.</para>
		/// <example></example>
		///</summary>
		public static string FileElfTelfhash = nameof(FileElfTelfhash);
		///<summary>
		/// <para><c>file.macho.go_import_hash</c></para>
		/// <para>A hash of the Go language imports in a Mach-O file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// The algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).</para>
		/// <example>10bddcb4cee42080f76c88d9ff964491</example>
		///</summary>
		public static string FileMachoGoImportHash = nameof(FileMachoGoImportHash);
		///<summary>
		/// <para><c>file.macho.go_imports</c></para>
		/// <para>List of imported Go language element names and types.</para>
		/// <example></example>
		///</summary>
		public static string FileMachoGoImports = nameof(FileMachoGoImports);
		///<summary>
		/// <para><c>file.macho.go_imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string FileMachoGoImportsNamesEntropy = nameof(FileMachoGoImportsNamesEntropy);
		///<summary>
		/// <para><c>file.macho.go_imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string FileMachoGoImportsNamesVarEntropy = nameof(FileMachoGoImportsNamesVarEntropy);
		///<summary>
		/// <para><c>file.macho.go_stripped</c></para>
		/// <para>Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.</para>
		/// <example></example>
		///</summary>
		public static string FileMachoGoStripped = nameof(FileMachoGoStripped);
		///<summary>
		/// <para><c>file.macho.import_hash</c></para>
		/// <para>A hash of the imports in a Mach-O file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is a synonym for symhash.</para>
		/// <example>d41d8cd98f00b204e9800998ecf8427e</example>
		///</summary>
		public static string FileMachoImportHash = nameof(FileMachoImportHash);
		///<summary>
		/// <para><c>file.macho.imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string FileMachoImportsNamesEntropy = nameof(FileMachoImportsNamesEntropy);
		///<summary>
		/// <para><c>file.macho.imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string FileMachoImportsNamesVarEntropy = nameof(FileMachoImportsNamesVarEntropy);
		///<summary>
		/// <para><c>file.macho.symhash</c></para>
		/// <para>A hash of the imports in a Mach-O file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is a Mach-O implementation of the Windows PE imphash</para>
		/// <example>d3ccf195b62a9279c3c19af1080497ec</example>
		///</summary>
		public static string FileMachoSymhash = nameof(FileMachoSymhash);
		///<summary>
		/// <para><c>geo.city_name</c></para>
		/// <para>City name.</para>
		/// <example>Montreal</example>
		///</summary>
		public static string GeoCityName = nameof(GeoCityName);
		///<summary>
		/// <para><c>geo.continent_code</c></para>
		/// <para>Two-letter code representing continent's name.</para>
		/// <example>NA</example>
		///</summary>
		public static string GeoContinentCode = nameof(GeoContinentCode);
		///<summary>
		/// <para><c>geo.continent_name</c></para>
		/// <para>Name of the continent.</para>
		/// <example>North America</example>
		///</summary>
		public static string GeoContinentName = nameof(GeoContinentName);
		///<summary>
		/// <para><c>geo.country_iso_code</c></para>
		/// <para>Country ISO code.</para>
		/// <example>CA</example>
		///</summary>
		public static string GeoCountryIsoCode = nameof(GeoCountryIsoCode);
		///<summary>
		/// <para><c>geo.country_name</c></para>
		/// <para>Country name.</para>
		/// <example>Canada</example>
		///</summary>
		public static string GeoCountryName = nameof(GeoCountryName);
		///<summary>
		/// <para><c>geo.location</c></para>
		/// <para>Longitude and latitude.</para>
		/// <example>{ "lon": -73.614830, "lat": 45.505918 }</example>
		///</summary>
		public static string GeoLocation = nameof(GeoLocation);
		///<summary>
		/// <para><c>geo.name</c></para>
		/// <para>User-defined description of a location, at the level of granularity they care about.
		/// Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
		/// Not typically used in automated geolocation.</para>
		/// <example>boston-dc</example>
		///</summary>
		public static string GeoName = nameof(GeoName);
		///<summary>
		/// <para><c>geo.postal_code</c></para>
		/// <para>Postal code associated with the location.
		/// Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.</para>
		/// <example>94040</example>
		///</summary>
		public static string GeoPostalCode = nameof(GeoPostalCode);
		///<summary>
		/// <para><c>geo.region_iso_code</c></para>
		/// <para>Region ISO code.</para>
		/// <example>CA-QC</example>
		///</summary>
		public static string GeoRegionIsoCode = nameof(GeoRegionIsoCode);
		///<summary>
		/// <para><c>geo.region_name</c></para>
		/// <para>Region name.</para>
		/// <example>Quebec</example>
		///</summary>
		public static string GeoRegionName = nameof(GeoRegionName);
		///<summary>
		/// <para><c>geo.timezone</c></para>
		/// <para>The time zone of the location, such as IANA time zone name.</para>
		/// <example>America/Argentina/Buenos_Aires</example>
		///</summary>
		public static string GeoTimezone = nameof(GeoTimezone);
		///<summary>
		/// <para><c>group.domain</c></para>
		/// <para>Name of the directory the group is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string GroupDomain = nameof(GroupDomain);
		///<summary>
		/// <para><c>group.id</c></para>
		/// <para>Unique identifier for the group on the system/platform.</para>
		/// <example></example>
		///</summary>
		public static string GroupId = nameof(GroupId);
		///<summary>
		/// <para><c>group.name</c></para>
		/// <para>Name of the group.</para>
		/// <example></example>
		///</summary>
		public static string GroupName = nameof(GroupName);
		///<summary>
		/// <para><c>hash.md5</c></para>
		/// <para>MD5 hash.</para>
		/// <example></example>
		///</summary>
		public static string HashMd5 = nameof(HashMd5);
		///<summary>
		/// <para><c>hash.sha1</c></para>
		/// <para>SHA1 hash.</para>
		/// <example></example>
		///</summary>
		public static string HashSha1 = nameof(HashSha1);
		///<summary>
		/// <para><c>hash.sha256</c></para>
		/// <para>SHA256 hash.</para>
		/// <example></example>
		///</summary>
		public static string HashSha256 = nameof(HashSha256);
		///<summary>
		/// <para><c>hash.sha384</c></para>
		/// <para>SHA384 hash.</para>
		/// <example></example>
		///</summary>
		public static string HashSha384 = nameof(HashSha384);
		///<summary>
		/// <para><c>hash.sha512</c></para>
		/// <para>SHA512 hash.</para>
		/// <example></example>
		///</summary>
		public static string HashSha512 = nameof(HashSha512);
		///<summary>
		/// <para><c>hash.ssdeep</c></para>
		/// <para>SSDEEP hash.</para>
		/// <example></example>
		///</summary>
		public static string HashSsdeep = nameof(HashSsdeep);
		///<summary>
		/// <para><c>hash.tlsh</c></para>
		/// <para>TLSH hash.</para>
		/// <example></example>
		///</summary>
		public static string HashTlsh = nameof(HashTlsh);
		///<summary>
		/// <para><c>host.architecture</c></para>
		/// <para>Operating system architecture.</para>
		/// <example>x86_64</example>
		///</summary>
		public static string HostArchitecture = nameof(HostArchitecture);
		///<summary>
		/// <para><c>host.boot.id</c></para>
		/// <para>Linux boot uuid taken from /proc/sys/kernel/random/boot_id. Note the boot_id value from /proc may or may not be the same in containers as on the host. Some container runtimes will bind mount a new boot_id value onto the proc file in each container.
		/// <para><br/>This field is beta and subject to change.</para></para>
		/// <example>88a1f0ed-5ae5-41ee-af6b-41921c311872</example>
		///</summary>
		public static string HostBootId = nameof(HostBootId);
		///<summary>
		/// <para><c>host.cpu.usage</c></para>
		/// <para>Percent CPU used which is normalized by the number of CPU cores and it ranges from 0 to 1.
		/// Scaling factor: 1000.
		/// For example: For a two core host, this value should be the average of the two cores, between 0 and 1.</para>
		/// <example></example>
		///</summary>
		public static string HostCpuUsage = nameof(HostCpuUsage);
		///<summary>
		/// <para><c>host.disk.read.bytes</c></para>
		/// <para>The total number of bytes (gauge) read successfully (aggregated from all disks) since the last metric collection.</para>
		/// <example></example>
		///</summary>
		public static string HostDiskReadBytes = nameof(HostDiskReadBytes);
		///<summary>
		/// <para><c>host.disk.write.bytes</c></para>
		/// <para>The total number of bytes (gauge) written successfully (aggregated from all disks) since the last metric collection.</para>
		/// <example></example>
		///</summary>
		public static string HostDiskWriteBytes = nameof(HostDiskWriteBytes);
		///<summary>
		/// <para><c>host.domain</c></para>
		/// <para>Name of the domain of which the host is a member.
		/// For example, on Windows this could be the host's Active Directory domain or NetBIOS domain name. For Linux this could be the domain of the host's LDAP provider.</para>
		/// <example>CONTOSO</example>
		///</summary>
		public static string HostDomain = nameof(HostDomain);
		///<summary>
		/// <para><c>host.hostname</c></para>
		/// <para>Hostname of the host.
		/// It normally contains what the `hostname` command returns on the host machine.</para>
		/// <example></example>
		///</summary>
		public static string HostHostname = nameof(HostHostname);
		///<summary>
		/// <para><c>host.id</c></para>
		/// <para>Unique host id.
		/// As hostname is not always unique, use values that are meaningful in your environment.
		/// Example: The current usage of `beat.name`.</para>
		/// <example></example>
		///</summary>
		public static string HostId = nameof(HostId);
		///<summary>
		/// <para><c>host.name</c></para>
		/// <para>Name of the host.
		/// It can contain what hostname returns on Unix systems, the fully qualified domain name (FQDN), or a name specified by the user. The recommended value is the lowercase FQDN of the host.</para>
		/// <example></example>
		///</summary>
		public static string HostName = nameof(HostName);
		///<summary>
		/// <para><c>host.network.egress.bytes</c></para>
		/// <para>The number of bytes (gauge) sent out on all network interfaces by the host since the last metric collection.</para>
		/// <example></example>
		///</summary>
		public static string HostNetworkEgressBytes = nameof(HostNetworkEgressBytes);
		///<summary>
		/// <para><c>host.network.egress.packets</c></para>
		/// <para>The number of packets (gauge) sent out on all network interfaces by the host since the last metric collection.</para>
		/// <example></example>
		///</summary>
		public static string HostNetworkEgressPackets = nameof(HostNetworkEgressPackets);
		///<summary>
		/// <para><c>host.network.ingress.bytes</c></para>
		/// <para>The number of bytes received (gauge) on all network interfaces by the host since the last metric collection.</para>
		/// <example></example>
		///</summary>
		public static string HostNetworkIngressBytes = nameof(HostNetworkIngressBytes);
		///<summary>
		/// <para><c>host.network.ingress.packets</c></para>
		/// <para>The number of packets (gauge) received on all network interfaces by the host since the last metric collection.</para>
		/// <example></example>
		///</summary>
		public static string HostNetworkIngressPackets = nameof(HostNetworkIngressPackets);
		///<summary>
		/// <para><c>host.pid_ns_ino</c></para>
		/// <para>This is the inode number of the namespace in the namespace file system (nsfs). Unsigned int inum in include/linux/ns_common.h.
		/// <para><br/>This field is beta and subject to change.</para></para>
		/// <example>256383</example>
		///</summary>
		public static string HostPidNsIno = nameof(HostPidNsIno);
		///<summary>
		/// <para><c>host.type</c></para>
		/// <para>Type of host.
		/// For Cloud providers this can be the machine type like `t2.medium`. If vm, this could be the container, for example, or other information meaningful in your environment.</para>
		/// <example></example>
		///</summary>
		public static string HostType = nameof(HostType);
		///<summary>
		/// <para><c>host.uptime</c></para>
		/// <para>Seconds the host has been up.</para>
		/// <example>1325</example>
		///</summary>
		public static string HostUptime = nameof(HostUptime);
		///<summary>
		/// <para><c>host.geo.city_name</c></para>
		/// <para>City name.</para>
		/// <example>Montreal</example>
		///</summary>
		public static string HostGeoCityName = nameof(HostGeoCityName);
		///<summary>
		/// <para><c>host.geo.continent_code</c></para>
		/// <para>Two-letter code representing continent's name.</para>
		/// <example>NA</example>
		///</summary>
		public static string HostGeoContinentCode = nameof(HostGeoContinentCode);
		///<summary>
		/// <para><c>host.geo.continent_name</c></para>
		/// <para>Name of the continent.</para>
		/// <example>North America</example>
		///</summary>
		public static string HostGeoContinentName = nameof(HostGeoContinentName);
		///<summary>
		/// <para><c>host.geo.country_iso_code</c></para>
		/// <para>Country ISO code.</para>
		/// <example>CA</example>
		///</summary>
		public static string HostGeoCountryIsoCode = nameof(HostGeoCountryIsoCode);
		///<summary>
		/// <para><c>host.geo.country_name</c></para>
		/// <para>Country name.</para>
		/// <example>Canada</example>
		///</summary>
		public static string HostGeoCountryName = nameof(HostGeoCountryName);
		///<summary>
		/// <para><c>host.geo.location</c></para>
		/// <para>Longitude and latitude.</para>
		/// <example>{ "lon": -73.614830, "lat": 45.505918 }</example>
		///</summary>
		public static string HostGeoLocation = nameof(HostGeoLocation);
		///<summary>
		/// <para><c>host.geo.name</c></para>
		/// <para>User-defined description of a location, at the level of granularity they care about.
		/// Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
		/// Not typically used in automated geolocation.</para>
		/// <example>boston-dc</example>
		///</summary>
		public static string HostGeoName = nameof(HostGeoName);
		///<summary>
		/// <para><c>host.geo.postal_code</c></para>
		/// <para>Postal code associated with the location.
		/// Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.</para>
		/// <example>94040</example>
		///</summary>
		public static string HostGeoPostalCode = nameof(HostGeoPostalCode);
		///<summary>
		/// <para><c>host.geo.region_iso_code</c></para>
		/// <para>Region ISO code.</para>
		/// <example>CA-QC</example>
		///</summary>
		public static string HostGeoRegionIsoCode = nameof(HostGeoRegionIsoCode);
		///<summary>
		/// <para><c>host.geo.region_name</c></para>
		/// <para>Region name.</para>
		/// <example>Quebec</example>
		///</summary>
		public static string HostGeoRegionName = nameof(HostGeoRegionName);
		///<summary>
		/// <para><c>host.geo.timezone</c></para>
		/// <para>The time zone of the location, such as IANA time zone name.</para>
		/// <example>America/Argentina/Buenos_Aires</example>
		///</summary>
		public static string HostGeoTimezone = nameof(HostGeoTimezone);
		///<summary>
		/// <para><c>host.os.family</c></para>
		/// <para>OS family (such as redhat, debian, freebsd, windows).</para>
		/// <example>debian</example>
		///</summary>
		public static string HostOsFamily = nameof(HostOsFamily);
		///<summary>
		/// <para><c>host.os.full</c></para>
		/// <para>Operating system name, including the version or code name.</para>
		/// <example>Mac OS Mojave</example>
		///</summary>
		public static string HostOsFull = nameof(HostOsFull);
		///<summary>
		/// <para><c>host.os.kernel</c></para>
		/// <para>Operating system kernel version as a raw string.</para>
		/// <example>4.4.0-112-generic</example>
		///</summary>
		public static string HostOsKernel = nameof(HostOsKernel);
		///<summary>
		/// <para><c>host.os.name</c></para>
		/// <para>Operating system name, without the version.</para>
		/// <example>Mac OS X</example>
		///</summary>
		public static string HostOsName = nameof(HostOsName);
		///<summary>
		/// <para><c>host.os.platform</c></para>
		/// <para>Operating system platform (such centos, ubuntu, windows).</para>
		/// <example>darwin</example>
		///</summary>
		public static string HostOsPlatform = nameof(HostOsPlatform);
		///<summary>
		/// <para><c>host.os.type</c></para>
		/// <para>Use the `os.type` field to categorize the operating system into one of the broad commercial families.
		/// If the OS you're dealing with is not listed as an expected value, the field should not be populated. Please let us know by opening an issue with ECS, to propose its addition.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>linux</item>
		/// <item>macos</item>
		/// <item>unix</item>
		/// <item>windows</item>
		/// <item>ios</item>
		/// <item>android</item>
		/// </list></para>
		/// <example>macos</example>
		///</summary>
		public static string HostOsType = nameof(HostOsType);
		///<summary>
		/// <para><c>host.os.version</c></para>
		/// <para>Operating system version as a raw string.</para>
		/// <example>10.14.1</example>
		///</summary>
		public static string HostOsVersion = nameof(HostOsVersion);
		///<summary>
		/// <para><c>host.risk.calculated_level</c></para>
		/// <para>A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>High</example>
		///</summary>
		public static string HostRiskCalculatedLevel = nameof(HostRiskCalculatedLevel);
		///<summary>
		/// <para><c>host.risk.calculated_score</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>880.73</example>
		///</summary>
		public static string HostRiskCalculatedScore = nameof(HostRiskCalculatedScore);
		///<summary>
		/// <para><c>host.risk.calculated_score_norm</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.</para>
		/// <example>88.73</example>
		///</summary>
		public static string HostRiskCalculatedScoreNorm = nameof(HostRiskCalculatedScoreNorm);
		///<summary>
		/// <para><c>host.risk.static_level</c></para>
		/// <para>A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>High</example>
		///</summary>
		public static string HostRiskStaticLevel = nameof(HostRiskStaticLevel);
		///<summary>
		/// <para><c>host.risk.static_score</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>830.0</example>
		///</summary>
		public static string HostRiskStaticScore = nameof(HostRiskStaticScore);
		///<summary>
		/// <para><c>host.risk.static_score_norm</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.</para>
		/// <example>83.0</example>
		///</summary>
		public static string HostRiskStaticScoreNorm = nameof(HostRiskStaticScoreNorm);
		///<summary>
		/// <para><c>http.request.body.bytes</c></para>
		/// <para>Size in bytes of the request body.</para>
		/// <example>887</example>
		///</summary>
		public static string HttpRequestBodyBytes = nameof(HttpRequestBodyBytes);
		///<summary>
		/// <para><c>http.request.body.content</c></para>
		/// <para>The full HTTP request body.</para>
		/// <example>Hello world</example>
		///</summary>
		public static string HttpRequestBodyContent = nameof(HttpRequestBodyContent);
		///<summary>
		/// <para><c>http.request.bytes</c></para>
		/// <para>Total size in bytes of the request (body and headers).</para>
		/// <example>1437</example>
		///</summary>
		public static string HttpRequestBytes = nameof(HttpRequestBytes);
		///<summary>
		/// <para><c>http.request.id</c></para>
		/// <para>A unique identifier for each HTTP request to correlate logs between clients and servers in transactions.
		/// The id may be contained in a non-standard HTTP header, such as `X-Request-ID` or `X-Correlation-ID`.</para>
		/// <example>123e4567-e89b-12d3-a456-426614174000</example>
		///</summary>
		public static string HttpRequestId = nameof(HttpRequestId);
		///<summary>
		/// <para><c>http.request.method</c></para>
		/// <para>HTTP request method.
		/// The value should retain its casing from the original event. For example, `GET`, `get`, and `GeT` are all considered valid values for this field.</para>
		/// <example>POST</example>
		///</summary>
		public static string HttpRequestMethod = nameof(HttpRequestMethod);
		///<summary>
		/// <para><c>http.request.mime_type</c></para>
		/// <para>Mime type of the body of the request.
		/// This value must only be populated based on the content of the request body, not on the `Content-Type` header. Comparing the mime type of a request with the request's Content-Type header can be helpful in detecting threats or misconfigured clients.</para>
		/// <example>image/gif</example>
		///</summary>
		public static string HttpRequestMimeType = nameof(HttpRequestMimeType);
		///<summary>
		/// <para><c>http.request.referrer</c></para>
		/// <para>Referrer for this HTTP request.</para>
		/// <example>https://blog.example.com/</example>
		///</summary>
		public static string HttpRequestReferrer = nameof(HttpRequestReferrer);
		///<summary>
		/// <para><c>http.response.body.bytes</c></para>
		/// <para>Size in bytes of the response body.</para>
		/// <example>887</example>
		///</summary>
		public static string HttpResponseBodyBytes = nameof(HttpResponseBodyBytes);
		///<summary>
		/// <para><c>http.response.body.content</c></para>
		/// <para>The full HTTP response body.</para>
		/// <example>Hello world</example>
		///</summary>
		public static string HttpResponseBodyContent = nameof(HttpResponseBodyContent);
		///<summary>
		/// <para><c>http.response.bytes</c></para>
		/// <para>Total size in bytes of the response (body and headers).</para>
		/// <example>1437</example>
		///</summary>
		public static string HttpResponseBytes = nameof(HttpResponseBytes);
		///<summary>
		/// <para><c>http.response.mime_type</c></para>
		/// <para>Mime type of the body of the response.
		/// This value must only be populated based on the content of the response body, not on the `Content-Type` header. Comparing the mime type of a response with the response's Content-Type header can be helpful in detecting misconfigured servers.</para>
		/// <example>image/gif</example>
		///</summary>
		public static string HttpResponseMimeType = nameof(HttpResponseMimeType);
		///<summary>
		/// <para><c>http.response.status_code</c></para>
		/// <para>HTTP response status code.</para>
		/// <example>404</example>
		///</summary>
		public static string HttpResponseStatusCode = nameof(HttpResponseStatusCode);
		///<summary>
		/// <para><c>http.version</c></para>
		/// <para>HTTP version.</para>
		/// <example>1.1</example>
		///</summary>
		public static string HttpVersion = nameof(HttpVersion);
		///<summary>
		/// <para><c>interface.alias</c></para>
		/// <para>Interface alias as reported by the system, typically used in firewall implementations for e.g. inside, outside, or dmz logical interface naming.</para>
		/// <example>outside</example>
		///</summary>
		public static string InterfaceAlias = nameof(InterfaceAlias);
		///<summary>
		/// <para><c>interface.id</c></para>
		/// <para>Interface ID as reported by an observer (typically SNMP interface ID).</para>
		/// <example>10</example>
		///</summary>
		public static string InterfaceId = nameof(InterfaceId);
		///<summary>
		/// <para><c>interface.name</c></para>
		/// <para>Interface name as reported by the system.</para>
		/// <example>eth0</example>
		///</summary>
		public static string InterfaceName = nameof(InterfaceName);
		///<summary>
		/// <para><c>log.file.path</c></para>
		/// <para>Full path to the log file this event came from, including the file name. It should include the drive letter, when appropriate.
		/// If the event wasn't read from a log file, do not populate this field.</para>
		/// <example>/var/log/fun-times.log</example>
		///</summary>
		public static string LogFilePath = nameof(LogFilePath);
		///<summary>
		/// <para><c>log.level</c></para>
		/// <para>Original log level of the log event.
		/// If the source of the event provides a log level or textual severity, this is the one that goes in `log.level`. If your source doesn't specify one, you may put your event transport's severity here (e.g. Syslog severity).
		/// Some examples are `warn`, `err`, `i`, `informational`.</para>
		/// <example>error</example>
		///</summary>
		public static string LogLevel = nameof(LogLevel);
		///<summary>
		/// <para><c>log.logger</c></para>
		/// <para>The name of the logger inside an application. This is usually the name of the class which initialized the logger, or can be a custom name.</para>
		/// <example>org.elasticsearch.bootstrap.Bootstrap</example>
		///</summary>
		public static string LogLogger = nameof(LogLogger);
		///<summary>
		/// <para><c>log.origin.file.line</c></para>
		/// <para>The line number of the file containing the source code which originated the log event.</para>
		/// <example>42</example>
		///</summary>
		public static string LogOriginFileLine = nameof(LogOriginFileLine);
		///<summary>
		/// <para><c>log.origin.file.name</c></para>
		/// <para>The name of the file containing the source code which originated the log event.
		/// Note that this field is not meant to capture the log file. The correct field to capture the log file is `log.file.path`.</para>
		/// <example>Bootstrap.java</example>
		///</summary>
		public static string LogOriginFileName = nameof(LogOriginFileName);
		///<summary>
		/// <para><c>log.origin.function</c></para>
		/// <para>The name of the function or method which originated the log event.</para>
		/// <example>init</example>
		///</summary>
		public static string LogOriginFunction = nameof(LogOriginFunction);
		///<summary>
		/// <para><c>macho.go_import_hash</c></para>
		/// <para>A hash of the Go language imports in a Mach-O file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// The algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).</para>
		/// <example>10bddcb4cee42080f76c88d9ff964491</example>
		///</summary>
		public static string MachoGoImportHash = nameof(MachoGoImportHash);
		///<summary>
		/// <para><c>macho.go_imports</c></para>
		/// <para>List of imported Go language element names and types.</para>
		/// <example></example>
		///</summary>
		public static string MachoGoImports = nameof(MachoGoImports);
		///<summary>
		/// <para><c>macho.go_imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string MachoGoImportsNamesEntropy = nameof(MachoGoImportsNamesEntropy);
		///<summary>
		/// <para><c>macho.go_imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string MachoGoImportsNamesVarEntropy = nameof(MachoGoImportsNamesVarEntropy);
		///<summary>
		/// <para><c>macho.go_stripped</c></para>
		/// <para>Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.</para>
		/// <example></example>
		///</summary>
		public static string MachoGoStripped = nameof(MachoGoStripped);
		///<summary>
		/// <para><c>macho.import_hash</c></para>
		/// <para>A hash of the imports in a Mach-O file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is a synonym for symhash.</para>
		/// <example>d41d8cd98f00b204e9800998ecf8427e</example>
		///</summary>
		public static string MachoImportHash = nameof(MachoImportHash);
		///<summary>
		/// <para><c>macho.imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string MachoImportsNamesEntropy = nameof(MachoImportsNamesEntropy);
		///<summary>
		/// <para><c>macho.imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string MachoImportsNamesVarEntropy = nameof(MachoImportsNamesVarEntropy);
		///<summary>
		/// <para><c>macho.symhash</c></para>
		/// <para>A hash of the imports in a Mach-O file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is a Mach-O implementation of the Windows PE imphash</para>
		/// <example>d3ccf195b62a9279c3c19af1080497ec</example>
		///</summary>
		public static string MachoSymhash = nameof(MachoSymhash);
		///<summary>
		/// <para><c>network.application</c></para>
		/// <para>When a specific application or service is identified from network connection details (source/dest IPs, ports, certificates, or wire format), this field captures the application's or service's name.
		/// For example, the original event identifies the network connection being from a specific web service in a `https` network connection, like `facebook` or `twitter`.
		/// The field value must be normalized to lowercase for querying.</para>
		/// <example>aim</example>
		///</summary>
		public static string NetworkApplication = nameof(NetworkApplication);
		///<summary>
		/// <para><c>network.bytes</c></para>
		/// <para>Total bytes transferred in both directions.
		/// If `source.bytes` and `destination.bytes` are known, `network.bytes` is their sum.</para>
		/// <example>368</example>
		///</summary>
		public static string NetworkBytes = nameof(NetworkBytes);
		///<summary>
		/// <para><c>network.community_id</c></para>
		/// <para>A hash of source and destination IPs and ports, as well as the protocol used in a communication. This is a tool-agnostic standard to identify flows.
		/// Learn more at https://github.com/corelight/community-id-spec.</para>
		/// <example>1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0=</example>
		///</summary>
		public static string NetworkCommunityId = nameof(NetworkCommunityId);
		///<summary>
		/// <para><c>network.direction</c></para>
		/// <para>Direction of the network traffic.
		/// When mapping events from a host-based monitoring context, populate this field from the host's point of view, using the values "ingress" or "egress".
		/// When mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of the network perimeter, using the values "inbound", "outbound", "internal" or "external".
		/// Note that "internal" is not crossing perimeter boundaries, and is meant to describe communication between two hosts within the perimeter. Note also that "external" is meant to describe traffic between two hosts that are external to the perimeter. This could for example be useful for ISPs or VPN service providers.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>ingress</item>
		/// <item>egress</item>
		/// <item>inbound</item>
		/// <item>outbound</item>
		/// <item>internal</item>
		/// <item>external</item>
		/// <item>unknown</item>
		/// </list></para>
		/// <example>inbound</example>
		///</summary>
		public static string NetworkDirection = nameof(NetworkDirection);
		///<summary>
		/// <para><c>network.forwarded_ip</c></para>
		/// <para>Host IP address when the source IP address is the proxy.</para>
		/// <example>192.1.1.2</example>
		///</summary>
		public static string NetworkForwardedIp = nameof(NetworkForwardedIp);
		///<summary>
		/// <para><c>network.iana_number</c></para>
		/// <para>IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Standardized list of protocols. This aligns well with NetFlow and sFlow related logs which use the IANA Protocol Number.</para>
		/// <example>6</example>
		///</summary>
		public static string NetworkIanaNumber = nameof(NetworkIanaNumber);
		///<summary>
		/// <para><c>network.name</c></para>
		/// <para>Name given by operators to sections of their network.</para>
		/// <example>Guest Wifi</example>
		///</summary>
		public static string NetworkName = nameof(NetworkName);
		///<summary>
		/// <para><c>network.packets</c></para>
		/// <para>Total packets transferred in both directions.
		/// If `source.packets` and `destination.packets` are known, `network.packets` is their sum.</para>
		/// <example>24</example>
		///</summary>
		public static string NetworkPackets = nameof(NetworkPackets);
		///<summary>
		/// <para><c>network.protocol</c></para>
		/// <para>In the OSI Model this would be the Application Layer protocol. For example, `http`, `dns`, or `ssh`.
		/// The field value must be normalized to lowercase for querying.</para>
		/// <example>http</example>
		///</summary>
		public static string NetworkProtocol = nameof(NetworkProtocol);
		///<summary>
		/// <para><c>network.transport</c></para>
		/// <para>Same as network.iana_number, but instead using the Keyword name of the transport layer (udp, tcp, ipv6-icmp, etc.)
		/// The field value must be normalized to lowercase for querying.</para>
		/// <example>tcp</example>
		///</summary>
		public static string NetworkTransport = nameof(NetworkTransport);
		///<summary>
		/// <para><c>network.type</c></para>
		/// <para>In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc
		/// The field value must be normalized to lowercase for querying.</para>
		/// <example>ipv4</example>
		///</summary>
		public static string NetworkType = nameof(NetworkType);
		///<summary>
		/// <para><c>network.vlan.id</c></para>
		/// <para>VLAN ID as reported by the observer.</para>
		/// <example>10</example>
		///</summary>
		public static string NetworkVlanId = nameof(NetworkVlanId);
		///<summary>
		/// <para><c>network.vlan.name</c></para>
		/// <para>Optional VLAN name as reported by the observer.</para>
		/// <example>outside</example>
		///</summary>
		public static string NetworkVlanName = nameof(NetworkVlanName);
		///<summary>
		/// <para><c>observer.hostname</c></para>
		/// <para>Hostname of the observer.</para>
		/// <example></example>
		///</summary>
		public static string ObserverHostname = nameof(ObserverHostname);
		///<summary>
		/// <para><c>observer.name</c></para>
		/// <para>Custom name of the observer.
		/// This is a name that can be given to an observer. This can be helpful for example if multiple firewalls of the same model are used in an organization.
		/// If no custom name is needed, the field can be left empty.</para>
		/// <example>1_proxySG</example>
		///</summary>
		public static string ObserverName = nameof(ObserverName);
		///<summary>
		/// <para><c>observer.product</c></para>
		/// <para>The product name of the observer.</para>
		/// <example>s200</example>
		///</summary>
		public static string ObserverProduct = nameof(ObserverProduct);
		///<summary>
		/// <para><c>observer.serial_number</c></para>
		/// <para>Observer serial number.</para>
		/// <example></example>
		///</summary>
		public static string ObserverSerialNumber = nameof(ObserverSerialNumber);
		///<summary>
		/// <para><c>observer.type</c></para>
		/// <para>The type of the observer the data is coming from.
		/// There is no predefined list of observer types. Some examples are `forwarder`, `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.</para>
		/// <example>firewall</example>
		///</summary>
		public static string ObserverType = nameof(ObserverType);
		///<summary>
		/// <para><c>observer.vendor</c></para>
		/// <para>Vendor name of the observer.</para>
		/// <example>Symantec</example>
		///</summary>
		public static string ObserverVendor = nameof(ObserverVendor);
		///<summary>
		/// <para><c>observer.version</c></para>
		/// <para>Observer version.</para>
		/// <example></example>
		///</summary>
		public static string ObserverVersion = nameof(ObserverVersion);
		///<summary>
		/// <para><c>observer.geo.city_name</c></para>
		/// <para>City name.</para>
		/// <example>Montreal</example>
		///</summary>
		public static string ObserverGeoCityName = nameof(ObserverGeoCityName);
		///<summary>
		/// <para><c>observer.geo.continent_code</c></para>
		/// <para>Two-letter code representing continent's name.</para>
		/// <example>NA</example>
		///</summary>
		public static string ObserverGeoContinentCode = nameof(ObserverGeoContinentCode);
		///<summary>
		/// <para><c>observer.geo.continent_name</c></para>
		/// <para>Name of the continent.</para>
		/// <example>North America</example>
		///</summary>
		public static string ObserverGeoContinentName = nameof(ObserverGeoContinentName);
		///<summary>
		/// <para><c>observer.geo.country_iso_code</c></para>
		/// <para>Country ISO code.</para>
		/// <example>CA</example>
		///</summary>
		public static string ObserverGeoCountryIsoCode = nameof(ObserverGeoCountryIsoCode);
		///<summary>
		/// <para><c>observer.geo.country_name</c></para>
		/// <para>Country name.</para>
		/// <example>Canada</example>
		///</summary>
		public static string ObserverGeoCountryName = nameof(ObserverGeoCountryName);
		///<summary>
		/// <para><c>observer.geo.location</c></para>
		/// <para>Longitude and latitude.</para>
		/// <example>{ "lon": -73.614830, "lat": 45.505918 }</example>
		///</summary>
		public static string ObserverGeoLocation = nameof(ObserverGeoLocation);
		///<summary>
		/// <para><c>observer.geo.name</c></para>
		/// <para>User-defined description of a location, at the level of granularity they care about.
		/// Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
		/// Not typically used in automated geolocation.</para>
		/// <example>boston-dc</example>
		///</summary>
		public static string ObserverGeoName = nameof(ObserverGeoName);
		///<summary>
		/// <para><c>observer.geo.postal_code</c></para>
		/// <para>Postal code associated with the location.
		/// Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.</para>
		/// <example>94040</example>
		///</summary>
		public static string ObserverGeoPostalCode = nameof(ObserverGeoPostalCode);
		///<summary>
		/// <para><c>observer.geo.region_iso_code</c></para>
		/// <para>Region ISO code.</para>
		/// <example>CA-QC</example>
		///</summary>
		public static string ObserverGeoRegionIsoCode = nameof(ObserverGeoRegionIsoCode);
		///<summary>
		/// <para><c>observer.geo.region_name</c></para>
		/// <para>Region name.</para>
		/// <example>Quebec</example>
		///</summary>
		public static string ObserverGeoRegionName = nameof(ObserverGeoRegionName);
		///<summary>
		/// <para><c>observer.geo.timezone</c></para>
		/// <para>The time zone of the location, such as IANA time zone name.</para>
		/// <example>America/Argentina/Buenos_Aires</example>
		///</summary>
		public static string ObserverGeoTimezone = nameof(ObserverGeoTimezone);
		///<summary>
		/// <para><c>observer.os.family</c></para>
		/// <para>OS family (such as redhat, debian, freebsd, windows).</para>
		/// <example>debian</example>
		///</summary>
		public static string ObserverOsFamily = nameof(ObserverOsFamily);
		///<summary>
		/// <para><c>observer.os.full</c></para>
		/// <para>Operating system name, including the version or code name.</para>
		/// <example>Mac OS Mojave</example>
		///</summary>
		public static string ObserverOsFull = nameof(ObserverOsFull);
		///<summary>
		/// <para><c>observer.os.kernel</c></para>
		/// <para>Operating system kernel version as a raw string.</para>
		/// <example>4.4.0-112-generic</example>
		///</summary>
		public static string ObserverOsKernel = nameof(ObserverOsKernel);
		///<summary>
		/// <para><c>observer.os.name</c></para>
		/// <para>Operating system name, without the version.</para>
		/// <example>Mac OS X</example>
		///</summary>
		public static string ObserverOsName = nameof(ObserverOsName);
		///<summary>
		/// <para><c>observer.os.platform</c></para>
		/// <para>Operating system platform (such centos, ubuntu, windows).</para>
		/// <example>darwin</example>
		///</summary>
		public static string ObserverOsPlatform = nameof(ObserverOsPlatform);
		///<summary>
		/// <para><c>observer.os.type</c></para>
		/// <para>Use the `os.type` field to categorize the operating system into one of the broad commercial families.
		/// If the OS you're dealing with is not listed as an expected value, the field should not be populated. Please let us know by opening an issue with ECS, to propose its addition.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>linux</item>
		/// <item>macos</item>
		/// <item>unix</item>
		/// <item>windows</item>
		/// <item>ios</item>
		/// <item>android</item>
		/// </list></para>
		/// <example>macos</example>
		///</summary>
		public static string ObserverOsType = nameof(ObserverOsType);
		///<summary>
		/// <para><c>observer.os.version</c></para>
		/// <para>Operating system version as a raw string.</para>
		/// <example>10.14.1</example>
		///</summary>
		public static string ObserverOsVersion = nameof(ObserverOsVersion);
		///<summary>
		/// <para><c>orchestrator.api_version</c></para>
		/// <para>API version being used to carry out the action</para>
		/// <example>v1beta1</example>
		///</summary>
		public static string OrchestratorApiVersion = nameof(OrchestratorApiVersion);
		///<summary>
		/// <para><c>orchestrator.cluster.id</c></para>
		/// <para>Unique ID of the cluster.</para>
		/// <example></example>
		///</summary>
		public static string OrchestratorClusterId = nameof(OrchestratorClusterId);
		///<summary>
		/// <para><c>orchestrator.cluster.name</c></para>
		/// <para>Name of the cluster.</para>
		/// <example></example>
		///</summary>
		public static string OrchestratorClusterName = nameof(OrchestratorClusterName);
		///<summary>
		/// <para><c>orchestrator.cluster.url</c></para>
		/// <para>URL of the API used to manage the cluster.</para>
		/// <example></example>
		///</summary>
		public static string OrchestratorClusterUrl = nameof(OrchestratorClusterUrl);
		///<summary>
		/// <para><c>orchestrator.cluster.version</c></para>
		/// <para>The version of the cluster.</para>
		/// <example></example>
		///</summary>
		public static string OrchestratorClusterVersion = nameof(OrchestratorClusterVersion);
		///<summary>
		/// <para><c>orchestrator.namespace</c></para>
		/// <para>Namespace in which the action is taking place.</para>
		/// <example>kube-system</example>
		///</summary>
		public static string OrchestratorNamespace = nameof(OrchestratorNamespace);
		///<summary>
		/// <para><c>orchestrator.organization</c></para>
		/// <para>Organization affected by the event (for multi-tenant orchestrator setups).</para>
		/// <example>elastic</example>
		///</summary>
		public static string OrchestratorOrganization = nameof(OrchestratorOrganization);
		///<summary>
		/// <para><c>orchestrator.resource.id</c></para>
		/// <para>Unique ID of the resource being acted upon.</para>
		/// <example></example>
		///</summary>
		public static string OrchestratorResourceId = nameof(OrchestratorResourceId);
		///<summary>
		/// <para><c>orchestrator.resource.name</c></para>
		/// <para>Name of the resource being acted upon.</para>
		/// <example>test-pod-cdcws</example>
		///</summary>
		public static string OrchestratorResourceName = nameof(OrchestratorResourceName);
		///<summary>
		/// <para><c>orchestrator.resource.parent.type</c></para>
		/// <para>Type or kind of the parent resource associated with the event being observed. In Kubernetes, this will be the name of a built-in workload resource (e.g., Deployment, StatefulSet, DaemonSet).</para>
		/// <example>DaemonSet</example>
		///</summary>
		public static string OrchestratorResourceParentType = nameof(OrchestratorResourceParentType);
		///<summary>
		/// <para><c>orchestrator.resource.type</c></para>
		/// <para>Type of resource being acted upon.</para>
		/// <example>service</example>
		///</summary>
		public static string OrchestratorResourceType = nameof(OrchestratorResourceType);
		///<summary>
		/// <para><c>orchestrator.type</c></para>
		/// <para>Orchestrator cluster type (e.g. kubernetes, nomad or cloudfoundry).</para>
		/// <example>kubernetes</example>
		///</summary>
		public static string OrchestratorType = nameof(OrchestratorType);
		///<summary>
		/// <para><c>organization.id</c></para>
		/// <para>Unique identifier for the organization.</para>
		/// <example></example>
		///</summary>
		public static string OrganizationId = nameof(OrganizationId);
		///<summary>
		/// <para><c>organization.name</c></para>
		/// <para>Organization name.</para>
		/// <example></example>
		///</summary>
		public static string OrganizationName = nameof(OrganizationName);
		///<summary>
		/// <para><c>os.family</c></para>
		/// <para>OS family (such as redhat, debian, freebsd, windows).</para>
		/// <example>debian</example>
		///</summary>
		public static string OsFamily = nameof(OsFamily);
		///<summary>
		/// <para><c>os.full</c></para>
		/// <para>Operating system name, including the version or code name.</para>
		/// <example>Mac OS Mojave</example>
		///</summary>
		public static string OsFull = nameof(OsFull);
		///<summary>
		/// <para><c>os.kernel</c></para>
		/// <para>Operating system kernel version as a raw string.</para>
		/// <example>4.4.0-112-generic</example>
		///</summary>
		public static string OsKernel = nameof(OsKernel);
		///<summary>
		/// <para><c>os.name</c></para>
		/// <para>Operating system name, without the version.</para>
		/// <example>Mac OS X</example>
		///</summary>
		public static string OsName = nameof(OsName);
		///<summary>
		/// <para><c>os.platform</c></para>
		/// <para>Operating system platform (such centos, ubuntu, windows).</para>
		/// <example>darwin</example>
		///</summary>
		public static string OsPlatform = nameof(OsPlatform);
		///<summary>
		/// <para><c>os.type</c></para>
		/// <para>Use the `os.type` field to categorize the operating system into one of the broad commercial families.
		/// If the OS you're dealing with is not listed as an expected value, the field should not be populated. Please let us know by opening an issue with ECS, to propose its addition.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>linux</item>
		/// <item>macos</item>
		/// <item>unix</item>
		/// <item>windows</item>
		/// <item>ios</item>
		/// <item>android</item>
		/// </list></para>
		/// <example>macos</example>
		///</summary>
		public static string OsType = nameof(OsType);
		///<summary>
		/// <para><c>os.version</c></para>
		/// <para>Operating system version as a raw string.</para>
		/// <example>10.14.1</example>
		///</summary>
		public static string OsVersion = nameof(OsVersion);
		///<summary>
		/// <para><c>package.architecture</c></para>
		/// <para>Package architecture.</para>
		/// <example>x86_64</example>
		///</summary>
		public static string PackageArchitecture = nameof(PackageArchitecture);
		///<summary>
		/// <para><c>package.build_version</c></para>
		/// <para>Additional information about the build version of the installed package.
		/// For example use the commit SHA of a non-released package.</para>
		/// <example>36f4f7e89dd61b0988b12ee000b98966867710cd</example>
		///</summary>
		public static string PackageBuildVersion = nameof(PackageBuildVersion);
		///<summary>
		/// <para><c>package.checksum</c></para>
		/// <para>Checksum of the installed package for verification.</para>
		/// <example>68b329da9893e34099c7d8ad5cb9c940</example>
		///</summary>
		public static string PackageChecksum = nameof(PackageChecksum);
		///<summary>
		/// <para><c>package.description</c></para>
		/// <para>Description of the package.</para>
		/// <example>Open source programming language to build simple/reliable/efficient software.</example>
		///</summary>
		public static string PackageDescription = nameof(PackageDescription);
		///<summary>
		/// <para><c>package.install_scope</c></para>
		/// <para>Indicating how the package was installed, e.g. user-local, global.</para>
		/// <example>global</example>
		///</summary>
		public static string PackageInstallScope = nameof(PackageInstallScope);
		///<summary>
		/// <para><c>package.installed</c></para>
		/// <para>Time when package was installed.</para>
		/// <example></example>
		///</summary>
		public static string PackageInstalled = nameof(PackageInstalled);
		///<summary>
		/// <para><c>package.license</c></para>
		/// <para>License under which the package was released.
		/// Use a short name, e.g. the license identifier from SPDX License List where possible (https://spdx.org/licenses/).</para>
		/// <example>Apache License 2.0</example>
		///</summary>
		public static string PackageLicense = nameof(PackageLicense);
		///<summary>
		/// <para><c>package.name</c></para>
		/// <para>Package name</para>
		/// <example>go</example>
		///</summary>
		public static string PackageName = nameof(PackageName);
		///<summary>
		/// <para><c>package.path</c></para>
		/// <para>Path where the package is installed.</para>
		/// <example>/usr/local/Cellar/go/1.12.9/</example>
		///</summary>
		public static string PackagePath = nameof(PackagePath);
		///<summary>
		/// <para><c>package.reference</c></para>
		/// <para>Home page or reference URL of the software in this package, if available.</para>
		/// <example>https://golang.org</example>
		///</summary>
		public static string PackageReference = nameof(PackageReference);
		///<summary>
		/// <para><c>package.size</c></para>
		/// <para>Package size in bytes.</para>
		/// <example>62231</example>
		///</summary>
		public static string PackageSize = nameof(PackageSize);
		///<summary>
		/// <para><c>package.type</c></para>
		/// <para>Type of package.
		/// This should contain the package file type, rather than the package manager name. Examples: rpm, dpkg, brew, npm, gem, nupkg, jar.</para>
		/// <example>rpm</example>
		///</summary>
		public static string PackageType = nameof(PackageType);
		///<summary>
		/// <para><c>package.version</c></para>
		/// <para>Package version</para>
		/// <example>1.12.9</example>
		///</summary>
		public static string PackageVersion = nameof(PackageVersion);
		///<summary>
		/// <para><c>pe.architecture</c></para>
		/// <para>CPU architecture target for the file.</para>
		/// <example>x64</example>
		///</summary>
		public static string PeArchitecture = nameof(PeArchitecture);
		///<summary>
		/// <para><c>pe.company</c></para>
		/// <para>Internal company name of the file, provided at compile-time.</para>
		/// <example>Microsoft Corporation</example>
		///</summary>
		public static string PeCompany = nameof(PeCompany);
		///<summary>
		/// <para><c>pe.description</c></para>
		/// <para>Internal description of the file, provided at compile-time.</para>
		/// <example>Paint</example>
		///</summary>
		public static string PeDescription = nameof(PeDescription);
		///<summary>
		/// <para><c>pe.file_version</c></para>
		/// <para>Internal version of the file, provided at compile-time.</para>
		/// <example>6.3.9600.17415</example>
		///</summary>
		public static string PeFileVersion = nameof(PeFileVersion);
		///<summary>
		/// <para><c>pe.go_import_hash</c></para>
		/// <para>A hash of the Go language imports in a PE file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// The algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).</para>
		/// <example>10bddcb4cee42080f76c88d9ff964491</example>
		///</summary>
		public static string PeGoImportHash = nameof(PeGoImportHash);
		///<summary>
		/// <para><c>pe.go_imports</c></para>
		/// <para>List of imported Go language element names and types.</para>
		/// <example></example>
		///</summary>
		public static string PeGoImports = nameof(PeGoImports);
		///<summary>
		/// <para><c>pe.go_imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string PeGoImportsNamesEntropy = nameof(PeGoImportsNamesEntropy);
		///<summary>
		/// <para><c>pe.go_imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string PeGoImportsNamesVarEntropy = nameof(PeGoImportsNamesVarEntropy);
		///<summary>
		/// <para><c>pe.go_stripped</c></para>
		/// <para>Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.</para>
		/// <example></example>
		///</summary>
		public static string PeGoStripped = nameof(PeGoStripped);
		///<summary>
		/// <para><c>pe.imphash</c></para>
		/// <para>A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.</para>
		/// <example>0c6803c4e922103c4dca5963aad36ddf</example>
		///</summary>
		public static string PeImphash = nameof(PeImphash);
		///<summary>
		/// <para><c>pe.import_hash</c></para>
		/// <para>A hash of the imports in a PE file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is a synonym for imphash.</para>
		/// <example>d41d8cd98f00b204e9800998ecf8427e</example>
		///</summary>
		public static string PeImportHash = nameof(PeImportHash);
		///<summary>
		/// <para><c>pe.imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string PeImportsNamesEntropy = nameof(PeImportsNamesEntropy);
		///<summary>
		/// <para><c>pe.imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string PeImportsNamesVarEntropy = nameof(PeImportsNamesVarEntropy);
		///<summary>
		/// <para><c>pe.original_file_name</c></para>
		/// <para>Internal name of the file, provided at compile-time.</para>
		/// <example>MSPAINT.EXE</example>
		///</summary>
		public static string PeOriginalFileName = nameof(PeOriginalFileName);
		///<summary>
		/// <para><c>pe.pehash</c></para>
		/// <para>A hash of the PE header and data from one or more PE sections. An pehash can be used to cluster files by transforming structural information about a file into a hash value.
		/// Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.</para>
		/// <example>73ff189b63cd6be375a7ff25179a38d347651975</example>
		///</summary>
		public static string PePehash = nameof(PePehash);
		///<summary>
		/// <para><c>pe.product</c></para>
		/// <para>Internal product name of the file, provided at compile-time.</para>
		/// <example>MicrosoftÂ® WindowsÂ® Operating System</example>
		///</summary>
		public static string PeProduct = nameof(PeProduct);
		///<summary>
		/// <para><c>process.args_count</c></para>
		/// <para>Length of the process.args array.
		/// This field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.</para>
		/// <example>4</example>
		///</summary>
		public static string ProcessArgsCount = nameof(ProcessArgsCount);
		///<summary>
		/// <para><c>process.command_line</c></para>
		/// <para>Full command line that started the process, including the absolute path to the executable, and all arguments.
		/// Some arguments may be filtered to protect sensitive information.</para>
		/// <example>/usr/bin/ssh -l user 10.0.0.16</example>
		///</summary>
		public static string ProcessCommandLine = nameof(ProcessCommandLine);
		///<summary>
		/// <para><c>process.end</c></para>
		/// <para>The time the process ended.</para>
		/// <example>5/23/2016 8:05:34â€¯AM</example>
		///</summary>
		public static string ProcessEnd = nameof(ProcessEnd);
		///<summary>
		/// <para><c>process.entity_id</c></para>
		/// <para>Unique identifier for the process.
		/// The implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.
		/// Constructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.</para>
		/// <example>c2c455d9f99375d</example>
		///</summary>
		public static string ProcessEntityId = nameof(ProcessEntityId);
		///<summary>
		/// <para><c>process.executable</c></para>
		/// <para>Absolute path to the process executable.</para>
		/// <example>/usr/bin/ssh</example>
		///</summary>
		public static string ProcessExecutable = nameof(ProcessExecutable);
		///<summary>
		/// <para><c>process.exit_code</c></para>
		/// <para>The exit code of the process, if this is a termination event.
		/// The field should be absent if there is no exit code for the event (e.g. process start).</para>
		/// <example>137</example>
		///</summary>
		public static string ProcessExitCode = nameof(ProcessExitCode);
		///<summary>
		/// <para><c>process.interactive</c></para>
		/// <para>Whether the process is connected to an interactive shell.
		/// Process interactivity is inferred from the processes file descriptors. If the character device for the controlling tty is the same as stdin and stderr for the process, the process is considered interactive.
		/// Note: A non-interactive process can belong to an interactive session and is simply one that does not have open file descriptors reading the controlling TTY on FD 0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A backgrounded process is still considered interactive if stdin and stderr are connected to the controlling TTY.</para>
		/// <example>true</example>
		///</summary>
		public static string ProcessInteractive = nameof(ProcessInteractive);
		///<summary>
		/// <para><c>process.name</c></para>
		/// <para>Process name.
		/// Sometimes called program name or similar.</para>
		/// <example>ssh</example>
		///</summary>
		public static string ProcessName = nameof(ProcessName);
		///<summary>
		/// <para><c>process.pgid</c></para>
		/// <para>Deprecated for removal in next major version release. This field is superseded by `process.group_leader.pid`.
		/// Identifier of the group of processes the process belongs to.</para>
		/// <example></example>
		///</summary>
		public static string ProcessPgid = nameof(ProcessPgid);
		///<summary>
		/// <para><c>process.pid</c></para>
		/// <para>Process id.</para>
		/// <example>4242</example>
		///</summary>
		public static string ProcessPid = nameof(ProcessPid);
		///<summary>
		/// <para><c>process.start</c></para>
		/// <para>The time the process started.</para>
		/// <example>5/23/2016 8:05:34â€¯AM</example>
		///</summary>
		public static string ProcessStart = nameof(ProcessStart);
		///<summary>
		/// <para><c>process.thread.id</c></para>
		/// <para>Thread ID.</para>
		/// <example>4242</example>
		///</summary>
		public static string ProcessThreadId = nameof(ProcessThreadId);
		///<summary>
		/// <para><c>process.thread.name</c></para>
		/// <para>Thread name.</para>
		/// <example>thread-0</example>
		///</summary>
		public static string ProcessThreadName = nameof(ProcessThreadName);
		///<summary>
		/// <para><c>process.title</c></para>
		/// <para>Process title.
		/// The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.</para>
		/// <example></example>
		///</summary>
		public static string ProcessTitle = nameof(ProcessTitle);
		///<summary>
		/// <para><c>process.uptime</c></para>
		/// <para>Seconds the process has been up.</para>
		/// <example>1325</example>
		///</summary>
		public static string ProcessUptime = nameof(ProcessUptime);
		///<summary>
		/// <para><c>process.vpid</c></para>
		/// <para>Virtual process id.
		/// The process id within a pid namespace. This is not necessarily unique across all processes on the host but it is unique within the process namespace that the process exists within.</para>
		/// <example>4242</example>
		///</summary>
		public static string ProcessVpid = nameof(ProcessVpid);
		///<summary>
		/// <para><c>process.working_directory</c></para>
		/// <para>The working directory of the process.</para>
		/// <example>/home/alice</example>
		///</summary>
		public static string ProcessWorkingDirectory = nameof(ProcessWorkingDirectory);
		///<summary>
		/// <para><c>process.group.domain</c></para>
		/// <para>Name of the directory the group is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string ProcessGroupDomain = nameof(ProcessGroupDomain);
		///<summary>
		/// <para><c>process.group.id</c></para>
		/// <para>Unique identifier for the group on the system/platform.</para>
		/// <example></example>
		///</summary>
		public static string ProcessGroupId = nameof(ProcessGroupId);
		///<summary>
		/// <para><c>process.group.name</c></para>
		/// <para>Name of the group.</para>
		/// <example></example>
		///</summary>
		public static string ProcessGroupName = nameof(ProcessGroupName);
		///<summary>
		/// <para><c>process.real_group.domain</c></para>
		/// <para>Name of the directory the group is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string ProcessRealGroupDomain = nameof(ProcessRealGroupDomain);
		///<summary>
		/// <para><c>process.real_group.id</c></para>
		/// <para>Unique identifier for the group on the system/platform.</para>
		/// <example></example>
		///</summary>
		public static string ProcessRealGroupId = nameof(ProcessRealGroupId);
		///<summary>
		/// <para><c>process.real_group.name</c></para>
		/// <para>Name of the group.</para>
		/// <example></example>
		///</summary>
		public static string ProcessRealGroupName = nameof(ProcessRealGroupName);
		///<summary>
		/// <para><c>process.saved_group.domain</c></para>
		/// <para>Name of the directory the group is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string ProcessSavedGroupDomain = nameof(ProcessSavedGroupDomain);
		///<summary>
		/// <para><c>process.saved_group.id</c></para>
		/// <para>Unique identifier for the group on the system/platform.</para>
		/// <example></example>
		///</summary>
		public static string ProcessSavedGroupId = nameof(ProcessSavedGroupId);
		///<summary>
		/// <para><c>process.saved_group.name</c></para>
		/// <para>Name of the group.</para>
		/// <example></example>
		///</summary>
		public static string ProcessSavedGroupName = nameof(ProcessSavedGroupName);
		///<summary>
		/// <para><c>process.hash.md5</c></para>
		/// <para>MD5 hash.</para>
		/// <example></example>
		///</summary>
		public static string ProcessHashMd5 = nameof(ProcessHashMd5);
		///<summary>
		/// <para><c>process.hash.sha1</c></para>
		/// <para>SHA1 hash.</para>
		/// <example></example>
		///</summary>
		public static string ProcessHashSha1 = nameof(ProcessHashSha1);
		///<summary>
		/// <para><c>process.hash.sha256</c></para>
		/// <para>SHA256 hash.</para>
		/// <example></example>
		///</summary>
		public static string ProcessHashSha256 = nameof(ProcessHashSha256);
		///<summary>
		/// <para><c>process.hash.sha384</c></para>
		/// <para>SHA384 hash.</para>
		/// <example></example>
		///</summary>
		public static string ProcessHashSha384 = nameof(ProcessHashSha384);
		///<summary>
		/// <para><c>process.hash.sha512</c></para>
		/// <para>SHA512 hash.</para>
		/// <example></example>
		///</summary>
		public static string ProcessHashSha512 = nameof(ProcessHashSha512);
		///<summary>
		/// <para><c>process.hash.ssdeep</c></para>
		/// <para>SSDEEP hash.</para>
		/// <example></example>
		///</summary>
		public static string ProcessHashSsdeep = nameof(ProcessHashSsdeep);
		///<summary>
		/// <para><c>process.hash.tlsh</c></para>
		/// <para>TLSH hash.</para>
		/// <example></example>
		///</summary>
		public static string ProcessHashTlsh = nameof(ProcessHashTlsh);
		///<summary>
		/// <para><c>process.pe.architecture</c></para>
		/// <para>CPU architecture target for the file.</para>
		/// <example>x64</example>
		///</summary>
		public static string ProcessPeArchitecture = nameof(ProcessPeArchitecture);
		///<summary>
		/// <para><c>process.pe.company</c></para>
		/// <para>Internal company name of the file, provided at compile-time.</para>
		/// <example>Microsoft Corporation</example>
		///</summary>
		public static string ProcessPeCompany = nameof(ProcessPeCompany);
		///<summary>
		/// <para><c>process.pe.description</c></para>
		/// <para>Internal description of the file, provided at compile-time.</para>
		/// <example>Paint</example>
		///</summary>
		public static string ProcessPeDescription = nameof(ProcessPeDescription);
		///<summary>
		/// <para><c>process.pe.file_version</c></para>
		/// <para>Internal version of the file, provided at compile-time.</para>
		/// <example>6.3.9600.17415</example>
		///</summary>
		public static string ProcessPeFileVersion = nameof(ProcessPeFileVersion);
		///<summary>
		/// <para><c>process.pe.go_import_hash</c></para>
		/// <para>A hash of the Go language imports in a PE file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// The algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).</para>
		/// <example>10bddcb4cee42080f76c88d9ff964491</example>
		///</summary>
		public static string ProcessPeGoImportHash = nameof(ProcessPeGoImportHash);
		///<summary>
		/// <para><c>process.pe.go_imports</c></para>
		/// <para>List of imported Go language element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ProcessPeGoImports = nameof(ProcessPeGoImports);
		///<summary>
		/// <para><c>process.pe.go_imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string ProcessPeGoImportsNamesEntropy = nameof(ProcessPeGoImportsNamesEntropy);
		///<summary>
		/// <para><c>process.pe.go_imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string ProcessPeGoImportsNamesVarEntropy = nameof(ProcessPeGoImportsNamesVarEntropy);
		///<summary>
		/// <para><c>process.pe.go_stripped</c></para>
		/// <para>Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.</para>
		/// <example></example>
		///</summary>
		public static string ProcessPeGoStripped = nameof(ProcessPeGoStripped);
		///<summary>
		/// <para><c>process.pe.imphash</c></para>
		/// <para>A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.</para>
		/// <example>0c6803c4e922103c4dca5963aad36ddf</example>
		///</summary>
		public static string ProcessPeImphash = nameof(ProcessPeImphash);
		///<summary>
		/// <para><c>process.pe.import_hash</c></para>
		/// <para>A hash of the imports in a PE file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is a synonym for imphash.</para>
		/// <example>d41d8cd98f00b204e9800998ecf8427e</example>
		///</summary>
		public static string ProcessPeImportHash = nameof(ProcessPeImportHash);
		///<summary>
		/// <para><c>process.pe.imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ProcessPeImportsNamesEntropy = nameof(ProcessPeImportsNamesEntropy);
		///<summary>
		/// <para><c>process.pe.imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ProcessPeImportsNamesVarEntropy = nameof(ProcessPeImportsNamesVarEntropy);
		///<summary>
		/// <para><c>process.pe.original_file_name</c></para>
		/// <para>Internal name of the file, provided at compile-time.</para>
		/// <example>MSPAINT.EXE</example>
		///</summary>
		public static string ProcessPeOriginalFileName = nameof(ProcessPeOriginalFileName);
		///<summary>
		/// <para><c>process.pe.pehash</c></para>
		/// <para>A hash of the PE header and data from one or more PE sections. An pehash can be used to cluster files by transforming structural information about a file into a hash value.
		/// Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.</para>
		/// <example>73ff189b63cd6be375a7ff25179a38d347651975</example>
		///</summary>
		public static string ProcessPePehash = nameof(ProcessPePehash);
		///<summary>
		/// <para><c>process.pe.product</c></para>
		/// <para>Internal product name of the file, provided at compile-time.</para>
		/// <example>MicrosoftÂ® WindowsÂ® Operating System</example>
		///</summary>
		public static string ProcessPeProduct = nameof(ProcessPeProduct);
		///<summary>
		/// <para><c>process.code_signature.digest_algorithm</c></para>
		/// <para>The hashing algorithm used to sign the process.
		/// This value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.</para>
		/// <example>sha256</example>
		///</summary>
		public static string ProcessCodeSignatureDigestAlgorithm = nameof(ProcessCodeSignatureDigestAlgorithm);
		///<summary>
		/// <para><c>process.code_signature.exists</c></para>
		/// <para>Boolean to capture if a signature is present.</para>
		/// <example>true</example>
		///</summary>
		public static string ProcessCodeSignatureExists = nameof(ProcessCodeSignatureExists);
		///<summary>
		/// <para><c>process.code_signature.signing_id</c></para>
		/// <para>The identifier used to sign the process.
		/// This is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.</para>
		/// <example>com.apple.xpc.proxy</example>
		///</summary>
		public static string ProcessCodeSignatureSigningId = nameof(ProcessCodeSignatureSigningId);
		///<summary>
		/// <para><c>process.code_signature.status</c></para>
		/// <para>Additional information about the certificate status.
		/// This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.</para>
		/// <example>ERROR_UNTRUSTED_ROOT</example>
		///</summary>
		public static string ProcessCodeSignatureStatus = nameof(ProcessCodeSignatureStatus);
		///<summary>
		/// <para><c>process.code_signature.subject_name</c></para>
		/// <para>Subject name of the code signer</para>
		/// <example>Microsoft Corporation</example>
		///</summary>
		public static string ProcessCodeSignatureSubjectName = nameof(ProcessCodeSignatureSubjectName);
		///<summary>
		/// <para><c>process.code_signature.team_id</c></para>
		/// <para>The team identifier used to sign the process.
		/// This is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.</para>
		/// <example>EQHXZ8M8AV</example>
		///</summary>
		public static string ProcessCodeSignatureTeamId = nameof(ProcessCodeSignatureTeamId);
		///<summary>
		/// <para><c>process.code_signature.timestamp</c></para>
		/// <para>Date and time when the code signature was generated and signed.</para>
		/// <example>1/1/2021 12:10:30â€¯PM</example>
		///</summary>
		public static string ProcessCodeSignatureTimestamp = nameof(ProcessCodeSignatureTimestamp);
		///<summary>
		/// <para><c>process.code_signature.trusted</c></para>
		/// <para>Stores the trust status of the certificate chain.
		/// Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.</para>
		/// <example>true</example>
		///</summary>
		public static string ProcessCodeSignatureTrusted = nameof(ProcessCodeSignatureTrusted);
		///<summary>
		/// <para><c>process.code_signature.valid</c></para>
		/// <para>Boolean to capture if the digital signature is verified against the binary content.
		/// Leave unpopulated if a certificate was unchecked.</para>
		/// <example>true</example>
		///</summary>
		public static string ProcessCodeSignatureValid = nameof(ProcessCodeSignatureValid);
		///<summary>
		/// <para><c>process.elf.architecture</c></para>
		/// <para>Machine architecture of the ELF file.</para>
		/// <example>x86-64</example>
		///</summary>
		public static string ProcessElfArchitecture = nameof(ProcessElfArchitecture);
		///<summary>
		/// <para><c>process.elf.byte_order</c></para>
		/// <para>Byte sequence of ELF file.</para>
		/// <example>Little Endian</example>
		///</summary>
		public static string ProcessElfByteOrder = nameof(ProcessElfByteOrder);
		///<summary>
		/// <para><c>process.elf.cpu_type</c></para>
		/// <para>CPU type of the ELF file.</para>
		/// <example>Intel</example>
		///</summary>
		public static string ProcessElfCpuType = nameof(ProcessElfCpuType);
		///<summary>
		/// <para><c>process.elf.creation_date</c></para>
		/// <para>Extracted when possible from the file's metadata. Indicates when it was built or compiled. It can also be faked by malware creators.</para>
		/// <example></example>
		///</summary>
		public static string ProcessElfCreationDate = nameof(ProcessElfCreationDate);
		///<summary>
		/// <para><c>process.elf.go_import_hash</c></para>
		/// <para>A hash of the Go language imports in an ELF file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// The algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).</para>
		/// <example>10bddcb4cee42080f76c88d9ff964491</example>
		///</summary>
		public static string ProcessElfGoImportHash = nameof(ProcessElfGoImportHash);
		///<summary>
		/// <para><c>process.elf.go_imports</c></para>
		/// <para>List of imported Go language element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ProcessElfGoImports = nameof(ProcessElfGoImports);
		///<summary>
		/// <para><c>process.elf.go_imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string ProcessElfGoImportsNamesEntropy = nameof(ProcessElfGoImportsNamesEntropy);
		///<summary>
		/// <para><c>process.elf.go_imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string ProcessElfGoImportsNamesVarEntropy = nameof(ProcessElfGoImportsNamesVarEntropy);
		///<summary>
		/// <para><c>process.elf.go_stripped</c></para>
		/// <para>Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.</para>
		/// <example></example>
		///</summary>
		public static string ProcessElfGoStripped = nameof(ProcessElfGoStripped);
		///<summary>
		/// <para><c>process.elf.header.abi_version</c></para>
		/// <para>Version of the ELF Application Binary Interface (ABI).</para>
		/// <example></example>
		///</summary>
		public static string ProcessElfHeaderAbiVersion = nameof(ProcessElfHeaderAbiVersion);
		///<summary>
		/// <para><c>process.elf.header.class</c></para>
		/// <para>Header class of the ELF file.</para>
		/// <example></example>
		///</summary>
		public static string ProcessElfHeaderClass = nameof(ProcessElfHeaderClass);
		///<summary>
		/// <para><c>process.elf.header.data</c></para>
		/// <para>Data table of the ELF header.</para>
		/// <example></example>
		///</summary>
		public static string ProcessElfHeaderData = nameof(ProcessElfHeaderData);
		///<summary>
		/// <para><c>process.elf.header.entrypoint</c></para>
		/// <para>Header entrypoint of the ELF file.</para>
		/// <example></example>
		///</summary>
		public static string ProcessElfHeaderEntrypoint = nameof(ProcessElfHeaderEntrypoint);
		///<summary>
		/// <para><c>process.elf.header.object_version</c></para>
		/// <para>"0x1" for original ELF files.</para>
		/// <example></example>
		///</summary>
		public static string ProcessElfHeaderObjectVersion = nameof(ProcessElfHeaderObjectVersion);
		///<summary>
		/// <para><c>process.elf.header.os_abi</c></para>
		/// <para>Application Binary Interface (ABI) of the Linux OS.</para>
		/// <example></example>
		///</summary>
		public static string ProcessElfHeaderOsAbi = nameof(ProcessElfHeaderOsAbi);
		///<summary>
		/// <para><c>process.elf.header.type</c></para>
		/// <para>Header type of the ELF file.</para>
		/// <example></example>
		///</summary>
		public static string ProcessElfHeaderType = nameof(ProcessElfHeaderType);
		///<summary>
		/// <para><c>process.elf.header.version</c></para>
		/// <para>Version of the ELF header.</para>
		/// <example></example>
		///</summary>
		public static string ProcessElfHeaderVersion = nameof(ProcessElfHeaderVersion);
		///<summary>
		/// <para><c>process.elf.import_hash</c></para>
		/// <para>A hash of the imports in an ELF file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is an ELF implementation of the Windows PE imphash.</para>
		/// <example>d41d8cd98f00b204e9800998ecf8427e</example>
		///</summary>
		public static string ProcessElfImportHash = nameof(ProcessElfImportHash);
		///<summary>
		/// <para><c>process.elf.imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ProcessElfImportsNamesEntropy = nameof(ProcessElfImportsNamesEntropy);
		///<summary>
		/// <para><c>process.elf.imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ProcessElfImportsNamesVarEntropy = nameof(ProcessElfImportsNamesVarEntropy);
		///<summary>
		/// <para><c>process.elf.telfhash</c></para>
		/// <para>telfhash symbol hash for ELF file.</para>
		/// <example></example>
		///</summary>
		public static string ProcessElfTelfhash = nameof(ProcessElfTelfhash);
		///<summary>
		/// <para><c>process.macho.go_import_hash</c></para>
		/// <para>A hash of the Go language imports in a Mach-O file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// The algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).</para>
		/// <example>10bddcb4cee42080f76c88d9ff964491</example>
		///</summary>
		public static string ProcessMachoGoImportHash = nameof(ProcessMachoGoImportHash);
		///<summary>
		/// <para><c>process.macho.go_imports</c></para>
		/// <para>List of imported Go language element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ProcessMachoGoImports = nameof(ProcessMachoGoImports);
		///<summary>
		/// <para><c>process.macho.go_imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string ProcessMachoGoImportsNamesEntropy = nameof(ProcessMachoGoImportsNamesEntropy);
		///<summary>
		/// <para><c>process.macho.go_imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string ProcessMachoGoImportsNamesVarEntropy = nameof(ProcessMachoGoImportsNamesVarEntropy);
		///<summary>
		/// <para><c>process.macho.go_stripped</c></para>
		/// <para>Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.</para>
		/// <example></example>
		///</summary>
		public static string ProcessMachoGoStripped = nameof(ProcessMachoGoStripped);
		///<summary>
		/// <para><c>process.macho.import_hash</c></para>
		/// <para>A hash of the imports in a Mach-O file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is a synonym for symhash.</para>
		/// <example>d41d8cd98f00b204e9800998ecf8427e</example>
		///</summary>
		public static string ProcessMachoImportHash = nameof(ProcessMachoImportHash);
		///<summary>
		/// <para><c>process.macho.imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ProcessMachoImportsNamesEntropy = nameof(ProcessMachoImportsNamesEntropy);
		///<summary>
		/// <para><c>process.macho.imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ProcessMachoImportsNamesVarEntropy = nameof(ProcessMachoImportsNamesVarEntropy);
		///<summary>
		/// <para><c>process.macho.symhash</c></para>
		/// <para>A hash of the imports in a Mach-O file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is a Mach-O implementation of the Windows PE imphash</para>
		/// <example>d3ccf195b62a9279c3c19af1080497ec</example>
		///</summary>
		public static string ProcessMachoSymhash = nameof(ProcessMachoSymhash);
		///<summary>
		/// <para><c>process.entry_meta.source.address</c></para>
		/// <para>Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
		/// Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.</para>
		/// <example></example>
		///</summary>
		public static string ProcessEntryMetaSourceAddress = nameof(ProcessEntryMetaSourceAddress);
		///<summary>
		/// <para><c>process.entry_meta.source.bytes</c></para>
		/// <para>Bytes sent from the source to the destination.</para>
		/// <example>184</example>
		///</summary>
		public static string ProcessEntryMetaSourceBytes = nameof(ProcessEntryMetaSourceBytes);
		///<summary>
		/// <para><c>process.entry_meta.source.domain</c></para>
		/// <para>The domain name of the source system.
		/// This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.</para>
		/// <example>foo.example.com</example>
		///</summary>
		public static string ProcessEntryMetaSourceDomain = nameof(ProcessEntryMetaSourceDomain);
		///<summary>
		/// <para><c>process.entry_meta.source.ip</c></para>
		/// <para>IP address of the source (IPv4 or IPv6).</para>
		/// <example></example>
		///</summary>
		public static string ProcessEntryMetaSourceIp = nameof(ProcessEntryMetaSourceIp);
		///<summary>
		/// <para><c>process.entry_meta.source.mac</c></para>
		/// <para>MAC address of the source.
		/// The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
		/// <para>pattern: </para></para>
		/// <example>00-00-5E-00-53-23</example>
		///</summary>
		public static string ProcessEntryMetaSourceMac = nameof(ProcessEntryMetaSourceMac);
		///<summary>
		/// <para><c>process.entry_meta.source.nat.ip</c></para>
		/// <para>Translated ip of source based NAT sessions (e.g. internal client to internet)
		/// Typically connections traversing load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		public static string ProcessEntryMetaSourceNatIp = nameof(ProcessEntryMetaSourceNatIp);
		///<summary>
		/// <para><c>process.entry_meta.source.nat.port</c></para>
		/// <para>Translated port of source based NAT sessions. (e.g. internal client to internet)
		/// Typically used with load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		public static string ProcessEntryMetaSourceNatPort = nameof(ProcessEntryMetaSourceNatPort);
		///<summary>
		/// <para><c>process.entry_meta.source.packets</c></para>
		/// <para>Packets sent from the source to the destination.</para>
		/// <example>12</example>
		///</summary>
		public static string ProcessEntryMetaSourcePackets = nameof(ProcessEntryMetaSourcePackets);
		///<summary>
		/// <para><c>process.entry_meta.source.port</c></para>
		/// <para>Port of the source.</para>
		/// <example></example>
		///</summary>
		public static string ProcessEntryMetaSourcePort = nameof(ProcessEntryMetaSourcePort);
		///<summary>
		/// <para><c>process.entry_meta.source.registered_domain</c></para>
		/// <para>The highest registered source domain, stripped of the subdomain.
		/// For example, the registered domain for "foo.example.com" is "example.com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".</para>
		/// <example>example.com</example>
		///</summary>
		public static string ProcessEntryMetaSourceRegisteredDomain = nameof(ProcessEntryMetaSourceRegisteredDomain);
		///<summary>
		/// <para><c>process.entry_meta.source.subdomain</c></para>
		/// <para>The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
		/// For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.</para>
		/// <example>east</example>
		///</summary>
		public static string ProcessEntryMetaSourceSubdomain = nameof(ProcessEntryMetaSourceSubdomain);
		///<summary>
		/// <para><c>process.entry_meta.source.top_level_domain</c></para>
		/// <para>The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".</para>
		/// <example>co.uk</example>
		///</summary>
		public static string ProcessEntryMetaSourceTopLevelDomain = nameof(ProcessEntryMetaSourceTopLevelDomain);
		///<summary>
		/// <para><c>process.entry_meta.source.as.number</c></para>
		/// <para>Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.</para>
		/// <example>15169</example>
		///</summary>
		public static string ProcessEntryMetaSourceAsNumber = nameof(ProcessEntryMetaSourceAsNumber);
		///<summary>
		/// <para><c>process.entry_meta.source.as.organization.name</c></para>
		/// <para>Organization name.</para>
		/// <example>Google LLC</example>
		///</summary>
		public static string ProcessEntryMetaSourceAsOrganizationName = nameof(ProcessEntryMetaSourceAsOrganizationName);
		///<summary>
		/// <para><c>process.entry_meta.source.geo.city_name</c></para>
		/// <para>City name.</para>
		/// <example>Montreal</example>
		///</summary>
		public static string ProcessEntryMetaSourceGeoCityName = nameof(ProcessEntryMetaSourceGeoCityName);
		///<summary>
		/// <para><c>process.entry_meta.source.geo.continent_code</c></para>
		/// <para>Two-letter code representing continent's name.</para>
		/// <example>NA</example>
		///</summary>
		public static string ProcessEntryMetaSourceGeoContinentCode = nameof(ProcessEntryMetaSourceGeoContinentCode);
		///<summary>
		/// <para><c>process.entry_meta.source.geo.continent_name</c></para>
		/// <para>Name of the continent.</para>
		/// <example>North America</example>
		///</summary>
		public static string ProcessEntryMetaSourceGeoContinentName = nameof(ProcessEntryMetaSourceGeoContinentName);
		///<summary>
		/// <para><c>process.entry_meta.source.geo.country_iso_code</c></para>
		/// <para>Country ISO code.</para>
		/// <example>CA</example>
		///</summary>
		public static string ProcessEntryMetaSourceGeoCountryIsoCode = nameof(ProcessEntryMetaSourceGeoCountryIsoCode);
		///<summary>
		/// <para><c>process.entry_meta.source.geo.country_name</c></para>
		/// <para>Country name.</para>
		/// <example>Canada</example>
		///</summary>
		public static string ProcessEntryMetaSourceGeoCountryName = nameof(ProcessEntryMetaSourceGeoCountryName);
		///<summary>
		/// <para><c>process.entry_meta.source.geo.location</c></para>
		/// <para>Longitude and latitude.</para>
		/// <example>{ "lon": -73.614830, "lat": 45.505918 }</example>
		///</summary>
		public static string ProcessEntryMetaSourceGeoLocation = nameof(ProcessEntryMetaSourceGeoLocation);
		///<summary>
		/// <para><c>process.entry_meta.source.geo.name</c></para>
		/// <para>User-defined description of a location, at the level of granularity they care about.
		/// Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
		/// Not typically used in automated geolocation.</para>
		/// <example>boston-dc</example>
		///</summary>
		public static string ProcessEntryMetaSourceGeoName = nameof(ProcessEntryMetaSourceGeoName);
		///<summary>
		/// <para><c>process.entry_meta.source.geo.postal_code</c></para>
		/// <para>Postal code associated with the location.
		/// Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.</para>
		/// <example>94040</example>
		///</summary>
		public static string ProcessEntryMetaSourceGeoPostalCode = nameof(ProcessEntryMetaSourceGeoPostalCode);
		///<summary>
		/// <para><c>process.entry_meta.source.geo.region_iso_code</c></para>
		/// <para>Region ISO code.</para>
		/// <example>CA-QC</example>
		///</summary>
		public static string ProcessEntryMetaSourceGeoRegionIsoCode = nameof(ProcessEntryMetaSourceGeoRegionIsoCode);
		///<summary>
		/// <para><c>process.entry_meta.source.geo.region_name</c></para>
		/// <para>Region name.</para>
		/// <example>Quebec</example>
		///</summary>
		public static string ProcessEntryMetaSourceGeoRegionName = nameof(ProcessEntryMetaSourceGeoRegionName);
		///<summary>
		/// <para><c>process.entry_meta.source.geo.timezone</c></para>
		/// <para>The time zone of the location, such as IANA time zone name.</para>
		/// <example>America/Argentina/Buenos_Aires</example>
		///</summary>
		public static string ProcessEntryMetaSourceGeoTimezone = nameof(ProcessEntryMetaSourceGeoTimezone);
		///<summary>
		/// <para><c>process.entry_meta.source.user.domain</c></para>
		/// <para>Name of the directory the user is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string ProcessEntryMetaSourceUserDomain = nameof(ProcessEntryMetaSourceUserDomain);
		///<summary>
		/// <para><c>process.entry_meta.source.user.email</c></para>
		/// <para>User email address.</para>
		/// <example></example>
		///</summary>
		public static string ProcessEntryMetaSourceUserEmail = nameof(ProcessEntryMetaSourceUserEmail);
		///<summary>
		/// <para><c>process.entry_meta.source.user.full_name</c></para>
		/// <para>User's full name, if available.</para>
		/// <example>Albert Einstein</example>
		///</summary>
		public static string ProcessEntryMetaSourceUserFullName = nameof(ProcessEntryMetaSourceUserFullName);
		///<summary>
		/// <para><c>process.entry_meta.source.user.hash</c></para>
		/// <para>Unique user hash to correlate information for a user in anonymized form.
		/// Useful if `user.id` or `user.name` contain confidential information and cannot be used.</para>
		/// <example></example>
		///</summary>
		public static string ProcessEntryMetaSourceUserHash = nameof(ProcessEntryMetaSourceUserHash);
		///<summary>
		/// <para><c>process.entry_meta.source.user.id</c></para>
		/// <para>Unique identifier of the user.</para>
		/// <example>S-1-5-21-202424912787-2692429404-2351956786-1000</example>
		///</summary>
		public static string ProcessEntryMetaSourceUserId = nameof(ProcessEntryMetaSourceUserId);
		///<summary>
		/// <para><c>process.entry_meta.source.user.name</c></para>
		/// <para>Short name or login of the user.</para>
		/// <example>a.einstein</example>
		///</summary>
		public static string ProcessEntryMetaSourceUserName = nameof(ProcessEntryMetaSourceUserName);
		///<summary>
		/// <para><c>process.entry_meta.source.user.group.domain</c></para>
		/// <para>Name of the directory the group is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string ProcessEntryMetaSourceUserGroupDomain = nameof(ProcessEntryMetaSourceUserGroupDomain);
		///<summary>
		/// <para><c>process.entry_meta.source.user.group.id</c></para>
		/// <para>Unique identifier for the group on the system/platform.</para>
		/// <example></example>
		///</summary>
		public static string ProcessEntryMetaSourceUserGroupId = nameof(ProcessEntryMetaSourceUserGroupId);
		///<summary>
		/// <para><c>process.entry_meta.source.user.group.name</c></para>
		/// <para>Name of the group.</para>
		/// <example></example>
		///</summary>
		public static string ProcessEntryMetaSourceUserGroupName = nameof(ProcessEntryMetaSourceUserGroupName);
		///<summary>
		/// <para><c>process.entry_meta.source.user.risk.calculated_level</c></para>
		/// <para>A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>High</example>
		///</summary>
		public static string ProcessEntryMetaSourceUserRiskCalculatedLevel = nameof(ProcessEntryMetaSourceUserRiskCalculatedLevel);
		///<summary>
		/// <para><c>process.entry_meta.source.user.risk.calculated_score</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>880.73</example>
		///</summary>
		public static string ProcessEntryMetaSourceUserRiskCalculatedScore = nameof(ProcessEntryMetaSourceUserRiskCalculatedScore);
		///<summary>
		/// <para><c>process.entry_meta.source.user.risk.calculated_score_norm</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.</para>
		/// <example>88.73</example>
		///</summary>
		public static string ProcessEntryMetaSourceUserRiskCalculatedScoreNorm = nameof(ProcessEntryMetaSourceUserRiskCalculatedScoreNorm);
		///<summary>
		/// <para><c>process.entry_meta.source.user.risk.static_level</c></para>
		/// <para>A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>High</example>
		///</summary>
		public static string ProcessEntryMetaSourceUserRiskStaticLevel = nameof(ProcessEntryMetaSourceUserRiskStaticLevel);
		///<summary>
		/// <para><c>process.entry_meta.source.user.risk.static_score</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>830.0</example>
		///</summary>
		public static string ProcessEntryMetaSourceUserRiskStaticScore = nameof(ProcessEntryMetaSourceUserRiskStaticScore);
		///<summary>
		/// <para><c>process.entry_meta.source.user.risk.static_score_norm</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.</para>
		/// <example>83.0</example>
		///</summary>
		public static string ProcessEntryMetaSourceUserRiskStaticScoreNorm = nameof(ProcessEntryMetaSourceUserRiskStaticScoreNorm);
		///<summary>
		/// <para><c>process.user.domain</c></para>
		/// <para>Name of the directory the user is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string ProcessUserDomain = nameof(ProcessUserDomain);
		///<summary>
		/// <para><c>process.user.email</c></para>
		/// <para>User email address.</para>
		/// <example></example>
		///</summary>
		public static string ProcessUserEmail = nameof(ProcessUserEmail);
		///<summary>
		/// <para><c>process.user.full_name</c></para>
		/// <para>User's full name, if available.</para>
		/// <example>Albert Einstein</example>
		///</summary>
		public static string ProcessUserFullName = nameof(ProcessUserFullName);
		///<summary>
		/// <para><c>process.user.hash</c></para>
		/// <para>Unique user hash to correlate information for a user in anonymized form.
		/// Useful if `user.id` or `user.name` contain confidential information and cannot be used.</para>
		/// <example></example>
		///</summary>
		public static string ProcessUserHash = nameof(ProcessUserHash);
		///<summary>
		/// <para><c>process.user.id</c></para>
		/// <para>Unique identifier of the user.</para>
		/// <example>S-1-5-21-202424912787-2692429404-2351956786-1000</example>
		///</summary>
		public static string ProcessUserId = nameof(ProcessUserId);
		///<summary>
		/// <para><c>process.user.name</c></para>
		/// <para>Short name or login of the user.</para>
		/// <example>a.einstein</example>
		///</summary>
		public static string ProcessUserName = nameof(ProcessUserName);
		///<summary>
		/// <para><c>process.user.group.domain</c></para>
		/// <para>Name of the directory the group is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string ProcessUserGroupDomain = nameof(ProcessUserGroupDomain);
		///<summary>
		/// <para><c>process.user.group.id</c></para>
		/// <para>Unique identifier for the group on the system/platform.</para>
		/// <example></example>
		///</summary>
		public static string ProcessUserGroupId = nameof(ProcessUserGroupId);
		///<summary>
		/// <para><c>process.user.group.name</c></para>
		/// <para>Name of the group.</para>
		/// <example></example>
		///</summary>
		public static string ProcessUserGroupName = nameof(ProcessUserGroupName);
		///<summary>
		/// <para><c>process.user.risk.calculated_level</c></para>
		/// <para>A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>High</example>
		///</summary>
		public static string ProcessUserRiskCalculatedLevel = nameof(ProcessUserRiskCalculatedLevel);
		///<summary>
		/// <para><c>process.user.risk.calculated_score</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>880.73</example>
		///</summary>
		public static string ProcessUserRiskCalculatedScore = nameof(ProcessUserRiskCalculatedScore);
		///<summary>
		/// <para><c>process.user.risk.calculated_score_norm</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.</para>
		/// <example>88.73</example>
		///</summary>
		public static string ProcessUserRiskCalculatedScoreNorm = nameof(ProcessUserRiskCalculatedScoreNorm);
		///<summary>
		/// <para><c>process.user.risk.static_level</c></para>
		/// <para>A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>High</example>
		///</summary>
		public static string ProcessUserRiskStaticLevel = nameof(ProcessUserRiskStaticLevel);
		///<summary>
		/// <para><c>process.user.risk.static_score</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>830.0</example>
		///</summary>
		public static string ProcessUserRiskStaticScore = nameof(ProcessUserRiskStaticScore);
		///<summary>
		/// <para><c>process.user.risk.static_score_norm</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.</para>
		/// <example>83.0</example>
		///</summary>
		public static string ProcessUserRiskStaticScoreNorm = nameof(ProcessUserRiskStaticScoreNorm);
		///<summary>
		/// <para><c>process.saved_user.domain</c></para>
		/// <para>Name of the directory the user is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string ProcessSavedUserDomain = nameof(ProcessSavedUserDomain);
		///<summary>
		/// <para><c>process.saved_user.email</c></para>
		/// <para>User email address.</para>
		/// <example></example>
		///</summary>
		public static string ProcessSavedUserEmail = nameof(ProcessSavedUserEmail);
		///<summary>
		/// <para><c>process.saved_user.full_name</c></para>
		/// <para>User's full name, if available.</para>
		/// <example>Albert Einstein</example>
		///</summary>
		public static string ProcessSavedUserFullName = nameof(ProcessSavedUserFullName);
		///<summary>
		/// <para><c>process.saved_user.hash</c></para>
		/// <para>Unique user hash to correlate information for a user in anonymized form.
		/// Useful if `user.id` or `user.name` contain confidential information and cannot be used.</para>
		/// <example></example>
		///</summary>
		public static string ProcessSavedUserHash = nameof(ProcessSavedUserHash);
		///<summary>
		/// <para><c>process.saved_user.id</c></para>
		/// <para>Unique identifier of the user.</para>
		/// <example>S-1-5-21-202424912787-2692429404-2351956786-1000</example>
		///</summary>
		public static string ProcessSavedUserId = nameof(ProcessSavedUserId);
		///<summary>
		/// <para><c>process.saved_user.name</c></para>
		/// <para>Short name or login of the user.</para>
		/// <example>a.einstein</example>
		///</summary>
		public static string ProcessSavedUserName = nameof(ProcessSavedUserName);
		///<summary>
		/// <para><c>process.saved_user.group.domain</c></para>
		/// <para>Name of the directory the group is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string ProcessSavedUserGroupDomain = nameof(ProcessSavedUserGroupDomain);
		///<summary>
		/// <para><c>process.saved_user.group.id</c></para>
		/// <para>Unique identifier for the group on the system/platform.</para>
		/// <example></example>
		///</summary>
		public static string ProcessSavedUserGroupId = nameof(ProcessSavedUserGroupId);
		///<summary>
		/// <para><c>process.saved_user.group.name</c></para>
		/// <para>Name of the group.</para>
		/// <example></example>
		///</summary>
		public static string ProcessSavedUserGroupName = nameof(ProcessSavedUserGroupName);
		///<summary>
		/// <para><c>process.saved_user.risk.calculated_level</c></para>
		/// <para>A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>High</example>
		///</summary>
		public static string ProcessSavedUserRiskCalculatedLevel = nameof(ProcessSavedUserRiskCalculatedLevel);
		///<summary>
		/// <para><c>process.saved_user.risk.calculated_score</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>880.73</example>
		///</summary>
		public static string ProcessSavedUserRiskCalculatedScore = nameof(ProcessSavedUserRiskCalculatedScore);
		///<summary>
		/// <para><c>process.saved_user.risk.calculated_score_norm</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.</para>
		/// <example>88.73</example>
		///</summary>
		public static string ProcessSavedUserRiskCalculatedScoreNorm = nameof(ProcessSavedUserRiskCalculatedScoreNorm);
		///<summary>
		/// <para><c>process.saved_user.risk.static_level</c></para>
		/// <para>A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>High</example>
		///</summary>
		public static string ProcessSavedUserRiskStaticLevel = nameof(ProcessSavedUserRiskStaticLevel);
		///<summary>
		/// <para><c>process.saved_user.risk.static_score</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>830.0</example>
		///</summary>
		public static string ProcessSavedUserRiskStaticScore = nameof(ProcessSavedUserRiskStaticScore);
		///<summary>
		/// <para><c>process.saved_user.risk.static_score_norm</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.</para>
		/// <example>83.0</example>
		///</summary>
		public static string ProcessSavedUserRiskStaticScoreNorm = nameof(ProcessSavedUserRiskStaticScoreNorm);
		///<summary>
		/// <para><c>process.real_user.domain</c></para>
		/// <para>Name of the directory the user is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string ProcessRealUserDomain = nameof(ProcessRealUserDomain);
		///<summary>
		/// <para><c>process.real_user.email</c></para>
		/// <para>User email address.</para>
		/// <example></example>
		///</summary>
		public static string ProcessRealUserEmail = nameof(ProcessRealUserEmail);
		///<summary>
		/// <para><c>process.real_user.full_name</c></para>
		/// <para>User's full name, if available.</para>
		/// <example>Albert Einstein</example>
		///</summary>
		public static string ProcessRealUserFullName = nameof(ProcessRealUserFullName);
		///<summary>
		/// <para><c>process.real_user.hash</c></para>
		/// <para>Unique user hash to correlate information for a user in anonymized form.
		/// Useful if `user.id` or `user.name` contain confidential information and cannot be used.</para>
		/// <example></example>
		///</summary>
		public static string ProcessRealUserHash = nameof(ProcessRealUserHash);
		///<summary>
		/// <para><c>process.real_user.id</c></para>
		/// <para>Unique identifier of the user.</para>
		/// <example>S-1-5-21-202424912787-2692429404-2351956786-1000</example>
		///</summary>
		public static string ProcessRealUserId = nameof(ProcessRealUserId);
		///<summary>
		/// <para><c>process.real_user.name</c></para>
		/// <para>Short name or login of the user.</para>
		/// <example>a.einstein</example>
		///</summary>
		public static string ProcessRealUserName = nameof(ProcessRealUserName);
		///<summary>
		/// <para><c>process.real_user.group.domain</c></para>
		/// <para>Name of the directory the group is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string ProcessRealUserGroupDomain = nameof(ProcessRealUserGroupDomain);
		///<summary>
		/// <para><c>process.real_user.group.id</c></para>
		/// <para>Unique identifier for the group on the system/platform.</para>
		/// <example></example>
		///</summary>
		public static string ProcessRealUserGroupId = nameof(ProcessRealUserGroupId);
		///<summary>
		/// <para><c>process.real_user.group.name</c></para>
		/// <para>Name of the group.</para>
		/// <example></example>
		///</summary>
		public static string ProcessRealUserGroupName = nameof(ProcessRealUserGroupName);
		///<summary>
		/// <para><c>process.real_user.risk.calculated_level</c></para>
		/// <para>A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>High</example>
		///</summary>
		public static string ProcessRealUserRiskCalculatedLevel = nameof(ProcessRealUserRiskCalculatedLevel);
		///<summary>
		/// <para><c>process.real_user.risk.calculated_score</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>880.73</example>
		///</summary>
		public static string ProcessRealUserRiskCalculatedScore = nameof(ProcessRealUserRiskCalculatedScore);
		///<summary>
		/// <para><c>process.real_user.risk.calculated_score_norm</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.</para>
		/// <example>88.73</example>
		///</summary>
		public static string ProcessRealUserRiskCalculatedScoreNorm = nameof(ProcessRealUserRiskCalculatedScoreNorm);
		///<summary>
		/// <para><c>process.real_user.risk.static_level</c></para>
		/// <para>A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>High</example>
		///</summary>
		public static string ProcessRealUserRiskStaticLevel = nameof(ProcessRealUserRiskStaticLevel);
		///<summary>
		/// <para><c>process.real_user.risk.static_score</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>830.0</example>
		///</summary>
		public static string ProcessRealUserRiskStaticScore = nameof(ProcessRealUserRiskStaticScore);
		///<summary>
		/// <para><c>process.real_user.risk.static_score_norm</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.</para>
		/// <example>83.0</example>
		///</summary>
		public static string ProcessRealUserRiskStaticScoreNorm = nameof(ProcessRealUserRiskStaticScoreNorm);
		///<summary>
		/// <para><c>process.attested_user.domain</c></para>
		/// <para>Name of the directory the user is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string ProcessAttestedUserDomain = nameof(ProcessAttestedUserDomain);
		///<summary>
		/// <para><c>process.attested_user.email</c></para>
		/// <para>User email address.</para>
		/// <example></example>
		///</summary>
		public static string ProcessAttestedUserEmail = nameof(ProcessAttestedUserEmail);
		///<summary>
		/// <para><c>process.attested_user.full_name</c></para>
		/// <para>User's full name, if available.</para>
		/// <example>Albert Einstein</example>
		///</summary>
		public static string ProcessAttestedUserFullName = nameof(ProcessAttestedUserFullName);
		///<summary>
		/// <para><c>process.attested_user.hash</c></para>
		/// <para>Unique user hash to correlate information for a user in anonymized form.
		/// Useful if `user.id` or `user.name` contain confidential information and cannot be used.</para>
		/// <example></example>
		///</summary>
		public static string ProcessAttestedUserHash = nameof(ProcessAttestedUserHash);
		///<summary>
		/// <para><c>process.attested_user.id</c></para>
		/// <para>Unique identifier of the user.</para>
		/// <example>S-1-5-21-202424912787-2692429404-2351956786-1000</example>
		///</summary>
		public static string ProcessAttestedUserId = nameof(ProcessAttestedUserId);
		///<summary>
		/// <para><c>process.attested_user.name</c></para>
		/// <para>Short name or login of the user.</para>
		/// <example>a.einstein</example>
		///</summary>
		public static string ProcessAttestedUserName = nameof(ProcessAttestedUserName);
		///<summary>
		/// <para><c>process.attested_user.group.domain</c></para>
		/// <para>Name of the directory the group is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string ProcessAttestedUserGroupDomain = nameof(ProcessAttestedUserGroupDomain);
		///<summary>
		/// <para><c>process.attested_user.group.id</c></para>
		/// <para>Unique identifier for the group on the system/platform.</para>
		/// <example></example>
		///</summary>
		public static string ProcessAttestedUserGroupId = nameof(ProcessAttestedUserGroupId);
		///<summary>
		/// <para><c>process.attested_user.group.name</c></para>
		/// <para>Name of the group.</para>
		/// <example></example>
		///</summary>
		public static string ProcessAttestedUserGroupName = nameof(ProcessAttestedUserGroupName);
		///<summary>
		/// <para><c>process.attested_user.risk.calculated_level</c></para>
		/// <para>A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>High</example>
		///</summary>
		public static string ProcessAttestedUserRiskCalculatedLevel = nameof(ProcessAttestedUserRiskCalculatedLevel);
		///<summary>
		/// <para><c>process.attested_user.risk.calculated_score</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>880.73</example>
		///</summary>
		public static string ProcessAttestedUserRiskCalculatedScore = nameof(ProcessAttestedUserRiskCalculatedScore);
		///<summary>
		/// <para><c>process.attested_user.risk.calculated_score_norm</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.</para>
		/// <example>88.73</example>
		///</summary>
		public static string ProcessAttestedUserRiskCalculatedScoreNorm = nameof(ProcessAttestedUserRiskCalculatedScoreNorm);
		///<summary>
		/// <para><c>process.attested_user.risk.static_level</c></para>
		/// <para>A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>High</example>
		///</summary>
		public static string ProcessAttestedUserRiskStaticLevel = nameof(ProcessAttestedUserRiskStaticLevel);
		///<summary>
		/// <para><c>process.attested_user.risk.static_score</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>830.0</example>
		///</summary>
		public static string ProcessAttestedUserRiskStaticScore = nameof(ProcessAttestedUserRiskStaticScore);
		///<summary>
		/// <para><c>process.attested_user.risk.static_score_norm</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.</para>
		/// <example>83.0</example>
		///</summary>
		public static string ProcessAttestedUserRiskStaticScoreNorm = nameof(ProcessAttestedUserRiskStaticScoreNorm);
		///<summary>
		/// <para><c>registry.data.bytes</c></para>
		/// <para>Original bytes written with base64 encoding.
		/// For Windows registry operations, such as SetValueEx and RegQueryValueEx, this corresponds to the data pointed by `lp_data`. This is optional but provides better recoverability and should be populated for REG_BINARY encoded values.</para>
		/// <example>ZQBuAC0AVQBTAAAAZQBuAAAAAAA=</example>
		///</summary>
		public static string RegistryDataBytes = nameof(RegistryDataBytes);
		///<summary>
		/// <para><c>registry.data.type</c></para>
		/// <para>Standard registry type for encoding contents</para>
		/// <example>REG_SZ</example>
		///</summary>
		public static string RegistryDataType = nameof(RegistryDataType);
		///<summary>
		/// <para><c>registry.hive</c></para>
		/// <para>Abbreviated name for the hive.</para>
		/// <example>HKLM</example>
		///</summary>
		public static string RegistryHive = nameof(RegistryHive);
		///<summary>
		/// <para><c>registry.key</c></para>
		/// <para>Hive-relative path of keys.</para>
		/// <example>SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe</example>
		///</summary>
		public static string RegistryKey = nameof(RegistryKey);
		///<summary>
		/// <para><c>registry.path</c></para>
		/// <para>Full path, including hive, key and value</para>
		/// <example>HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe\Debugger</example>
		///</summary>
		public static string RegistryPath = nameof(RegistryPath);
		///<summary>
		/// <para><c>registry.value</c></para>
		/// <para>Name of the value written.</para>
		/// <example>Debugger</example>
		///</summary>
		public static string RegistryValue = nameof(RegistryValue);
		///<summary>
		/// <para><c>risk.calculated_level</c></para>
		/// <para>A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>High</example>
		///</summary>
		public static string RiskCalculatedLevel = nameof(RiskCalculatedLevel);
		///<summary>
		/// <para><c>risk.calculated_score</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>880.73</example>
		///</summary>
		public static string RiskCalculatedScore = nameof(RiskCalculatedScore);
		///<summary>
		/// <para><c>risk.calculated_score_norm</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.</para>
		/// <example>88.73</example>
		///</summary>
		public static string RiskCalculatedScoreNorm = nameof(RiskCalculatedScoreNorm);
		///<summary>
		/// <para><c>risk.static_level</c></para>
		/// <para>A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>High</example>
		///</summary>
		public static string RiskStaticLevel = nameof(RiskStaticLevel);
		///<summary>
		/// <para><c>risk.static_score</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>830.0</example>
		///</summary>
		public static string RiskStaticScore = nameof(RiskStaticScore);
		///<summary>
		/// <para><c>risk.static_score_norm</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.</para>
		/// <example>83.0</example>
		///</summary>
		public static string RiskStaticScoreNorm = nameof(RiskStaticScoreNorm);
		///<summary>
		/// <para><c>rule.category</c></para>
		/// <para>A categorization value keyword used by the entity using the rule for detection of this event.</para>
		/// <example>Attempted Information Leak</example>
		///</summary>
		public static string RuleCategory = nameof(RuleCategory);
		///<summary>
		/// <para><c>rule.description</c></para>
		/// <para>The description of the rule generating the event.</para>
		/// <example>Block requests to public DNS over HTTPS / TLS protocols</example>
		///</summary>
		public static string RuleDescription = nameof(RuleDescription);
		///<summary>
		/// <para><c>rule.id</c></para>
		/// <para>A rule ID that is unique within the scope of an agent, observer, or other entity using the rule for detection of this event.</para>
		/// <example>101</example>
		///</summary>
		public static string RuleId = nameof(RuleId);
		///<summary>
		/// <para><c>rule.license</c></para>
		/// <para>Name of the license under which the rule used to generate this event is made available.</para>
		/// <example>Apache 2.0</example>
		///</summary>
		public static string RuleLicense = nameof(RuleLicense);
		///<summary>
		/// <para><c>rule.name</c></para>
		/// <para>The name of the rule or signature generating the event.</para>
		/// <example>BLOCK_DNS_over_TLS</example>
		///</summary>
		public static string RuleName = nameof(RuleName);
		///<summary>
		/// <para><c>rule.reference</c></para>
		/// <para>Reference URL to additional information about the rule used to generate this event.
		/// The URL can point to the vendor's documentation about the rule. If that's not available, it can also be a link to a more general page describing this type of alert.</para>
		/// <example>https://en.wikipedia.org/wiki/DNS_over_TLS</example>
		///</summary>
		public static string RuleReference = nameof(RuleReference);
		///<summary>
		/// <para><c>rule.ruleset</c></para>
		/// <para>Name of the ruleset, policy, group, or parent category in which the rule used to generate this event is a member.</para>
		/// <example>Standard_Protocol_Filters</example>
		///</summary>
		public static string RuleRuleset = nameof(RuleRuleset);
		///<summary>
		/// <para><c>rule.uuid</c></para>
		/// <para>A rule ID that is unique within the scope of a set or group of agents, observers, or other entities using the rule for detection of this event.</para>
		/// <example>1100110011</example>
		///</summary>
		public static string RuleUuid = nameof(RuleUuid);
		///<summary>
		/// <para><c>rule.version</c></para>
		/// <para>The version / revision of the rule being used for analysis.</para>
		/// <example>1.1</example>
		///</summary>
		public static string RuleVersion = nameof(RuleVersion);
		///<summary>
		/// <para><c>server.address</c></para>
		/// <para>Some event server addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
		/// Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.</para>
		/// <example></example>
		///</summary>
		public static string ServerAddress = nameof(ServerAddress);
		///<summary>
		/// <para><c>server.bytes</c></para>
		/// <para>Bytes sent from the server to the client.</para>
		/// <example>184</example>
		///</summary>
		public static string ServerBytes = nameof(ServerBytes);
		///<summary>
		/// <para><c>server.domain</c></para>
		/// <para>The domain name of the server system.
		/// This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.</para>
		/// <example>foo.example.com</example>
		///</summary>
		public static string ServerDomain = nameof(ServerDomain);
		///<summary>
		/// <para><c>server.ip</c></para>
		/// <para>IP address of the server (IPv4 or IPv6).</para>
		/// <example></example>
		///</summary>
		public static string ServerIp = nameof(ServerIp);
		///<summary>
		/// <para><c>server.mac</c></para>
		/// <para>MAC address of the server.
		/// The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
		/// <para>pattern: </para></para>
		/// <example>00-00-5E-00-53-23</example>
		///</summary>
		public static string ServerMac = nameof(ServerMac);
		///<summary>
		/// <para><c>server.nat.ip</c></para>
		/// <para>Translated ip of destination based NAT sessions (e.g. internet to private DMZ)
		/// Typically used with load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		public static string ServerNatIp = nameof(ServerNatIp);
		///<summary>
		/// <para><c>server.nat.port</c></para>
		/// <para>Translated port of destination based NAT sessions (e.g. internet to private DMZ)
		/// Typically used with load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		public static string ServerNatPort = nameof(ServerNatPort);
		///<summary>
		/// <para><c>server.packets</c></para>
		/// <para>Packets sent from the server to the client.</para>
		/// <example>12</example>
		///</summary>
		public static string ServerPackets = nameof(ServerPackets);
		///<summary>
		/// <para><c>server.port</c></para>
		/// <para>Port of the server.</para>
		/// <example></example>
		///</summary>
		public static string ServerPort = nameof(ServerPort);
		///<summary>
		/// <para><c>server.registered_domain</c></para>
		/// <para>The highest registered server domain, stripped of the subdomain.
		/// For example, the registered domain for "foo.example.com" is "example.com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".</para>
		/// <example>example.com</example>
		///</summary>
		public static string ServerRegisteredDomain = nameof(ServerRegisteredDomain);
		///<summary>
		/// <para><c>server.subdomain</c></para>
		/// <para>The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
		/// For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.</para>
		/// <example>east</example>
		///</summary>
		public static string ServerSubdomain = nameof(ServerSubdomain);
		///<summary>
		/// <para><c>server.top_level_domain</c></para>
		/// <para>The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".</para>
		/// <example>co.uk</example>
		///</summary>
		public static string ServerTopLevelDomain = nameof(ServerTopLevelDomain);
		///<summary>
		/// <para><c>server.as.number</c></para>
		/// <para>Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.</para>
		/// <example>15169</example>
		///</summary>
		public static string ServerAsNumber = nameof(ServerAsNumber);
		///<summary>
		/// <para><c>server.as.organization.name</c></para>
		/// <para>Organization name.</para>
		/// <example>Google LLC</example>
		///</summary>
		public static string ServerAsOrganizationName = nameof(ServerAsOrganizationName);
		///<summary>
		/// <para><c>server.geo.city_name</c></para>
		/// <para>City name.</para>
		/// <example>Montreal</example>
		///</summary>
		public static string ServerGeoCityName = nameof(ServerGeoCityName);
		///<summary>
		/// <para><c>server.geo.continent_code</c></para>
		/// <para>Two-letter code representing continent's name.</para>
		/// <example>NA</example>
		///</summary>
		public static string ServerGeoContinentCode = nameof(ServerGeoContinentCode);
		///<summary>
		/// <para><c>server.geo.continent_name</c></para>
		/// <para>Name of the continent.</para>
		/// <example>North America</example>
		///</summary>
		public static string ServerGeoContinentName = nameof(ServerGeoContinentName);
		///<summary>
		/// <para><c>server.geo.country_iso_code</c></para>
		/// <para>Country ISO code.</para>
		/// <example>CA</example>
		///</summary>
		public static string ServerGeoCountryIsoCode = nameof(ServerGeoCountryIsoCode);
		///<summary>
		/// <para><c>server.geo.country_name</c></para>
		/// <para>Country name.</para>
		/// <example>Canada</example>
		///</summary>
		public static string ServerGeoCountryName = nameof(ServerGeoCountryName);
		///<summary>
		/// <para><c>server.geo.location</c></para>
		/// <para>Longitude and latitude.</para>
		/// <example>{ "lon": -73.614830, "lat": 45.505918 }</example>
		///</summary>
		public static string ServerGeoLocation = nameof(ServerGeoLocation);
		///<summary>
		/// <para><c>server.geo.name</c></para>
		/// <para>User-defined description of a location, at the level of granularity they care about.
		/// Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
		/// Not typically used in automated geolocation.</para>
		/// <example>boston-dc</example>
		///</summary>
		public static string ServerGeoName = nameof(ServerGeoName);
		///<summary>
		/// <para><c>server.geo.postal_code</c></para>
		/// <para>Postal code associated with the location.
		/// Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.</para>
		/// <example>94040</example>
		///</summary>
		public static string ServerGeoPostalCode = nameof(ServerGeoPostalCode);
		///<summary>
		/// <para><c>server.geo.region_iso_code</c></para>
		/// <para>Region ISO code.</para>
		/// <example>CA-QC</example>
		///</summary>
		public static string ServerGeoRegionIsoCode = nameof(ServerGeoRegionIsoCode);
		///<summary>
		/// <para><c>server.geo.region_name</c></para>
		/// <para>Region name.</para>
		/// <example>Quebec</example>
		///</summary>
		public static string ServerGeoRegionName = nameof(ServerGeoRegionName);
		///<summary>
		/// <para><c>server.geo.timezone</c></para>
		/// <para>The time zone of the location, such as IANA time zone name.</para>
		/// <example>America/Argentina/Buenos_Aires</example>
		///</summary>
		public static string ServerGeoTimezone = nameof(ServerGeoTimezone);
		///<summary>
		/// <para><c>server.user.domain</c></para>
		/// <para>Name of the directory the user is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string ServerUserDomain = nameof(ServerUserDomain);
		///<summary>
		/// <para><c>server.user.email</c></para>
		/// <para>User email address.</para>
		/// <example></example>
		///</summary>
		public static string ServerUserEmail = nameof(ServerUserEmail);
		///<summary>
		/// <para><c>server.user.full_name</c></para>
		/// <para>User's full name, if available.</para>
		/// <example>Albert Einstein</example>
		///</summary>
		public static string ServerUserFullName = nameof(ServerUserFullName);
		///<summary>
		/// <para><c>server.user.hash</c></para>
		/// <para>Unique user hash to correlate information for a user in anonymized form.
		/// Useful if `user.id` or `user.name` contain confidential information and cannot be used.</para>
		/// <example></example>
		///</summary>
		public static string ServerUserHash = nameof(ServerUserHash);
		///<summary>
		/// <para><c>server.user.id</c></para>
		/// <para>Unique identifier of the user.</para>
		/// <example>S-1-5-21-202424912787-2692429404-2351956786-1000</example>
		///</summary>
		public static string ServerUserId = nameof(ServerUserId);
		///<summary>
		/// <para><c>server.user.name</c></para>
		/// <para>Short name or login of the user.</para>
		/// <example>a.einstein</example>
		///</summary>
		public static string ServerUserName = nameof(ServerUserName);
		///<summary>
		/// <para><c>server.user.group.domain</c></para>
		/// <para>Name of the directory the group is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string ServerUserGroupDomain = nameof(ServerUserGroupDomain);
		///<summary>
		/// <para><c>server.user.group.id</c></para>
		/// <para>Unique identifier for the group on the system/platform.</para>
		/// <example></example>
		///</summary>
		public static string ServerUserGroupId = nameof(ServerUserGroupId);
		///<summary>
		/// <para><c>server.user.group.name</c></para>
		/// <para>Name of the group.</para>
		/// <example></example>
		///</summary>
		public static string ServerUserGroupName = nameof(ServerUserGroupName);
		///<summary>
		/// <para><c>server.user.risk.calculated_level</c></para>
		/// <para>A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>High</example>
		///</summary>
		public static string ServerUserRiskCalculatedLevel = nameof(ServerUserRiskCalculatedLevel);
		///<summary>
		/// <para><c>server.user.risk.calculated_score</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>880.73</example>
		///</summary>
		public static string ServerUserRiskCalculatedScore = nameof(ServerUserRiskCalculatedScore);
		///<summary>
		/// <para><c>server.user.risk.calculated_score_norm</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.</para>
		/// <example>88.73</example>
		///</summary>
		public static string ServerUserRiskCalculatedScoreNorm = nameof(ServerUserRiskCalculatedScoreNorm);
		///<summary>
		/// <para><c>server.user.risk.static_level</c></para>
		/// <para>A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>High</example>
		///</summary>
		public static string ServerUserRiskStaticLevel = nameof(ServerUserRiskStaticLevel);
		///<summary>
		/// <para><c>server.user.risk.static_score</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>830.0</example>
		///</summary>
		public static string ServerUserRiskStaticScore = nameof(ServerUserRiskStaticScore);
		///<summary>
		/// <para><c>server.user.risk.static_score_norm</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.</para>
		/// <example>83.0</example>
		///</summary>
		public static string ServerUserRiskStaticScoreNorm = nameof(ServerUserRiskStaticScoreNorm);
		///<summary>
		/// <para><c>service.address</c></para>
		/// <para>Address where data about this service was collected from.
		/// This should be a URI, network address (ipv4:port or [ipv6]:port) or a resource path (sockets).</para>
		/// <example>172.26.0.2:5432</example>
		///</summary>
		public static string ServiceAddress = nameof(ServiceAddress);
		///<summary>
		/// <para><c>service.environment</c></para>
		/// <para>Identifies the environment where the service is running.
		/// If the same service runs in different environments (production, staging, QA, development, etc.), the environment can identify other instances of the same service. Can also group services and applications from the same environment.
		/// <para><br/>This field is beta and subject to change.</para></para>
		/// <example>production</example>
		///</summary>
		public static string ServiceEnvironment = nameof(ServiceEnvironment);
		///<summary>
		/// <para><c>service.ephemeral_id</c></para>
		/// <para>Ephemeral identifier of this service (if one exists).
		/// This id normally changes across restarts, but `service.id` does not.</para>
		/// <example>8a4f500f</example>
		///</summary>
		public static string ServiceEphemeralId = nameof(ServiceEphemeralId);
		///<summary>
		/// <para><c>service.id</c></para>
		/// <para>Unique identifier of the running service. If the service is comprised of many nodes, the `service.id` should be the same for all nodes.
		/// This id should uniquely identify the service. This makes it possible to correlate logs and metrics for one specific service, no matter which particular node emitted the event.
		/// Note that if you need to see the events from one specific host of the service, you should filter on that `host.name` or `host.id` instead.</para>
		/// <example>d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6</example>
		///</summary>
		public static string ServiceId = nameof(ServiceId);
		///<summary>
		/// <para><c>service.name</c></para>
		/// <para>Name of the service data is collected from.
		/// The name of the service is normally user given. This allows for distributed services that run on multiple hosts to correlate the related instances based on the name.
		/// In the case of Elasticsearch the `service.name` could contain the cluster name. For Beats the `service.name` is by default a copy of the `service.type` field if no name is specified.</para>
		/// <example>elasticsearch-metrics</example>
		///</summary>
		public static string ServiceName = nameof(ServiceName);
		///<summary>
		/// <para><c>service.node.name</c></para>
		/// <para>Name of a service node.
		/// This allows for two nodes of the same service running on the same host to be differentiated. Therefore, `service.node.name` should typically be unique across nodes of a given service.
		/// In the case of Elasticsearch, the `service.node.name` could contain the unique node name within the Elasticsearch cluster. In cases where the service doesn't have the concept of a node name, the host name or container name can be used to distinguish running instances that make up this service. If those do not provide uniqueness (e.g. multiple instances of the service running on the same host) - the node name can be manually set.</para>
		/// <example>instance-0000000016</example>
		///</summary>
		public static string ServiceNodeName = nameof(ServiceNodeName);
		///<summary>
		/// <para><c>service.node.role</c></para>
		/// <para>Deprecated for removal in next major version release. This field will be superseded by `node.roles`.
		/// Role of a service node.
		/// This allows for distinction between different running roles of the same service.
		/// In the case of Kibana, the `service.node.role` could be `ui` or `background_tasks`.
		/// In the case of Elasticsearch, the `service.node.role` could be `master` or `data`.
		/// Other services could use this to distinguish between a `web` and `worker` role running as part of the service.</para>
		/// <example>background_tasks</example>
		///</summary>
		public static string ServiceNodeRole = nameof(ServiceNodeRole);
		///<summary>
		/// <para><c>service.state</c></para>
		/// <para>Current state of the service.</para>
		/// <example></example>
		///</summary>
		public static string ServiceState = nameof(ServiceState);
		///<summary>
		/// <para><c>service.type</c></para>
		/// <para>The type of the service data is collected from.
		/// The type can be used to group and correlate logs and metrics from one service type.
		/// Example: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`.</para>
		/// <example>elasticsearch</example>
		///</summary>
		public static string ServiceType = nameof(ServiceType);
		///<summary>
		/// <para><c>service.version</c></para>
		/// <para>Version of the service the data was collected from.
		/// This allows to look at a data set only for a specific version of a service.</para>
		/// <example>3.2.4</example>
		///</summary>
		public static string ServiceVersion = nameof(ServiceVersion);
		///<summary>
		/// <para><c>source.address</c></para>
		/// <para>Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
		/// Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.</para>
		/// <example></example>
		///</summary>
		public static string SourceAddress = nameof(SourceAddress);
		///<summary>
		/// <para><c>source.bytes</c></para>
		/// <para>Bytes sent from the source to the destination.</para>
		/// <example>184</example>
		///</summary>
		public static string SourceBytes = nameof(SourceBytes);
		///<summary>
		/// <para><c>source.domain</c></para>
		/// <para>The domain name of the source system.
		/// This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.</para>
		/// <example>foo.example.com</example>
		///</summary>
		public static string SourceDomain = nameof(SourceDomain);
		///<summary>
		/// <para><c>source.ip</c></para>
		/// <para>IP address of the source (IPv4 or IPv6).</para>
		/// <example></example>
		///</summary>
		public static string SourceIp = nameof(SourceIp);
		///<summary>
		/// <para><c>source.mac</c></para>
		/// <para>MAC address of the source.
		/// The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
		/// <para>pattern: </para></para>
		/// <example>00-00-5E-00-53-23</example>
		///</summary>
		public static string SourceMac = nameof(SourceMac);
		///<summary>
		/// <para><c>source.nat.ip</c></para>
		/// <para>Translated ip of source based NAT sessions (e.g. internal client to internet)
		/// Typically connections traversing load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		public static string SourceNatIp = nameof(SourceNatIp);
		///<summary>
		/// <para><c>source.nat.port</c></para>
		/// <para>Translated port of source based NAT sessions. (e.g. internal client to internet)
		/// Typically used with load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		public static string SourceNatPort = nameof(SourceNatPort);
		///<summary>
		/// <para><c>source.packets</c></para>
		/// <para>Packets sent from the source to the destination.</para>
		/// <example>12</example>
		///</summary>
		public static string SourcePackets = nameof(SourcePackets);
		///<summary>
		/// <para><c>source.port</c></para>
		/// <para>Port of the source.</para>
		/// <example></example>
		///</summary>
		public static string SourcePort = nameof(SourcePort);
		///<summary>
		/// <para><c>source.registered_domain</c></para>
		/// <para>The highest registered source domain, stripped of the subdomain.
		/// For example, the registered domain for "foo.example.com" is "example.com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".</para>
		/// <example>example.com</example>
		///</summary>
		public static string SourceRegisteredDomain = nameof(SourceRegisteredDomain);
		///<summary>
		/// <para><c>source.subdomain</c></para>
		/// <para>The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
		/// For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.</para>
		/// <example>east</example>
		///</summary>
		public static string SourceSubdomain = nameof(SourceSubdomain);
		///<summary>
		/// <para><c>source.top_level_domain</c></para>
		/// <para>The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".</para>
		/// <example>co.uk</example>
		///</summary>
		public static string SourceTopLevelDomain = nameof(SourceTopLevelDomain);
		///<summary>
		/// <para><c>source.as.number</c></para>
		/// <para>Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.</para>
		/// <example>15169</example>
		///</summary>
		public static string SourceAsNumber = nameof(SourceAsNumber);
		///<summary>
		/// <para><c>source.as.organization.name</c></para>
		/// <para>Organization name.</para>
		/// <example>Google LLC</example>
		///</summary>
		public static string SourceAsOrganizationName = nameof(SourceAsOrganizationName);
		///<summary>
		/// <para><c>source.geo.city_name</c></para>
		/// <para>City name.</para>
		/// <example>Montreal</example>
		///</summary>
		public static string SourceGeoCityName = nameof(SourceGeoCityName);
		///<summary>
		/// <para><c>source.geo.continent_code</c></para>
		/// <para>Two-letter code representing continent's name.</para>
		/// <example>NA</example>
		///</summary>
		public static string SourceGeoContinentCode = nameof(SourceGeoContinentCode);
		///<summary>
		/// <para><c>source.geo.continent_name</c></para>
		/// <para>Name of the continent.</para>
		/// <example>North America</example>
		///</summary>
		public static string SourceGeoContinentName = nameof(SourceGeoContinentName);
		///<summary>
		/// <para><c>source.geo.country_iso_code</c></para>
		/// <para>Country ISO code.</para>
		/// <example>CA</example>
		///</summary>
		public static string SourceGeoCountryIsoCode = nameof(SourceGeoCountryIsoCode);
		///<summary>
		/// <para><c>source.geo.country_name</c></para>
		/// <para>Country name.</para>
		/// <example>Canada</example>
		///</summary>
		public static string SourceGeoCountryName = nameof(SourceGeoCountryName);
		///<summary>
		/// <para><c>source.geo.location</c></para>
		/// <para>Longitude and latitude.</para>
		/// <example>{ "lon": -73.614830, "lat": 45.505918 }</example>
		///</summary>
		public static string SourceGeoLocation = nameof(SourceGeoLocation);
		///<summary>
		/// <para><c>source.geo.name</c></para>
		/// <para>User-defined description of a location, at the level of granularity they care about.
		/// Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
		/// Not typically used in automated geolocation.</para>
		/// <example>boston-dc</example>
		///</summary>
		public static string SourceGeoName = nameof(SourceGeoName);
		///<summary>
		/// <para><c>source.geo.postal_code</c></para>
		/// <para>Postal code associated with the location.
		/// Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.</para>
		/// <example>94040</example>
		///</summary>
		public static string SourceGeoPostalCode = nameof(SourceGeoPostalCode);
		///<summary>
		/// <para><c>source.geo.region_iso_code</c></para>
		/// <para>Region ISO code.</para>
		/// <example>CA-QC</example>
		///</summary>
		public static string SourceGeoRegionIsoCode = nameof(SourceGeoRegionIsoCode);
		///<summary>
		/// <para><c>source.geo.region_name</c></para>
		/// <para>Region name.</para>
		/// <example>Quebec</example>
		///</summary>
		public static string SourceGeoRegionName = nameof(SourceGeoRegionName);
		///<summary>
		/// <para><c>source.geo.timezone</c></para>
		/// <para>The time zone of the location, such as IANA time zone name.</para>
		/// <example>America/Argentina/Buenos_Aires</example>
		///</summary>
		public static string SourceGeoTimezone = nameof(SourceGeoTimezone);
		///<summary>
		/// <para><c>source.user.domain</c></para>
		/// <para>Name of the directory the user is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string SourceUserDomain = nameof(SourceUserDomain);
		///<summary>
		/// <para><c>source.user.email</c></para>
		/// <para>User email address.</para>
		/// <example></example>
		///</summary>
		public static string SourceUserEmail = nameof(SourceUserEmail);
		///<summary>
		/// <para><c>source.user.full_name</c></para>
		/// <para>User's full name, if available.</para>
		/// <example>Albert Einstein</example>
		///</summary>
		public static string SourceUserFullName = nameof(SourceUserFullName);
		///<summary>
		/// <para><c>source.user.hash</c></para>
		/// <para>Unique user hash to correlate information for a user in anonymized form.
		/// Useful if `user.id` or `user.name` contain confidential information and cannot be used.</para>
		/// <example></example>
		///</summary>
		public static string SourceUserHash = nameof(SourceUserHash);
		///<summary>
		/// <para><c>source.user.id</c></para>
		/// <para>Unique identifier of the user.</para>
		/// <example>S-1-5-21-202424912787-2692429404-2351956786-1000</example>
		///</summary>
		public static string SourceUserId = nameof(SourceUserId);
		///<summary>
		/// <para><c>source.user.name</c></para>
		/// <para>Short name or login of the user.</para>
		/// <example>a.einstein</example>
		///</summary>
		public static string SourceUserName = nameof(SourceUserName);
		///<summary>
		/// <para><c>source.user.group.domain</c></para>
		/// <para>Name of the directory the group is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string SourceUserGroupDomain = nameof(SourceUserGroupDomain);
		///<summary>
		/// <para><c>source.user.group.id</c></para>
		/// <para>Unique identifier for the group on the system/platform.</para>
		/// <example></example>
		///</summary>
		public static string SourceUserGroupId = nameof(SourceUserGroupId);
		///<summary>
		/// <para><c>source.user.group.name</c></para>
		/// <para>Name of the group.</para>
		/// <example></example>
		///</summary>
		public static string SourceUserGroupName = nameof(SourceUserGroupName);
		///<summary>
		/// <para><c>source.user.risk.calculated_level</c></para>
		/// <para>A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>High</example>
		///</summary>
		public static string SourceUserRiskCalculatedLevel = nameof(SourceUserRiskCalculatedLevel);
		///<summary>
		/// <para><c>source.user.risk.calculated_score</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>880.73</example>
		///</summary>
		public static string SourceUserRiskCalculatedScore = nameof(SourceUserRiskCalculatedScore);
		///<summary>
		/// <para><c>source.user.risk.calculated_score_norm</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.</para>
		/// <example>88.73</example>
		///</summary>
		public static string SourceUserRiskCalculatedScoreNorm = nameof(SourceUserRiskCalculatedScoreNorm);
		///<summary>
		/// <para><c>source.user.risk.static_level</c></para>
		/// <para>A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>High</example>
		///</summary>
		public static string SourceUserRiskStaticLevel = nameof(SourceUserRiskStaticLevel);
		///<summary>
		/// <para><c>source.user.risk.static_score</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>830.0</example>
		///</summary>
		public static string SourceUserRiskStaticScore = nameof(SourceUserRiskStaticScore);
		///<summary>
		/// <para><c>source.user.risk.static_score_norm</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.</para>
		/// <example>83.0</example>
		///</summary>
		public static string SourceUserRiskStaticScoreNorm = nameof(SourceUserRiskStaticScoreNorm);
		///<summary>
		/// <para><c>threat.feed.dashboard_id</c></para>
		/// <para>The saved object ID of the dashboard belonging to the threat feed for displaying dashboard links to threat feeds in Kibana.</para>
		/// <example>5ba16340-72e6-11eb-a3e3-b3cc7c78a70f</example>
		///</summary>
		public static string ThreatFeedDashboardId = nameof(ThreatFeedDashboardId);
		///<summary>
		/// <para><c>threat.feed.description</c></para>
		/// <para>Description of the threat feed in a UI friendly format.</para>
		/// <example>Threat feed from the AlienVault Open Threat eXchange network.</example>
		///</summary>
		public static string ThreatFeedDescription = nameof(ThreatFeedDescription);
		///<summary>
		/// <para><c>threat.feed.name</c></para>
		/// <para>The name of the threat feed in UI friendly format.</para>
		/// <example>AlienVault OTX</example>
		///</summary>
		public static string ThreatFeedName = nameof(ThreatFeedName);
		///<summary>
		/// <para><c>threat.feed.reference</c></para>
		/// <para>Reference information for the threat feed in a UI friendly format.</para>
		/// <example>https://otx.alienvault.com</example>
		///</summary>
		public static string ThreatFeedReference = nameof(ThreatFeedReference);
		///<summary>
		/// <para><c>threat.framework</c></para>
		/// <para>Name of the threat framework used to further categorize and classify the tactic and technique of the reported threat. Framework classification can be provided by detecting systems, evaluated at ingest time, or retrospectively tagged to events.</para>
		/// <example>MITRE ATT&amp;CK</example>
		///</summary>
		public static string ThreatFramework = nameof(ThreatFramework);
		///<summary>
		/// <para><c>threat.group.id</c></para>
		/// <para>The id of the group for a set of related intrusion activity that are tracked by a common name in the security community.
		/// While not required, you can use a MITRE ATT&amp;CKÂ® group id.</para>
		/// <example>G0037</example>
		///</summary>
		public static string ThreatGroupId = nameof(ThreatGroupId);
		///<summary>
		/// <para><c>threat.group.name</c></para>
		/// <para>The name of the group for a set of related intrusion activity that are tracked by a common name in the security community.
		/// While not required, you can use a MITRE ATT&amp;CKÂ® group name.</para>
		/// <example>FIN6</example>
		///</summary>
		public static string ThreatGroupName = nameof(ThreatGroupName);
		///<summary>
		/// <para><c>threat.group.reference</c></para>
		/// <para>The reference URL of the group for a set of related intrusion activity that are tracked by a common name in the security community.
		/// While not required, you can use a MITRE ATT&amp;CKÂ® group reference URL.</para>
		/// <example>https://attack.mitre.org/groups/G0037/</example>
		///</summary>
		public static string ThreatGroupReference = nameof(ThreatGroupReference);
		///<summary>
		/// <para><c>threat.indicator.confidence</c></para>
		/// <para>Identifies the vendor-neutral confidence rating using the None/Low/Medium/High scale defined in Appendix A of the STIX 2.1 framework. Vendor-specific confidence scales may be added as custom fields.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>Not Specified</item>
		/// <item>None</item>
		/// <item>Low</item>
		/// <item>Medium</item>
		/// <item>High</item>
		/// </list></para>
		/// <example>Medium</example>
		///</summary>
		public static string ThreatIndicatorConfidence = nameof(ThreatIndicatorConfidence);
		///<summary>
		/// <para><c>threat.indicator.description</c></para>
		/// <para>Describes the type of action conducted by the threat.</para>
		/// <example>IP x.x.x.x was observed delivering the Angler EK.</example>
		///</summary>
		public static string ThreatIndicatorDescription = nameof(ThreatIndicatorDescription);
		///<summary>
		/// <para><c>threat.indicator.email.address</c></para>
		/// <para>Identifies a threat indicator as an email address (irrespective of direction).</para>
		/// <example>phish@example.com</example>
		///</summary>
		public static string ThreatIndicatorEmailAddress = nameof(ThreatIndicatorEmailAddress);
		///<summary>
		/// <para><c>threat.indicator.first_seen</c></para>
		/// <para>The date and time when intelligence source first reported sighting this indicator.</para>
		/// <example>11/5/2020 5:25:47â€¯PM</example>
		///</summary>
		public static string ThreatIndicatorFirstSeen = nameof(ThreatIndicatorFirstSeen);
		///<summary>
		/// <para><c>threat.indicator.ip</c></para>
		/// <para>Identifies a threat indicator as an IP address (irrespective of direction).</para>
		/// <example>1.2.3.4</example>
		///</summary>
		public static string ThreatIndicatorIp = nameof(ThreatIndicatorIp);
		///<summary>
		/// <para><c>threat.indicator.last_seen</c></para>
		/// <para>The date and time when intelligence source last reported sighting this indicator.</para>
		/// <example>11/5/2020 5:25:47â€¯PM</example>
		///</summary>
		public static string ThreatIndicatorLastSeen = nameof(ThreatIndicatorLastSeen);
		///<summary>
		/// <para><c>threat.indicator.marking.tlp</c></para>
		/// <para>Traffic Light Protocol sharing markings.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>WHITE</item>
		/// <item>CLEAR</item>
		/// <item>GREEN</item>
		/// <item>AMBER</item>
		/// <item>AMBER+STRICT</item>
		/// <item>RED</item>
		/// </list></para>
		/// <example>CLEAR</example>
		///</summary>
		public static string ThreatIndicatorMarkingTlp = nameof(ThreatIndicatorMarkingTlp);
		///<summary>
		/// <para><c>threat.indicator.marking.tlp_version</c></para>
		/// <para>Traffic Light Protocol version.</para>
		/// <example>2.0</example>
		///</summary>
		public static string ThreatIndicatorMarkingTlpVersion = nameof(ThreatIndicatorMarkingTlpVersion);
		///<summary>
		/// <para><c>threat.indicator.modified_at</c></para>
		/// <para>The date and time when intelligence source last modified information for this indicator.</para>
		/// <example>11/5/2020 5:25:47â€¯PM</example>
		///</summary>
		public static string ThreatIndicatorModifiedAt = nameof(ThreatIndicatorModifiedAt);
		///<summary>
		/// <para><c>threat.indicator.name</c></para>
		/// <para>The display name indicator in an UI friendly format
		/// URL, IP address, email address, registry key, port number, hash value, or other relevant name can serve as the display name.</para>
		/// <example>5.2.75.227</example>
		///</summary>
		public static string ThreatIndicatorName = nameof(ThreatIndicatorName);
		///<summary>
		/// <para><c>threat.indicator.port</c></para>
		/// <para>Identifies a threat indicator as a port number (irrespective of direction).</para>
		/// <example>443</example>
		///</summary>
		public static string ThreatIndicatorPort = nameof(ThreatIndicatorPort);
		///<summary>
		/// <para><c>threat.indicator.provider</c></para>
		/// <para>The name of the indicator's provider.</para>
		/// <example>lrz_urlhaus</example>
		///</summary>
		public static string ThreatIndicatorProvider = nameof(ThreatIndicatorProvider);
		///<summary>
		/// <para><c>threat.indicator.reference</c></para>
		/// <para>Reference URL linking to additional information about this indicator.</para>
		/// <example>https://system.example.com/indicator/0001234</example>
		///</summary>
		public static string ThreatIndicatorReference = nameof(ThreatIndicatorReference);
		///<summary>
		/// <para><c>threat.indicator.scanner_stats</c></para>
		/// <para>Count of AV/EDR vendors that successfully detected malicious file or URL.</para>
		/// <example>4</example>
		///</summary>
		public static string ThreatIndicatorScannerStats = nameof(ThreatIndicatorScannerStats);
		///<summary>
		/// <para><c>threat.indicator.sightings</c></para>
		/// <para>Number of times this indicator was observed conducting threat activity.</para>
		/// <example>20</example>
		///</summary>
		public static string ThreatIndicatorSightings = nameof(ThreatIndicatorSightings);
		///<summary>
		/// <para><c>threat.indicator.type</c></para>
		/// <para>Type of indicator as represented by Cyber Observable in STIX 2.0.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>autonomous-system</item>
		/// <item>artifact</item>
		/// <item>directory</item>
		/// <item>domain-name</item>
		/// <item>email-addr</item>
		/// <item>file</item>
		/// <item>ipv4-addr</item>
		/// <item>ipv6-addr</item>
		/// <item>mac-addr</item>
		/// <item>mutex</item>
		/// <item>port</item>
		/// <item>process</item>
		/// <item>software</item>
		/// <item>url</item>
		/// <item>user-account</item>
		/// <item>windows-registry-key</item>
		/// <item>x509-certificate</item>
		/// </list></para>
		/// <example>ipv4-addr</example>
		///</summary>
		public static string ThreatIndicatorType = nameof(ThreatIndicatorType);
		///<summary>
		/// <para><c>threat.software.id</c></para>
		/// <para>The id of the software used by this threat to conduct behavior commonly modeled using MITRE ATT&amp;CKÂ®.
		/// While not required, you can use a MITRE ATT&amp;CKÂ® software id.</para>
		/// <example>S0552</example>
		///</summary>
		public static string ThreatSoftwareId = nameof(ThreatSoftwareId);
		///<summary>
		/// <para><c>threat.software.name</c></para>
		/// <para>The name of the software used by this threat to conduct behavior commonly modeled using MITRE ATT&amp;CKÂ®.
		/// While not required, you can use a MITRE ATT&amp;CKÂ® software name.</para>
		/// <example>AdFind</example>
		///</summary>
		public static string ThreatSoftwareName = nameof(ThreatSoftwareName);
		///<summary>
		/// <para><c>threat.software.reference</c></para>
		/// <para>The reference URL of the software used by this threat to conduct behavior commonly modeled using MITRE ATT&amp;CKÂ®.
		/// While not required, you can use a MITRE ATT&amp;CKÂ® software reference URL.</para>
		/// <example>https://attack.mitre.org/software/S0552/</example>
		///</summary>
		public static string ThreatSoftwareReference = nameof(ThreatSoftwareReference);
		///<summary>
		/// <para><c>threat.software.type</c></para>
		/// <para>The type of software used by this threat to conduct behavior commonly modeled using MITRE ATT&amp;CKÂ®.
		/// While not required, you can use a MITRE ATT&amp;CKÂ® software type.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>Malware</item>
		/// <item>Tool</item>
		/// </list></para>
		/// <example>Tool</example>
		///</summary>
		public static string ThreatSoftwareType = nameof(ThreatSoftwareType);
		///<summary>
		/// <para><c>threat.indicator.x509.issuer.distinguished_name</c></para>
		/// <para>Distinguished name (DN) of issuing certificate authority.</para>
		/// <example>C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2 High Assurance Server CA</example>
		///</summary>
		public static string ThreatIndicatorX509IssuerDistinguishedName = nameof(ThreatIndicatorX509IssuerDistinguishedName);
		///<summary>
		/// <para><c>threat.indicator.x509.not_after</c></para>
		/// <para>Time at which the certificate is no longer considered valid.</para>
		/// <example>7/16/2020 3:15:39â€¯AM</example>
		///</summary>
		public static string ThreatIndicatorX509NotAfter = nameof(ThreatIndicatorX509NotAfter);
		///<summary>
		/// <para><c>threat.indicator.x509.not_before</c></para>
		/// <para>Time at which the certificate is first considered valid.</para>
		/// <example>8/16/2019 1:40:25â€¯AM</example>
		///</summary>
		public static string ThreatIndicatorX509NotBefore = nameof(ThreatIndicatorX509NotBefore);
		///<summary>
		/// <para><c>threat.indicator.x509.public_key_algorithm</c></para>
		/// <para>Algorithm used to generate the public key.</para>
		/// <example>RSA</example>
		///</summary>
		public static string ThreatIndicatorX509PublicKeyAlgorithm = nameof(ThreatIndicatorX509PublicKeyAlgorithm);
		///<summary>
		/// <para><c>threat.indicator.x509.public_key_curve</c></para>
		/// <para>The curve used by the elliptic curve public key algorithm. This is algorithm specific.</para>
		/// <example>nistp521</example>
		///</summary>
		public static string ThreatIndicatorX509PublicKeyCurve = nameof(ThreatIndicatorX509PublicKeyCurve);
		///<summary>
		/// <para><c>threat.indicator.x509.public_key_exponent</c></para>
		/// <para>Exponent used to derive the public key. This is algorithm specific.
		/// <para><br/>Stored but not available for search in Elasticsearch by default</para></para>
		/// <example>65537</example>
		///</summary>
		public static string ThreatIndicatorX509PublicKeyExponent = nameof(ThreatIndicatorX509PublicKeyExponent);
		///<summary>
		/// <para><c>threat.indicator.x509.public_key_size</c></para>
		/// <para>The size of the public key space in bits.</para>
		/// <example>2048</example>
		///</summary>
		public static string ThreatIndicatorX509PublicKeySize = nameof(ThreatIndicatorX509PublicKeySize);
		///<summary>
		/// <para><c>threat.indicator.x509.serial_number</c></para>
		/// <para>Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.</para>
		/// <example>55FBB9C7DEBF09809D12CCAA</example>
		///</summary>
		public static string ThreatIndicatorX509SerialNumber = nameof(ThreatIndicatorX509SerialNumber);
		///<summary>
		/// <para><c>threat.indicator.x509.signature_algorithm</c></para>
		/// <para>Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.</para>
		/// <example>SHA256-RSA</example>
		///</summary>
		public static string ThreatIndicatorX509SignatureAlgorithm = nameof(ThreatIndicatorX509SignatureAlgorithm);
		///<summary>
		/// <para><c>threat.indicator.x509.subject.distinguished_name</c></para>
		/// <para>Distinguished name (DN) of the certificate subject entity.</para>
		/// <example>C=US, ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net</example>
		///</summary>
		public static string ThreatIndicatorX509SubjectDistinguishedName = nameof(ThreatIndicatorX509SubjectDistinguishedName);
		///<summary>
		/// <para><c>threat.indicator.x509.version_number</c></para>
		/// <para>Version of x509 format.</para>
		/// <example>3</example>
		///</summary>
		public static string ThreatIndicatorX509VersionNumber = nameof(ThreatIndicatorX509VersionNumber);
		///<summary>
		/// <para><c>threat.indicator.as.number</c></para>
		/// <para>Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.</para>
		/// <example>15169</example>
		///</summary>
		public static string ThreatIndicatorAsNumber = nameof(ThreatIndicatorAsNumber);
		///<summary>
		/// <para><c>threat.indicator.as.organization.name</c></para>
		/// <para>Organization name.</para>
		/// <example>Google LLC</example>
		///</summary>
		public static string ThreatIndicatorAsOrganizationName = nameof(ThreatIndicatorAsOrganizationName);
		///<summary>
		/// <para><c>threat.indicator.file.accessed</c></para>
		/// <para>Last time the file was accessed.
		/// Note that not all filesystems keep track of access time.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileAccessed = nameof(ThreatIndicatorFileAccessed);
		///<summary>
		/// <para><c>threat.indicator.file.created</c></para>
		/// <para>File creation time.
		/// Note that not all filesystems store the creation time.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileCreated = nameof(ThreatIndicatorFileCreated);
		///<summary>
		/// <para><c>threat.indicator.file.ctime</c></para>
		/// <para>Last time the file attributes or metadata changed.
		/// Note that changes to the file content will update `mtime`. This implies `ctime` will be adjusted at the same time, since `mtime` is an attribute of the file.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileCtime = nameof(ThreatIndicatorFileCtime);
		///<summary>
		/// <para><c>threat.indicator.file.device</c></para>
		/// <para>Device that is the source of the file.</para>
		/// <example>sda</example>
		///</summary>
		public static string ThreatIndicatorFileDevice = nameof(ThreatIndicatorFileDevice);
		///<summary>
		/// <para><c>threat.indicator.file.directory</c></para>
		/// <para>Directory where the file is located. It should include the drive letter, when appropriate.</para>
		/// <example>/home/alice</example>
		///</summary>
		public static string ThreatIndicatorFileDirectory = nameof(ThreatIndicatorFileDirectory);
		///<summary>
		/// <para><c>threat.indicator.file.drive_letter</c></para>
		/// <para>Drive letter where the file is located. This field is only relevant on Windows.
		/// The value should be uppercase, and not include the colon.</para>
		/// <example>C</example>
		///</summary>
		public static string ThreatIndicatorFileDriveLetter = nameof(ThreatIndicatorFileDriveLetter);
		///<summary>
		/// <para><c>threat.indicator.file.extension</c></para>
		/// <para>File extension, excluding the leading dot.
		/// Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").</para>
		/// <example>png</example>
		///</summary>
		public static string ThreatIndicatorFileExtension = nameof(ThreatIndicatorFileExtension);
		///<summary>
		/// <para><c>threat.indicator.file.fork_name</c></para>
		/// <para>A fork is additional data associated with a filesystem object.
		/// On Linux, a resource fork is used to store additional data with a filesystem object. A file always has at least one fork for the data portion, and additional forks may exist.
		/// On NTFS, this is analogous to an Alternate Data Stream (ADS), and the default data stream for a file is just called $DATA. Zone.Identifier is commonly used by Windows to track contents downloaded from the Internet. An ADS is typically of the form: `C:\path\to\filename.extension:some_fork_name`, and `some_fork_name` is the value that should populate `fork_name`. `filename.extension` should populate `file.name`, and `extension` should populate `file.extension`. The full path, `file.path`, will include the fork name.</para>
		/// <example>Zone.Identifer</example>
		///</summary>
		public static string ThreatIndicatorFileForkName = nameof(ThreatIndicatorFileForkName);
		///<summary>
		/// <para><c>threat.indicator.file.gid</c></para>
		/// <para>Primary group ID (GID) of the file.</para>
		/// <example>1001</example>
		///</summary>
		public static string ThreatIndicatorFileGid = nameof(ThreatIndicatorFileGid);
		///<summary>
		/// <para><c>threat.indicator.file.group</c></para>
		/// <para>Primary group name of the file.</para>
		/// <example>alice</example>
		///</summary>
		public static string ThreatIndicatorFileGroup = nameof(ThreatIndicatorFileGroup);
		///<summary>
		/// <para><c>threat.indicator.file.inode</c></para>
		/// <para>Inode representing the file in the filesystem.</para>
		/// <example>256383</example>
		///</summary>
		public static string ThreatIndicatorFileInode = nameof(ThreatIndicatorFileInode);
		///<summary>
		/// <para><c>threat.indicator.file.mime_type</c></para>
		/// <para>MIME type should identify the format of the file or stream of bytes using https://www.iana.org/assignments/media-types/media-types.xhtml[IANA official types], where possible. When more than one type is applicable, the most specific type should be used.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileMimeType = nameof(ThreatIndicatorFileMimeType);
		///<summary>
		/// <para><c>threat.indicator.file.mode</c></para>
		/// <para>Mode of the file in octal representation.</para>
		/// <example>0640</example>
		///</summary>
		public static string ThreatIndicatorFileMode = nameof(ThreatIndicatorFileMode);
		///<summary>
		/// <para><c>threat.indicator.file.mtime</c></para>
		/// <para>Last time the file content was modified.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileMtime = nameof(ThreatIndicatorFileMtime);
		///<summary>
		/// <para><c>threat.indicator.file.name</c></para>
		/// <para>Name of the file including the extension, without the directory.</para>
		/// <example>example.png</example>
		///</summary>
		public static string ThreatIndicatorFileName = nameof(ThreatIndicatorFileName);
		///<summary>
		/// <para><c>threat.indicator.file.owner</c></para>
		/// <para>File owner's username.</para>
		/// <example>alice</example>
		///</summary>
		public static string ThreatIndicatorFileOwner = nameof(ThreatIndicatorFileOwner);
		///<summary>
		/// <para><c>threat.indicator.file.path</c></para>
		/// <para>Full path to the file, including the file name. It should include the drive letter, when appropriate.</para>
		/// <example>/home/alice/example.png</example>
		///</summary>
		public static string ThreatIndicatorFilePath = nameof(ThreatIndicatorFilePath);
		///<summary>
		/// <para><c>threat.indicator.file.size</c></para>
		/// <para>File size in bytes.
		/// Only relevant when `file.type` is "file".</para>
		/// <example>16384</example>
		///</summary>
		public static string ThreatIndicatorFileSize = nameof(ThreatIndicatorFileSize);
		///<summary>
		/// <para><c>threat.indicator.file.target_path</c></para>
		/// <para>Target path for symlinks.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileTargetPath = nameof(ThreatIndicatorFileTargetPath);
		///<summary>
		/// <para><c>threat.indicator.file.type</c></para>
		/// <para>File type (file, dir, or symlink).</para>
		/// <example>file</example>
		///</summary>
		public static string ThreatIndicatorFileType = nameof(ThreatIndicatorFileType);
		///<summary>
		/// <para><c>threat.indicator.file.uid</c></para>
		/// <para>The user ID (UID) or security identifier (SID) of the file owner.</para>
		/// <example>1001</example>
		///</summary>
		public static string ThreatIndicatorFileUid = nameof(ThreatIndicatorFileUid);
		///<summary>
		/// <para><c>threat.indicator.file.hash.md5</c></para>
		/// <para>MD5 hash.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileHashMd5 = nameof(ThreatIndicatorFileHashMd5);
		///<summary>
		/// <para><c>threat.indicator.file.hash.sha1</c></para>
		/// <para>SHA1 hash.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileHashSha1 = nameof(ThreatIndicatorFileHashSha1);
		///<summary>
		/// <para><c>threat.indicator.file.hash.sha256</c></para>
		/// <para>SHA256 hash.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileHashSha256 = nameof(ThreatIndicatorFileHashSha256);
		///<summary>
		/// <para><c>threat.indicator.file.hash.sha384</c></para>
		/// <para>SHA384 hash.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileHashSha384 = nameof(ThreatIndicatorFileHashSha384);
		///<summary>
		/// <para><c>threat.indicator.file.hash.sha512</c></para>
		/// <para>SHA512 hash.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileHashSha512 = nameof(ThreatIndicatorFileHashSha512);
		///<summary>
		/// <para><c>threat.indicator.file.hash.ssdeep</c></para>
		/// <para>SSDEEP hash.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileHashSsdeep = nameof(ThreatIndicatorFileHashSsdeep);
		///<summary>
		/// <para><c>threat.indicator.file.hash.tlsh</c></para>
		/// <para>TLSH hash.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileHashTlsh = nameof(ThreatIndicatorFileHashTlsh);
		///<summary>
		/// <para><c>threat.indicator.file.pe.architecture</c></para>
		/// <para>CPU architecture target for the file.</para>
		/// <example>x64</example>
		///</summary>
		public static string ThreatIndicatorFilePeArchitecture = nameof(ThreatIndicatorFilePeArchitecture);
		///<summary>
		/// <para><c>threat.indicator.file.pe.company</c></para>
		/// <para>Internal company name of the file, provided at compile-time.</para>
		/// <example>Microsoft Corporation</example>
		///</summary>
		public static string ThreatIndicatorFilePeCompany = nameof(ThreatIndicatorFilePeCompany);
		///<summary>
		/// <para><c>threat.indicator.file.pe.description</c></para>
		/// <para>Internal description of the file, provided at compile-time.</para>
		/// <example>Paint</example>
		///</summary>
		public static string ThreatIndicatorFilePeDescription = nameof(ThreatIndicatorFilePeDescription);
		///<summary>
		/// <para><c>threat.indicator.file.pe.file_version</c></para>
		/// <para>Internal version of the file, provided at compile-time.</para>
		/// <example>6.3.9600.17415</example>
		///</summary>
		public static string ThreatIndicatorFilePeFileVersion = nameof(ThreatIndicatorFilePeFileVersion);
		///<summary>
		/// <para><c>threat.indicator.file.pe.go_import_hash</c></para>
		/// <para>A hash of the Go language imports in a PE file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// The algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).</para>
		/// <example>10bddcb4cee42080f76c88d9ff964491</example>
		///</summary>
		public static string ThreatIndicatorFilePeGoImportHash = nameof(ThreatIndicatorFilePeGoImportHash);
		///<summary>
		/// <para><c>threat.indicator.file.pe.go_imports</c></para>
		/// <para>List of imported Go language element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFilePeGoImports = nameof(ThreatIndicatorFilePeGoImports);
		///<summary>
		/// <para><c>threat.indicator.file.pe.go_imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFilePeGoImportsNamesEntropy = nameof(ThreatIndicatorFilePeGoImportsNamesEntropy);
		///<summary>
		/// <para><c>threat.indicator.file.pe.go_imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFilePeGoImportsNamesVarEntropy = nameof(ThreatIndicatorFilePeGoImportsNamesVarEntropy);
		///<summary>
		/// <para><c>threat.indicator.file.pe.go_stripped</c></para>
		/// <para>Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFilePeGoStripped = nameof(ThreatIndicatorFilePeGoStripped);
		///<summary>
		/// <para><c>threat.indicator.file.pe.imphash</c></para>
		/// <para>A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.</para>
		/// <example>0c6803c4e922103c4dca5963aad36ddf</example>
		///</summary>
		public static string ThreatIndicatorFilePeImphash = nameof(ThreatIndicatorFilePeImphash);
		///<summary>
		/// <para><c>threat.indicator.file.pe.import_hash</c></para>
		/// <para>A hash of the imports in a PE file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is a synonym for imphash.</para>
		/// <example>d41d8cd98f00b204e9800998ecf8427e</example>
		///</summary>
		public static string ThreatIndicatorFilePeImportHash = nameof(ThreatIndicatorFilePeImportHash);
		///<summary>
		/// <para><c>threat.indicator.file.pe.imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFilePeImportsNamesEntropy = nameof(ThreatIndicatorFilePeImportsNamesEntropy);
		///<summary>
		/// <para><c>threat.indicator.file.pe.imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFilePeImportsNamesVarEntropy = nameof(ThreatIndicatorFilePeImportsNamesVarEntropy);
		///<summary>
		/// <para><c>threat.indicator.file.pe.original_file_name</c></para>
		/// <para>Internal name of the file, provided at compile-time.</para>
		/// <example>MSPAINT.EXE</example>
		///</summary>
		public static string ThreatIndicatorFilePeOriginalFileName = nameof(ThreatIndicatorFilePeOriginalFileName);
		///<summary>
		/// <para><c>threat.indicator.file.pe.pehash</c></para>
		/// <para>A hash of the PE header and data from one or more PE sections. An pehash can be used to cluster files by transforming structural information about a file into a hash value.
		/// Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.</para>
		/// <example>73ff189b63cd6be375a7ff25179a38d347651975</example>
		///</summary>
		public static string ThreatIndicatorFilePePehash = nameof(ThreatIndicatorFilePePehash);
		///<summary>
		/// <para><c>threat.indicator.file.pe.product</c></para>
		/// <para>Internal product name of the file, provided at compile-time.</para>
		/// <example>MicrosoftÂ® WindowsÂ® Operating System</example>
		///</summary>
		public static string ThreatIndicatorFilePeProduct = nameof(ThreatIndicatorFilePeProduct);
		///<summary>
		/// <para><c>threat.indicator.file.x509.issuer.distinguished_name</c></para>
		/// <para>Distinguished name (DN) of issuing certificate authority.</para>
		/// <example>C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2 High Assurance Server CA</example>
		///</summary>
		public static string ThreatIndicatorFileX509IssuerDistinguishedName = nameof(ThreatIndicatorFileX509IssuerDistinguishedName);
		///<summary>
		/// <para><c>threat.indicator.file.x509.not_after</c></para>
		/// <para>Time at which the certificate is no longer considered valid.</para>
		/// <example>7/16/2020 3:15:39â€¯AM</example>
		///</summary>
		public static string ThreatIndicatorFileX509NotAfter = nameof(ThreatIndicatorFileX509NotAfter);
		///<summary>
		/// <para><c>threat.indicator.file.x509.not_before</c></para>
		/// <para>Time at which the certificate is first considered valid.</para>
		/// <example>8/16/2019 1:40:25â€¯AM</example>
		///</summary>
		public static string ThreatIndicatorFileX509NotBefore = nameof(ThreatIndicatorFileX509NotBefore);
		///<summary>
		/// <para><c>threat.indicator.file.x509.public_key_algorithm</c></para>
		/// <para>Algorithm used to generate the public key.</para>
		/// <example>RSA</example>
		///</summary>
		public static string ThreatIndicatorFileX509PublicKeyAlgorithm = nameof(ThreatIndicatorFileX509PublicKeyAlgorithm);
		///<summary>
		/// <para><c>threat.indicator.file.x509.public_key_curve</c></para>
		/// <para>The curve used by the elliptic curve public key algorithm. This is algorithm specific.</para>
		/// <example>nistp521</example>
		///</summary>
		public static string ThreatIndicatorFileX509PublicKeyCurve = nameof(ThreatIndicatorFileX509PublicKeyCurve);
		///<summary>
		/// <para><c>threat.indicator.file.x509.public_key_exponent</c></para>
		/// <para>Exponent used to derive the public key. This is algorithm specific.
		/// <para><br/>Stored but not available for search in Elasticsearch by default</para></para>
		/// <example>65537</example>
		///</summary>
		public static string ThreatIndicatorFileX509PublicKeyExponent = nameof(ThreatIndicatorFileX509PublicKeyExponent);
		///<summary>
		/// <para><c>threat.indicator.file.x509.public_key_size</c></para>
		/// <para>The size of the public key space in bits.</para>
		/// <example>2048</example>
		///</summary>
		public static string ThreatIndicatorFileX509PublicKeySize = nameof(ThreatIndicatorFileX509PublicKeySize);
		///<summary>
		/// <para><c>threat.indicator.file.x509.serial_number</c></para>
		/// <para>Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.</para>
		/// <example>55FBB9C7DEBF09809D12CCAA</example>
		///</summary>
		public static string ThreatIndicatorFileX509SerialNumber = nameof(ThreatIndicatorFileX509SerialNumber);
		///<summary>
		/// <para><c>threat.indicator.file.x509.signature_algorithm</c></para>
		/// <para>Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.</para>
		/// <example>SHA256-RSA</example>
		///</summary>
		public static string ThreatIndicatorFileX509SignatureAlgorithm = nameof(ThreatIndicatorFileX509SignatureAlgorithm);
		///<summary>
		/// <para><c>threat.indicator.file.x509.subject.distinguished_name</c></para>
		/// <para>Distinguished name (DN) of the certificate subject entity.</para>
		/// <example>C=US, ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net</example>
		///</summary>
		public static string ThreatIndicatorFileX509SubjectDistinguishedName = nameof(ThreatIndicatorFileX509SubjectDistinguishedName);
		///<summary>
		/// <para><c>threat.indicator.file.x509.version_number</c></para>
		/// <para>Version of x509 format.</para>
		/// <example>3</example>
		///</summary>
		public static string ThreatIndicatorFileX509VersionNumber = nameof(ThreatIndicatorFileX509VersionNumber);
		///<summary>
		/// <para><c>threat.indicator.file.code_signature.digest_algorithm</c></para>
		/// <para>The hashing algorithm used to sign the process.
		/// This value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.</para>
		/// <example>sha256</example>
		///</summary>
		public static string ThreatIndicatorFileCodeSignatureDigestAlgorithm = nameof(ThreatIndicatorFileCodeSignatureDigestAlgorithm);
		///<summary>
		/// <para><c>threat.indicator.file.code_signature.exists</c></para>
		/// <para>Boolean to capture if a signature is present.</para>
		/// <example>true</example>
		///</summary>
		public static string ThreatIndicatorFileCodeSignatureExists = nameof(ThreatIndicatorFileCodeSignatureExists);
		///<summary>
		/// <para><c>threat.indicator.file.code_signature.signing_id</c></para>
		/// <para>The identifier used to sign the process.
		/// This is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.</para>
		/// <example>com.apple.xpc.proxy</example>
		///</summary>
		public static string ThreatIndicatorFileCodeSignatureSigningId = nameof(ThreatIndicatorFileCodeSignatureSigningId);
		///<summary>
		/// <para><c>threat.indicator.file.code_signature.status</c></para>
		/// <para>Additional information about the certificate status.
		/// This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.</para>
		/// <example>ERROR_UNTRUSTED_ROOT</example>
		///</summary>
		public static string ThreatIndicatorFileCodeSignatureStatus = nameof(ThreatIndicatorFileCodeSignatureStatus);
		///<summary>
		/// <para><c>threat.indicator.file.code_signature.subject_name</c></para>
		/// <para>Subject name of the code signer</para>
		/// <example>Microsoft Corporation</example>
		///</summary>
		public static string ThreatIndicatorFileCodeSignatureSubjectName = nameof(ThreatIndicatorFileCodeSignatureSubjectName);
		///<summary>
		/// <para><c>threat.indicator.file.code_signature.team_id</c></para>
		/// <para>The team identifier used to sign the process.
		/// This is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.</para>
		/// <example>EQHXZ8M8AV</example>
		///</summary>
		public static string ThreatIndicatorFileCodeSignatureTeamId = nameof(ThreatIndicatorFileCodeSignatureTeamId);
		///<summary>
		/// <para><c>threat.indicator.file.code_signature.timestamp</c></para>
		/// <para>Date and time when the code signature was generated and signed.</para>
		/// <example>1/1/2021 12:10:30â€¯PM</example>
		///</summary>
		public static string ThreatIndicatorFileCodeSignatureTimestamp = nameof(ThreatIndicatorFileCodeSignatureTimestamp);
		///<summary>
		/// <para><c>threat.indicator.file.code_signature.trusted</c></para>
		/// <para>Stores the trust status of the certificate chain.
		/// Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.</para>
		/// <example>true</example>
		///</summary>
		public static string ThreatIndicatorFileCodeSignatureTrusted = nameof(ThreatIndicatorFileCodeSignatureTrusted);
		///<summary>
		/// <para><c>threat.indicator.file.code_signature.valid</c></para>
		/// <para>Boolean to capture if the digital signature is verified against the binary content.
		/// Leave unpopulated if a certificate was unchecked.</para>
		/// <example>true</example>
		///</summary>
		public static string ThreatIndicatorFileCodeSignatureValid = nameof(ThreatIndicatorFileCodeSignatureValid);
		///<summary>
		/// <para><c>threat.indicator.file.elf.architecture</c></para>
		/// <para>Machine architecture of the ELF file.</para>
		/// <example>x86-64</example>
		///</summary>
		public static string ThreatIndicatorFileElfArchitecture = nameof(ThreatIndicatorFileElfArchitecture);
		///<summary>
		/// <para><c>threat.indicator.file.elf.byte_order</c></para>
		/// <para>Byte sequence of ELF file.</para>
		/// <example>Little Endian</example>
		///</summary>
		public static string ThreatIndicatorFileElfByteOrder = nameof(ThreatIndicatorFileElfByteOrder);
		///<summary>
		/// <para><c>threat.indicator.file.elf.cpu_type</c></para>
		/// <para>CPU type of the ELF file.</para>
		/// <example>Intel</example>
		///</summary>
		public static string ThreatIndicatorFileElfCpuType = nameof(ThreatIndicatorFileElfCpuType);
		///<summary>
		/// <para><c>threat.indicator.file.elf.creation_date</c></para>
		/// <para>Extracted when possible from the file's metadata. Indicates when it was built or compiled. It can also be faked by malware creators.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileElfCreationDate = nameof(ThreatIndicatorFileElfCreationDate);
		///<summary>
		/// <para><c>threat.indicator.file.elf.go_import_hash</c></para>
		/// <para>A hash of the Go language imports in an ELF file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// The algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).</para>
		/// <example>10bddcb4cee42080f76c88d9ff964491</example>
		///</summary>
		public static string ThreatIndicatorFileElfGoImportHash = nameof(ThreatIndicatorFileElfGoImportHash);
		///<summary>
		/// <para><c>threat.indicator.file.elf.go_imports</c></para>
		/// <para>List of imported Go language element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileElfGoImports = nameof(ThreatIndicatorFileElfGoImports);
		///<summary>
		/// <para><c>threat.indicator.file.elf.go_imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileElfGoImportsNamesEntropy = nameof(ThreatIndicatorFileElfGoImportsNamesEntropy);
		///<summary>
		/// <para><c>threat.indicator.file.elf.go_imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileElfGoImportsNamesVarEntropy = nameof(ThreatIndicatorFileElfGoImportsNamesVarEntropy);
		///<summary>
		/// <para><c>threat.indicator.file.elf.go_stripped</c></para>
		/// <para>Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileElfGoStripped = nameof(ThreatIndicatorFileElfGoStripped);
		///<summary>
		/// <para><c>threat.indicator.file.elf.header.abi_version</c></para>
		/// <para>Version of the ELF Application Binary Interface (ABI).</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileElfHeaderAbiVersion = nameof(ThreatIndicatorFileElfHeaderAbiVersion);
		///<summary>
		/// <para><c>threat.indicator.file.elf.header.class</c></para>
		/// <para>Header class of the ELF file.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileElfHeaderClass = nameof(ThreatIndicatorFileElfHeaderClass);
		///<summary>
		/// <para><c>threat.indicator.file.elf.header.data</c></para>
		/// <para>Data table of the ELF header.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileElfHeaderData = nameof(ThreatIndicatorFileElfHeaderData);
		///<summary>
		/// <para><c>threat.indicator.file.elf.header.entrypoint</c></para>
		/// <para>Header entrypoint of the ELF file.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileElfHeaderEntrypoint = nameof(ThreatIndicatorFileElfHeaderEntrypoint);
		///<summary>
		/// <para><c>threat.indicator.file.elf.header.object_version</c></para>
		/// <para>"0x1" for original ELF files.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileElfHeaderObjectVersion = nameof(ThreatIndicatorFileElfHeaderObjectVersion);
		///<summary>
		/// <para><c>threat.indicator.file.elf.header.os_abi</c></para>
		/// <para>Application Binary Interface (ABI) of the Linux OS.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileElfHeaderOsAbi = nameof(ThreatIndicatorFileElfHeaderOsAbi);
		///<summary>
		/// <para><c>threat.indicator.file.elf.header.type</c></para>
		/// <para>Header type of the ELF file.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileElfHeaderType = nameof(ThreatIndicatorFileElfHeaderType);
		///<summary>
		/// <para><c>threat.indicator.file.elf.header.version</c></para>
		/// <para>Version of the ELF header.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileElfHeaderVersion = nameof(ThreatIndicatorFileElfHeaderVersion);
		///<summary>
		/// <para><c>threat.indicator.file.elf.import_hash</c></para>
		/// <para>A hash of the imports in an ELF file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is an ELF implementation of the Windows PE imphash.</para>
		/// <example>d41d8cd98f00b204e9800998ecf8427e</example>
		///</summary>
		public static string ThreatIndicatorFileElfImportHash = nameof(ThreatIndicatorFileElfImportHash);
		///<summary>
		/// <para><c>threat.indicator.file.elf.imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileElfImportsNamesEntropy = nameof(ThreatIndicatorFileElfImportsNamesEntropy);
		///<summary>
		/// <para><c>threat.indicator.file.elf.imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileElfImportsNamesVarEntropy = nameof(ThreatIndicatorFileElfImportsNamesVarEntropy);
		///<summary>
		/// <para><c>threat.indicator.file.elf.telfhash</c></para>
		/// <para>telfhash symbol hash for ELF file.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileElfTelfhash = nameof(ThreatIndicatorFileElfTelfhash);
		///<summary>
		/// <para><c>threat.indicator.file.macho.go_import_hash</c></para>
		/// <para>A hash of the Go language imports in a Mach-O file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// The algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).</para>
		/// <example>10bddcb4cee42080f76c88d9ff964491</example>
		///</summary>
		public static string ThreatIndicatorFileMachoGoImportHash = nameof(ThreatIndicatorFileMachoGoImportHash);
		///<summary>
		/// <para><c>threat.indicator.file.macho.go_imports</c></para>
		/// <para>List of imported Go language element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileMachoGoImports = nameof(ThreatIndicatorFileMachoGoImports);
		///<summary>
		/// <para><c>threat.indicator.file.macho.go_imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileMachoGoImportsNamesEntropy = nameof(ThreatIndicatorFileMachoGoImportsNamesEntropy);
		///<summary>
		/// <para><c>threat.indicator.file.macho.go_imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileMachoGoImportsNamesVarEntropy = nameof(ThreatIndicatorFileMachoGoImportsNamesVarEntropy);
		///<summary>
		/// <para><c>threat.indicator.file.macho.go_stripped</c></para>
		/// <para>Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileMachoGoStripped = nameof(ThreatIndicatorFileMachoGoStripped);
		///<summary>
		/// <para><c>threat.indicator.file.macho.import_hash</c></para>
		/// <para>A hash of the imports in a Mach-O file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is a synonym for symhash.</para>
		/// <example>d41d8cd98f00b204e9800998ecf8427e</example>
		///</summary>
		public static string ThreatIndicatorFileMachoImportHash = nameof(ThreatIndicatorFileMachoImportHash);
		///<summary>
		/// <para><c>threat.indicator.file.macho.imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileMachoImportsNamesEntropy = nameof(ThreatIndicatorFileMachoImportsNamesEntropy);
		///<summary>
		/// <para><c>threat.indicator.file.macho.imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorFileMachoImportsNamesVarEntropy = nameof(ThreatIndicatorFileMachoImportsNamesVarEntropy);
		///<summary>
		/// <para><c>threat.indicator.file.macho.symhash</c></para>
		/// <para>A hash of the imports in a Mach-O file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is a Mach-O implementation of the Windows PE imphash</para>
		/// <example>d3ccf195b62a9279c3c19af1080497ec</example>
		///</summary>
		public static string ThreatIndicatorFileMachoSymhash = nameof(ThreatIndicatorFileMachoSymhash);
		///<summary>
		/// <para><c>threat.indicator.geo.city_name</c></para>
		/// <para>City name.</para>
		/// <example>Montreal</example>
		///</summary>
		public static string ThreatIndicatorGeoCityName = nameof(ThreatIndicatorGeoCityName);
		///<summary>
		/// <para><c>threat.indicator.geo.continent_code</c></para>
		/// <para>Two-letter code representing continent's name.</para>
		/// <example>NA</example>
		///</summary>
		public static string ThreatIndicatorGeoContinentCode = nameof(ThreatIndicatorGeoContinentCode);
		///<summary>
		/// <para><c>threat.indicator.geo.continent_name</c></para>
		/// <para>Name of the continent.</para>
		/// <example>North America</example>
		///</summary>
		public static string ThreatIndicatorGeoContinentName = nameof(ThreatIndicatorGeoContinentName);
		///<summary>
		/// <para><c>threat.indicator.geo.country_iso_code</c></para>
		/// <para>Country ISO code.</para>
		/// <example>CA</example>
		///</summary>
		public static string ThreatIndicatorGeoCountryIsoCode = nameof(ThreatIndicatorGeoCountryIsoCode);
		///<summary>
		/// <para><c>threat.indicator.geo.country_name</c></para>
		/// <para>Country name.</para>
		/// <example>Canada</example>
		///</summary>
		public static string ThreatIndicatorGeoCountryName = nameof(ThreatIndicatorGeoCountryName);
		///<summary>
		/// <para><c>threat.indicator.geo.location</c></para>
		/// <para>Longitude and latitude.</para>
		/// <example>{ "lon": -73.614830, "lat": 45.505918 }</example>
		///</summary>
		public static string ThreatIndicatorGeoLocation = nameof(ThreatIndicatorGeoLocation);
		///<summary>
		/// <para><c>threat.indicator.geo.name</c></para>
		/// <para>User-defined description of a location, at the level of granularity they care about.
		/// Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
		/// Not typically used in automated geolocation.</para>
		/// <example>boston-dc</example>
		///</summary>
		public static string ThreatIndicatorGeoName = nameof(ThreatIndicatorGeoName);
		///<summary>
		/// <para><c>threat.indicator.geo.postal_code</c></para>
		/// <para>Postal code associated with the location.
		/// Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.</para>
		/// <example>94040</example>
		///</summary>
		public static string ThreatIndicatorGeoPostalCode = nameof(ThreatIndicatorGeoPostalCode);
		///<summary>
		/// <para><c>threat.indicator.geo.region_iso_code</c></para>
		/// <para>Region ISO code.</para>
		/// <example>CA-QC</example>
		///</summary>
		public static string ThreatIndicatorGeoRegionIsoCode = nameof(ThreatIndicatorGeoRegionIsoCode);
		///<summary>
		/// <para><c>threat.indicator.geo.region_name</c></para>
		/// <para>Region name.</para>
		/// <example>Quebec</example>
		///</summary>
		public static string ThreatIndicatorGeoRegionName = nameof(ThreatIndicatorGeoRegionName);
		///<summary>
		/// <para><c>threat.indicator.geo.timezone</c></para>
		/// <para>The time zone of the location, such as IANA time zone name.</para>
		/// <example>America/Argentina/Buenos_Aires</example>
		///</summary>
		public static string ThreatIndicatorGeoTimezone = nameof(ThreatIndicatorGeoTimezone);
		///<summary>
		/// <para><c>threat.indicator.registry.data.bytes</c></para>
		/// <para>Original bytes written with base64 encoding.
		/// For Windows registry operations, such as SetValueEx and RegQueryValueEx, this corresponds to the data pointed by `lp_data`. This is optional but provides better recoverability and should be populated for REG_BINARY encoded values.</para>
		/// <example>ZQBuAC0AVQBTAAAAZQBuAAAAAAA=</example>
		///</summary>
		public static string ThreatIndicatorRegistryDataBytes = nameof(ThreatIndicatorRegistryDataBytes);
		///<summary>
		/// <para><c>threat.indicator.registry.data.type</c></para>
		/// <para>Standard registry type for encoding contents</para>
		/// <example>REG_SZ</example>
		///</summary>
		public static string ThreatIndicatorRegistryDataType = nameof(ThreatIndicatorRegistryDataType);
		///<summary>
		/// <para><c>threat.indicator.registry.hive</c></para>
		/// <para>Abbreviated name for the hive.</para>
		/// <example>HKLM</example>
		///</summary>
		public static string ThreatIndicatorRegistryHive = nameof(ThreatIndicatorRegistryHive);
		///<summary>
		/// <para><c>threat.indicator.registry.key</c></para>
		/// <para>Hive-relative path of keys.</para>
		/// <example>SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe</example>
		///</summary>
		public static string ThreatIndicatorRegistryKey = nameof(ThreatIndicatorRegistryKey);
		///<summary>
		/// <para><c>threat.indicator.registry.path</c></para>
		/// <para>Full path, including hive, key and value</para>
		/// <example>HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe\Debugger</example>
		///</summary>
		public static string ThreatIndicatorRegistryPath = nameof(ThreatIndicatorRegistryPath);
		///<summary>
		/// <para><c>threat.indicator.registry.value</c></para>
		/// <para>Name of the value written.</para>
		/// <example>Debugger</example>
		///</summary>
		public static string ThreatIndicatorRegistryValue = nameof(ThreatIndicatorRegistryValue);
		///<summary>
		/// <para><c>threat.indicator.url.domain</c></para>
		/// <para>Domain of the url, such as "www.elastic.co".
		/// In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field.
		/// If the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC 2732), the `[` and `]` characters should also be captured in the `domain` field.</para>
		/// <example>www.elastic.co</example>
		///</summary>
		public static string ThreatIndicatorUrlDomain = nameof(ThreatIndicatorUrlDomain);
		///<summary>
		/// <para><c>threat.indicator.url.extension</c></para>
		/// <para>The field contains the file extension from the original request url, excluding the leading dot.
		/// The file extension is only set if it exists, as not every url has a file extension.
		/// The leading period must not be included. For example, the value must be "png", not ".png".
		/// Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").</para>
		/// <example>png</example>
		///</summary>
		public static string ThreatIndicatorUrlExtension = nameof(ThreatIndicatorUrlExtension);
		///<summary>
		/// <para><c>threat.indicator.url.fragment</c></para>
		/// <para>Portion of the url after the `#`, such as "top".
		/// The `#` is not part of the fragment.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorUrlFragment = nameof(ThreatIndicatorUrlFragment);
		///<summary>
		/// <para><c>threat.indicator.url.full</c></para>
		/// <para>If full URLs are important to your use case, they should be stored in `url.full`, whether this field is reconstructed or present in the event source.</para>
		/// <example>https://www.elastic.co:443/search?q=elasticsearch#top</example>
		///</summary>
		public static string ThreatIndicatorUrlFull = nameof(ThreatIndicatorUrlFull);
		///<summary>
		/// <para><c>threat.indicator.url.original</c></para>
		/// <para>Unmodified original url as seen in the event source.
		/// Note that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.
		/// This field is meant to represent the URL as it was observed, complete or not.</para>
		/// <example>https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch</example>
		///</summary>
		public static string ThreatIndicatorUrlOriginal = nameof(ThreatIndicatorUrlOriginal);
		///<summary>
		/// <para><c>threat.indicator.url.password</c></para>
		/// <para>Password of the request.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorUrlPassword = nameof(ThreatIndicatorUrlPassword);
		///<summary>
		/// <para><c>threat.indicator.url.path</c></para>
		/// <para>Path of the request, such as "/search".</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorUrlPath = nameof(ThreatIndicatorUrlPath);
		///<summary>
		/// <para><c>threat.indicator.url.port</c></para>
		/// <para>Port of the request, such as 443.</para>
		/// <example>443</example>
		///</summary>
		public static string ThreatIndicatorUrlPort = nameof(ThreatIndicatorUrlPort);
		///<summary>
		/// <para><c>threat.indicator.url.query</c></para>
		/// <para>The query field describes the query string of the request, such as "q=elasticsearch".
		/// The `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorUrlQuery = nameof(ThreatIndicatorUrlQuery);
		///<summary>
		/// <para><c>threat.indicator.url.registered_domain</c></para>
		/// <para>The highest registered url domain, stripped of the subdomain.
		/// For example, the registered domain for "foo.example.com" is "example.com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".</para>
		/// <example>example.com</example>
		///</summary>
		public static string ThreatIndicatorUrlRegisteredDomain = nameof(ThreatIndicatorUrlRegisteredDomain);
		///<summary>
		/// <para><c>threat.indicator.url.scheme</c></para>
		/// <para>Scheme of the request, such as "https".
		/// Note: The `:` is not part of the scheme.</para>
		/// <example>https</example>
		///</summary>
		public static string ThreatIndicatorUrlScheme = nameof(ThreatIndicatorUrlScheme);
		///<summary>
		/// <para><c>threat.indicator.url.subdomain</c></para>
		/// <para>The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
		/// For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.</para>
		/// <example>east</example>
		///</summary>
		public static string ThreatIndicatorUrlSubdomain = nameof(ThreatIndicatorUrlSubdomain);
		///<summary>
		/// <para><c>threat.indicator.url.top_level_domain</c></para>
		/// <para>The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".</para>
		/// <example>co.uk</example>
		///</summary>
		public static string ThreatIndicatorUrlTopLevelDomain = nameof(ThreatIndicatorUrlTopLevelDomain);
		///<summary>
		/// <para><c>threat.indicator.url.username</c></para>
		/// <para>Username of the request.</para>
		/// <example></example>
		///</summary>
		public static string ThreatIndicatorUrlUsername = nameof(ThreatIndicatorUrlUsername);
		///<summary>
		/// <para><c>tls.cipher</c></para>
		/// <para>String indicating the cipher used during the current connection.</para>
		/// <example>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256</example>
		///</summary>
		public static string TlsCipher = nameof(TlsCipher);
		///<summary>
		/// <para><c>tls.client.certificate</c></para>
		/// <para>PEM-encoded stand-alone certificate offered by the client. This is usually mutually-exclusive of `client.certificate_chain` since this value also exists in that list.</para>
		/// <example>MII...</example>
		///</summary>
		public static string TlsClientCertificate = nameof(TlsClientCertificate);
		///<summary>
		/// <para><c>tls.client.hash.md5</c></para>
		/// <para>Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.</para>
		/// <example>0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC</example>
		///</summary>
		public static string TlsClientHashMd5 = nameof(TlsClientHashMd5);
		///<summary>
		/// <para><c>tls.client.hash.sha1</c></para>
		/// <para>Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.</para>
		/// <example>9E393D93138888D288266C2D915214D1D1CCEB2A</example>
		///</summary>
		public static string TlsClientHashSha1 = nameof(TlsClientHashSha1);
		///<summary>
		/// <para><c>tls.client.hash.sha256</c></para>
		/// <para>Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.</para>
		/// <example>0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0</example>
		///</summary>
		public static string TlsClientHashSha256 = nameof(TlsClientHashSha256);
		///<summary>
		/// <para><c>tls.client.issuer</c></para>
		/// <para>Distinguished name of subject of the issuer of the x.509 certificate presented by the client.</para>
		/// <example>CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com</example>
		///</summary>
		public static string TlsClientIssuer = nameof(TlsClientIssuer);
		///<summary>
		/// <para><c>tls.client.ja3</c></para>
		/// <para>A hash that identifies clients based on how they perform an SSL/TLS handshake.</para>
		/// <example>d4e5b18d6b55c71272893221c96ba240</example>
		///</summary>
		public static string TlsClientJa3 = nameof(TlsClientJa3);
		///<summary>
		/// <para><c>tls.client.not_after</c></para>
		/// <para>Date/Time indicating when client certificate is no longer considered valid.</para>
		/// <example>1/1/2021 12:00:00â€¯AM</example>
		///</summary>
		public static string TlsClientNotAfter = nameof(TlsClientNotAfter);
		///<summary>
		/// <para><c>tls.client.not_before</c></para>
		/// <para>Date/Time indicating when client certificate is first considered valid.</para>
		/// <example>1/1/1970 12:00:00â€¯AM</example>
		///</summary>
		public static string TlsClientNotBefore = nameof(TlsClientNotBefore);
		///<summary>
		/// <para><c>tls.client.server_name</c></para>
		/// <para>Also called an SNI, this tells the server which hostname to which the client is attempting to connect to. When this value is available, it should get copied to `destination.domain`.</para>
		/// <example>www.elastic.co</example>
		///</summary>
		public static string TlsClientServerName = nameof(TlsClientServerName);
		///<summary>
		/// <para><c>tls.client.subject</c></para>
		/// <para>Distinguished name of subject of the x.509 certificate presented by the client.</para>
		/// <example>CN=myclient, OU=Documentation Team, DC=example, DC=com</example>
		///</summary>
		public static string TlsClientSubject = nameof(TlsClientSubject);
		///<summary>
		/// <para><c>tls.curve</c></para>
		/// <para>String indicating the curve used for the given cipher, when applicable.</para>
		/// <example>secp256r1</example>
		///</summary>
		public static string TlsCurve = nameof(TlsCurve);
		///<summary>
		/// <para><c>tls.established</c></para>
		/// <para>Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.</para>
		/// <example></example>
		///</summary>
		public static string TlsEstablished = nameof(TlsEstablished);
		///<summary>
		/// <para><c>tls.next_protocol</c></para>
		/// <para>String indicating the protocol being tunneled. Per the values in the IANA registry (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids), this string should be lower case.</para>
		/// <example>http/1.1</example>
		///</summary>
		public static string TlsNextProtocol = nameof(TlsNextProtocol);
		///<summary>
		/// <para><c>tls.resumed</c></para>
		/// <para>Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.</para>
		/// <example></example>
		///</summary>
		public static string TlsResumed = nameof(TlsResumed);
		///<summary>
		/// <para><c>tls.server.certificate</c></para>
		/// <para>PEM-encoded stand-alone certificate offered by the server. This is usually mutually-exclusive of `server.certificate_chain` since this value also exists in that list.</para>
		/// <example>MII...</example>
		///</summary>
		public static string TlsServerCertificate = nameof(TlsServerCertificate);
		///<summary>
		/// <para><c>tls.server.hash.md5</c></para>
		/// <para>Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.</para>
		/// <example>0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC</example>
		///</summary>
		public static string TlsServerHashMd5 = nameof(TlsServerHashMd5);
		///<summary>
		/// <para><c>tls.server.hash.sha1</c></para>
		/// <para>Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.</para>
		/// <example>9E393D93138888D288266C2D915214D1D1CCEB2A</example>
		///</summary>
		public static string TlsServerHashSha1 = nameof(TlsServerHashSha1);
		///<summary>
		/// <para><c>tls.server.hash.sha256</c></para>
		/// <para>Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.</para>
		/// <example>0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0</example>
		///</summary>
		public static string TlsServerHashSha256 = nameof(TlsServerHashSha256);
		///<summary>
		/// <para><c>tls.server.issuer</c></para>
		/// <para>Subject of the issuer of the x.509 certificate presented by the server.</para>
		/// <example>CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com</example>
		///</summary>
		public static string TlsServerIssuer = nameof(TlsServerIssuer);
		///<summary>
		/// <para><c>tls.server.ja3s</c></para>
		/// <para>A hash that identifies servers based on how they perform an SSL/TLS handshake.</para>
		/// <example>394441ab65754e2207b1e1b457b3641d</example>
		///</summary>
		public static string TlsServerJa3s = nameof(TlsServerJa3s);
		///<summary>
		/// <para><c>tls.server.not_after</c></para>
		/// <para>Timestamp indicating when server certificate is no longer considered valid.</para>
		/// <example>1/1/2021 12:00:00â€¯AM</example>
		///</summary>
		public static string TlsServerNotAfter = nameof(TlsServerNotAfter);
		///<summary>
		/// <para><c>tls.server.not_before</c></para>
		/// <para>Timestamp indicating when server certificate is first considered valid.</para>
		/// <example>1/1/1970 12:00:00â€¯AM</example>
		///</summary>
		public static string TlsServerNotBefore = nameof(TlsServerNotBefore);
		///<summary>
		/// <para><c>tls.server.subject</c></para>
		/// <para>Subject of the x.509 certificate presented by the server.</para>
		/// <example>CN=www.example.com, OU=Infrastructure Team, DC=example, DC=com</example>
		///</summary>
		public static string TlsServerSubject = nameof(TlsServerSubject);
		///<summary>
		/// <para><c>tls.version</c></para>
		/// <para>Numeric part of the version parsed from the original string.</para>
		/// <example>1.2</example>
		///</summary>
		public static string TlsVersion = nameof(TlsVersion);
		///<summary>
		/// <para><c>tls.version_protocol</c></para>
		/// <para>Normalized lowercase protocol name parsed from original string.</para>
		/// <example>tls</example>
		///</summary>
		public static string TlsVersionProtocol = nameof(TlsVersionProtocol);
		///<summary>
		/// <para><c>tls.client.x509.issuer.distinguished_name</c></para>
		/// <para>Distinguished name (DN) of issuing certificate authority.</para>
		/// <example>C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2 High Assurance Server CA</example>
		///</summary>
		public static string TlsClientX509IssuerDistinguishedName = nameof(TlsClientX509IssuerDistinguishedName);
		///<summary>
		/// <para><c>tls.client.x509.not_after</c></para>
		/// <para>Time at which the certificate is no longer considered valid.</para>
		/// <example>7/16/2020 3:15:39â€¯AM</example>
		///</summary>
		public static string TlsClientX509NotAfter = nameof(TlsClientX509NotAfter);
		///<summary>
		/// <para><c>tls.client.x509.not_before</c></para>
		/// <para>Time at which the certificate is first considered valid.</para>
		/// <example>8/16/2019 1:40:25â€¯AM</example>
		///</summary>
		public static string TlsClientX509NotBefore = nameof(TlsClientX509NotBefore);
		///<summary>
		/// <para><c>tls.client.x509.public_key_algorithm</c></para>
		/// <para>Algorithm used to generate the public key.</para>
		/// <example>RSA</example>
		///</summary>
		public static string TlsClientX509PublicKeyAlgorithm = nameof(TlsClientX509PublicKeyAlgorithm);
		///<summary>
		/// <para><c>tls.client.x509.public_key_curve</c></para>
		/// <para>The curve used by the elliptic curve public key algorithm. This is algorithm specific.</para>
		/// <example>nistp521</example>
		///</summary>
		public static string TlsClientX509PublicKeyCurve = nameof(TlsClientX509PublicKeyCurve);
		///<summary>
		/// <para><c>tls.client.x509.public_key_exponent</c></para>
		/// <para>Exponent used to derive the public key. This is algorithm specific.
		/// <para><br/>Stored but not available for search in Elasticsearch by default</para></para>
		/// <example>65537</example>
		///</summary>
		public static string TlsClientX509PublicKeyExponent = nameof(TlsClientX509PublicKeyExponent);
		///<summary>
		/// <para><c>tls.client.x509.public_key_size</c></para>
		/// <para>The size of the public key space in bits.</para>
		/// <example>2048</example>
		///</summary>
		public static string TlsClientX509PublicKeySize = nameof(TlsClientX509PublicKeySize);
		///<summary>
		/// <para><c>tls.client.x509.serial_number</c></para>
		/// <para>Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.</para>
		/// <example>55FBB9C7DEBF09809D12CCAA</example>
		///</summary>
		public static string TlsClientX509SerialNumber = nameof(TlsClientX509SerialNumber);
		///<summary>
		/// <para><c>tls.client.x509.signature_algorithm</c></para>
		/// <para>Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.</para>
		/// <example>SHA256-RSA</example>
		///</summary>
		public static string TlsClientX509SignatureAlgorithm = nameof(TlsClientX509SignatureAlgorithm);
		///<summary>
		/// <para><c>tls.client.x509.subject.distinguished_name</c></para>
		/// <para>Distinguished name (DN) of the certificate subject entity.</para>
		/// <example>C=US, ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net</example>
		///</summary>
		public static string TlsClientX509SubjectDistinguishedName = nameof(TlsClientX509SubjectDistinguishedName);
		///<summary>
		/// <para><c>tls.client.x509.version_number</c></para>
		/// <para>Version of x509 format.</para>
		/// <example>3</example>
		///</summary>
		public static string TlsClientX509VersionNumber = nameof(TlsClientX509VersionNumber);
		///<summary>
		/// <para><c>url.domain</c></para>
		/// <para>Domain of the url, such as "www.elastic.co".
		/// In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field.
		/// If the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC 2732), the `[` and `]` characters should also be captured in the `domain` field.</para>
		/// <example>www.elastic.co</example>
		///</summary>
		public static string UrlDomain = nameof(UrlDomain);
		///<summary>
		/// <para><c>url.extension</c></para>
		/// <para>The field contains the file extension from the original request url, excluding the leading dot.
		/// The file extension is only set if it exists, as not every url has a file extension.
		/// The leading period must not be included. For example, the value must be "png", not ".png".
		/// Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").</para>
		/// <example>png</example>
		///</summary>
		public static string UrlExtension = nameof(UrlExtension);
		///<summary>
		/// <para><c>url.fragment</c></para>
		/// <para>Portion of the url after the `#`, such as "top".
		/// The `#` is not part of the fragment.</para>
		/// <example></example>
		///</summary>
		public static string UrlFragment = nameof(UrlFragment);
		///<summary>
		/// <para><c>url.full</c></para>
		/// <para>If full URLs are important to your use case, they should be stored in `url.full`, whether this field is reconstructed or present in the event source.</para>
		/// <example>https://www.elastic.co:443/search?q=elasticsearch#top</example>
		///</summary>
		public static string UrlFull = nameof(UrlFull);
		///<summary>
		/// <para><c>url.original</c></para>
		/// <para>Unmodified original url as seen in the event source.
		/// Note that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.
		/// This field is meant to represent the URL as it was observed, complete or not.</para>
		/// <example>https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch</example>
		///</summary>
		public static string UrlOriginal = nameof(UrlOriginal);
		///<summary>
		/// <para><c>url.password</c></para>
		/// <para>Password of the request.</para>
		/// <example></example>
		///</summary>
		public static string UrlPassword = nameof(UrlPassword);
		///<summary>
		/// <para><c>url.path</c></para>
		/// <para>Path of the request, such as "/search".</para>
		/// <example></example>
		///</summary>
		public static string UrlPath = nameof(UrlPath);
		///<summary>
		/// <para><c>url.port</c></para>
		/// <para>Port of the request, such as 443.</para>
		/// <example>443</example>
		///</summary>
		public static string UrlPort = nameof(UrlPort);
		///<summary>
		/// <para><c>url.query</c></para>
		/// <para>The query field describes the query string of the request, such as "q=elasticsearch".
		/// The `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.</para>
		/// <example></example>
		///</summary>
		public static string UrlQuery = nameof(UrlQuery);
		///<summary>
		/// <para><c>url.registered_domain</c></para>
		/// <para>The highest registered url domain, stripped of the subdomain.
		/// For example, the registered domain for "foo.example.com" is "example.com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".</para>
		/// <example>example.com</example>
		///</summary>
		public static string UrlRegisteredDomain = nameof(UrlRegisteredDomain);
		///<summary>
		/// <para><c>url.scheme</c></para>
		/// <para>Scheme of the request, such as "https".
		/// Note: The `:` is not part of the scheme.</para>
		/// <example>https</example>
		///</summary>
		public static string UrlScheme = nameof(UrlScheme);
		///<summary>
		/// <para><c>url.subdomain</c></para>
		/// <para>The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
		/// For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.</para>
		/// <example>east</example>
		///</summary>
		public static string UrlSubdomain = nameof(UrlSubdomain);
		///<summary>
		/// <para><c>url.top_level_domain</c></para>
		/// <para>The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".</para>
		/// <example>co.uk</example>
		///</summary>
		public static string UrlTopLevelDomain = nameof(UrlTopLevelDomain);
		///<summary>
		/// <para><c>url.username</c></para>
		/// <para>Username of the request.</para>
		/// <example></example>
		///</summary>
		public static string UrlUsername = nameof(UrlUsername);
		///<summary>
		/// <para><c>user.domain</c></para>
		/// <para>Name of the directory the user is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string UserDomain = nameof(UserDomain);
		///<summary>
		/// <para><c>user.email</c></para>
		/// <para>User email address.</para>
		/// <example></example>
		///</summary>
		public static string UserEmail = nameof(UserEmail);
		///<summary>
		/// <para><c>user.full_name</c></para>
		/// <para>User's full name, if available.</para>
		/// <example>Albert Einstein</example>
		///</summary>
		public static string UserFullName = nameof(UserFullName);
		///<summary>
		/// <para><c>user.hash</c></para>
		/// <para>Unique user hash to correlate information for a user in anonymized form.
		/// Useful if `user.id` or `user.name` contain confidential information and cannot be used.</para>
		/// <example></example>
		///</summary>
		public static string UserHash = nameof(UserHash);
		///<summary>
		/// <para><c>user.id</c></para>
		/// <para>Unique identifier of the user.</para>
		/// <example>S-1-5-21-202424912787-2692429404-2351956786-1000</example>
		///</summary>
		public static string UserId = nameof(UserId);
		///<summary>
		/// <para><c>user.name</c></para>
		/// <para>Short name or login of the user.</para>
		/// <example>a.einstein</example>
		///</summary>
		public static string UserName = nameof(UserName);
		///<summary>
		/// <para><c>user.group.domain</c></para>
		/// <para>Name of the directory the group is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		public static string UserGroupDomain = nameof(UserGroupDomain);
		///<summary>
		/// <para><c>user.group.id</c></para>
		/// <para>Unique identifier for the group on the system/platform.</para>
		/// <example></example>
		///</summary>
		public static string UserGroupId = nameof(UserGroupId);
		///<summary>
		/// <para><c>user.group.name</c></para>
		/// <para>Name of the group.</para>
		/// <example></example>
		///</summary>
		public static string UserGroupName = nameof(UserGroupName);
		///<summary>
		/// <para><c>user.risk.calculated_level</c></para>
		/// <para>A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>High</example>
		///</summary>
		public static string UserRiskCalculatedLevel = nameof(UserRiskCalculatedLevel);
		///<summary>
		/// <para><c>user.risk.calculated_score</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>880.73</example>
		///</summary>
		public static string UserRiskCalculatedScore = nameof(UserRiskCalculatedScore);
		///<summary>
		/// <para><c>user.risk.calculated_score_norm</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.</para>
		/// <example>88.73</example>
		///</summary>
		public static string UserRiskCalculatedScoreNorm = nameof(UserRiskCalculatedScoreNorm);
		///<summary>
		/// <para><c>user.risk.static_level</c></para>
		/// <para>A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>High</example>
		///</summary>
		public static string UserRiskStaticLevel = nameof(UserRiskStaticLevel);
		///<summary>
		/// <para><c>user.risk.static_score</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>830.0</example>
		///</summary>
		public static string UserRiskStaticScore = nameof(UserRiskStaticScore);
		///<summary>
		/// <para><c>user.risk.static_score_norm</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.</para>
		/// <example>83.0</example>
		///</summary>
		public static string UserRiskStaticScoreNorm = nameof(UserRiskStaticScoreNorm);
		///<summary>
		/// <para><c>user_agent.device.name</c></para>
		/// <para>Name of the device.</para>
		/// <example>iPhone</example>
		///</summary>
		public static string UserAgentDeviceName = nameof(UserAgentDeviceName);
		///<summary>
		/// <para><c>user_agent.name</c></para>
		/// <para>Name of the user agent.</para>
		/// <example>Safari</example>
		///</summary>
		public static string UserAgentName = nameof(UserAgentName);
		///<summary>
		/// <para><c>user_agent.original</c></para>
		/// <para>Unparsed user_agent string.</para>
		/// <example>Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1</example>
		///</summary>
		public static string UserAgentOriginal = nameof(UserAgentOriginal);
		///<summary>
		/// <para><c>user_agent.version</c></para>
		/// <para>Version of the user agent.</para>
		/// <example>12.0</example>
		///</summary>
		public static string UserAgentVersion = nameof(UserAgentVersion);
		///<summary>
		/// <para><c>user_agent.os.family</c></para>
		/// <para>OS family (such as redhat, debian, freebsd, windows).</para>
		/// <example>debian</example>
		///</summary>
		public static string UserAgentOsFamily = nameof(UserAgentOsFamily);
		///<summary>
		/// <para><c>user_agent.os.full</c></para>
		/// <para>Operating system name, including the version or code name.</para>
		/// <example>Mac OS Mojave</example>
		///</summary>
		public static string UserAgentOsFull = nameof(UserAgentOsFull);
		///<summary>
		/// <para><c>user_agent.os.kernel</c></para>
		/// <para>Operating system kernel version as a raw string.</para>
		/// <example>4.4.0-112-generic</example>
		///</summary>
		public static string UserAgentOsKernel = nameof(UserAgentOsKernel);
		///<summary>
		/// <para><c>user_agent.os.name</c></para>
		/// <para>Operating system name, without the version.</para>
		/// <example>Mac OS X</example>
		///</summary>
		public static string UserAgentOsName = nameof(UserAgentOsName);
		///<summary>
		/// <para><c>user_agent.os.platform</c></para>
		/// <para>Operating system platform (such centos, ubuntu, windows).</para>
		/// <example>darwin</example>
		///</summary>
		public static string UserAgentOsPlatform = nameof(UserAgentOsPlatform);
		///<summary>
		/// <para><c>user_agent.os.type</c></para>
		/// <para>Use the `os.type` field to categorize the operating system into one of the broad commercial families.
		/// If the OS you're dealing with is not listed as an expected value, the field should not be populated. Please let us know by opening an issue with ECS, to propose its addition.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>linux</item>
		/// <item>macos</item>
		/// <item>unix</item>
		/// <item>windows</item>
		/// <item>ios</item>
		/// <item>android</item>
		/// </list></para>
		/// <example>macos</example>
		///</summary>
		public static string UserAgentOsType = nameof(UserAgentOsType);
		///<summary>
		/// <para><c>user_agent.os.version</c></para>
		/// <para>Operating system version as a raw string.</para>
		/// <example>10.14.1</example>
		///</summary>
		public static string UserAgentOsVersion = nameof(UserAgentOsVersion);
		///<summary>
		/// <para><c>vlan.id</c></para>
		/// <para>VLAN ID as reported by the observer.</para>
		/// <example>10</example>
		///</summary>
		public static string VlanId = nameof(VlanId);
		///<summary>
		/// <para><c>vlan.name</c></para>
		/// <para>Optional VLAN name as reported by the observer.</para>
		/// <example>outside</example>
		///</summary>
		public static string VlanName = nameof(VlanName);
		///<summary>
		/// <para><c>vulnerability.classification</c></para>
		/// <para>The classification of the vulnerability scoring system. For example (https://www.first.org/cvss/)</para>
		/// <example>CVSS</example>
		///</summary>
		public static string VulnerabilityClassification = nameof(VulnerabilityClassification);
		///<summary>
		/// <para><c>vulnerability.description</c></para>
		/// <para>The description of the vulnerability that provides additional context of the vulnerability. For example (https://cve.mitre.org/about/faqs.html#cve_entry_descriptions_created[Common Vulnerabilities and Exposure CVE description])</para>
		/// <example>In macOS before 2.12.6, there is a vulnerability in the RPC...</example>
		///</summary>
		public static string VulnerabilityDescription = nameof(VulnerabilityDescription);
		///<summary>
		/// <para><c>vulnerability.enumeration</c></para>
		/// <para>The type of identifier used for this vulnerability. For example (https://cve.mitre.org/about/)</para>
		/// <example>CVE</example>
		///</summary>
		public static string VulnerabilityEnumeration = nameof(VulnerabilityEnumeration);
		///<summary>
		/// <para><c>vulnerability.id</c></para>
		/// <para>The identification (ID) is the number portion of a vulnerability entry. It includes a unique identification number for the vulnerability. For example (https://cve.mitre.org/about/faqs.html#what_is_cve_id)[Common Vulnerabilities and Exposure CVE ID]</para>
		/// <example>CVE-2019-00001</example>
		///</summary>
		public static string VulnerabilityId = nameof(VulnerabilityId);
		///<summary>
		/// <para><c>vulnerability.reference</c></para>
		/// <para>A resource that provides additional information, context, and mitigations for the identified vulnerability.</para>
		/// <example>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-6111</example>
		///</summary>
		public static string VulnerabilityReference = nameof(VulnerabilityReference);
		///<summary>
		/// <para><c>vulnerability.report_id</c></para>
		/// <para>The report or scan identification number.</para>
		/// <example>20191018.0001</example>
		///</summary>
		public static string VulnerabilityReportId = nameof(VulnerabilityReportId);
		///<summary>
		/// <para><c>vulnerability.scanner.vendor</c></para>
		/// <para>The name of the vulnerability scanner vendor.</para>
		/// <example>Tenable</example>
		///</summary>
		public static string VulnerabilityScannerVendor = nameof(VulnerabilityScannerVendor);
		///<summary>
		/// <para><c>vulnerability.score.base</c></para>
		/// <para>Scores can range from 0.0 to 10.0, with 10.0 being the most severe.
		/// Base scores cover an assessment for exploitability metrics (attack vector, complexity, privileges, and user interaction), impact metrics (confidentiality, integrity, and availability), and scope. For example (https://www.first.org/cvss/specification-document)</para>
		/// <example>5.5</example>
		///</summary>
		public static string VulnerabilityScoreBase = nameof(VulnerabilityScoreBase);
		///<summary>
		/// <para><c>vulnerability.score.environmental</c></para>
		/// <para>Scores can range from 0.0 to 10.0, with 10.0 being the most severe.
		/// Environmental scores cover an assessment for any modified Base metrics, confidentiality, integrity, and availability requirements. For example (https://www.first.org/cvss/specification-document)</para>
		/// <example>5.5</example>
		///</summary>
		public static string VulnerabilityScoreEnvironmental = nameof(VulnerabilityScoreEnvironmental);
		///<summary>
		/// <para><c>vulnerability.score.temporal</c></para>
		/// <para>Scores can range from 0.0 to 10.0, with 10.0 being the most severe.
		/// Temporal scores cover an assessment for code maturity, remediation level, and confidence. For example (https://www.first.org/cvss/specification-document)</para>
		/// <example></example>
		///</summary>
		public static string VulnerabilityScoreTemporal = nameof(VulnerabilityScoreTemporal);
		///<summary>
		/// <para><c>vulnerability.score.version</c></para>
		/// <para>The National Vulnerability Database (NVD) provides qualitative severity rankings of "Low", "Medium", and "High" for CVSS v2.0 base score ranges in addition to the severity ratings for CVSS v3.0 as they are defined in the CVSS v3.0 specification.
		/// CVSS is owned and managed by FIRST.Org, Inc. (FIRST), a US-based non-profit organization, whose mission is to help computer security incident response teams across the world. For example (https://nvd.nist.gov/vuln-metrics/cvss)</para>
		/// <example>2.0</example>
		///</summary>
		public static string VulnerabilityScoreVersion = nameof(VulnerabilityScoreVersion);
		///<summary>
		/// <para><c>vulnerability.severity</c></para>
		/// <para>The severity of the vulnerability can help with metrics and internal prioritization regarding remediation. For example (https://nvd.nist.gov/vuln-metrics/cvss)</para>
		/// <example>Critical</example>
		///</summary>
		public static string VulnerabilitySeverity = nameof(VulnerabilitySeverity);
		///<summary>
		/// <para><c>x509.issuer.distinguished_name</c></para>
		/// <para>Distinguished name (DN) of issuing certificate authority.</para>
		/// <example>C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2 High Assurance Server CA</example>
		///</summary>
		public static string X509IssuerDistinguishedName = nameof(X509IssuerDistinguishedName);
		///<summary>
		/// <para><c>x509.not_after</c></para>
		/// <para>Time at which the certificate is no longer considered valid.</para>
		/// <example>7/16/2020 3:15:39â€¯AM</example>
		///</summary>
		public static string X509NotAfter = nameof(X509NotAfter);
		///<summary>
		/// <para><c>x509.not_before</c></para>
		/// <para>Time at which the certificate is first considered valid.</para>
		/// <example>8/16/2019 1:40:25â€¯AM</example>
		///</summary>
		public static string X509NotBefore = nameof(X509NotBefore);
		///<summary>
		/// <para><c>x509.public_key_algorithm</c></para>
		/// <para>Algorithm used to generate the public key.</para>
		/// <example>RSA</example>
		///</summary>
		public static string X509PublicKeyAlgorithm = nameof(X509PublicKeyAlgorithm);
		///<summary>
		/// <para><c>x509.public_key_curve</c></para>
		/// <para>The curve used by the elliptic curve public key algorithm. This is algorithm specific.</para>
		/// <example>nistp521</example>
		///</summary>
		public static string X509PublicKeyCurve = nameof(X509PublicKeyCurve);
		///<summary>
		/// <para><c>x509.public_key_exponent</c></para>
		/// <para>Exponent used to derive the public key. This is algorithm specific.
		/// <para><br/>Stored but not available for search in Elasticsearch by default</para></para>
		/// <example>65537</example>
		///</summary>
		public static string X509PublicKeyExponent = nameof(X509PublicKeyExponent);
		///<summary>
		/// <para><c>x509.public_key_size</c></para>
		/// <para>The size of the public key space in bits.</para>
		/// <example>2048</example>
		///</summary>
		public static string X509PublicKeySize = nameof(X509PublicKeySize);
		///<summary>
		/// <para><c>x509.serial_number</c></para>
		/// <para>Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.</para>
		/// <example>55FBB9C7DEBF09809D12CCAA</example>
		///</summary>
		public static string X509SerialNumber = nameof(X509SerialNumber);
		///<summary>
		/// <para><c>x509.signature_algorithm</c></para>
		/// <para>Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.</para>
		/// <example>SHA256-RSA</example>
		///</summary>
		public static string X509SignatureAlgorithm = nameof(X509SignatureAlgorithm);
		///<summary>
		/// <para><c>x509.subject.distinguished_name</c></para>
		/// <para>Distinguished name (DN) of the certificate subject entity.</para>
		/// <example>C=US, ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net</example>
		///</summary>
		public static string X509SubjectDistinguishedName = nameof(X509SubjectDistinguishedName);
		///<summary>
		/// <para><c>x509.version_number</c></para>
		/// <para>Version of x509 format.</para>
		/// <example>3</example>
		///</summary>
		public static string X509VersionNumber = nameof(X509VersionNumber);

		///<summary>All properties that <see cref="EcsDocument.AssignField" /> supports </summary>
		public static readonly HashSet<string> All = new()
		{
			"@timestamp", Timestamp,
			"message", Message,
			"span.id", SpanId,
			"trace.id", TraceId,
			"transaction.id", TransactionId,
			"agent.build.original", AgentBuildOriginal,
			"agent.ephemeral_id", AgentEphemeralId,
			"agent.id", AgentId,
			"agent.name", AgentName,
			"agent.type", AgentType,
			"agent.version", AgentVersion,
			"as.number", AsNumber,
			"as.organization.name", AsOrganizationName,
			"client.address", ClientAddress,
			"client.bytes", ClientBytes,
			"client.domain", ClientDomain,
			"client.ip", ClientIp,
			"client.mac", ClientMac,
			"client.nat.ip", ClientNatIp,
			"client.nat.port", ClientNatPort,
			"client.packets", ClientPackets,
			"client.port", ClientPort,
			"client.registered_domain", ClientRegisteredDomain,
			"client.subdomain", ClientSubdomain,
			"client.top_level_domain", ClientTopLevelDomain,
			"client.as.number", ClientAsNumber,
			"client.as.organization.name", ClientAsOrganizationName,
			"client.geo.city_name", ClientGeoCityName,
			"client.geo.continent_code", ClientGeoContinentCode,
			"client.geo.continent_name", ClientGeoContinentName,
			"client.geo.country_iso_code", ClientGeoCountryIsoCode,
			"client.geo.country_name", ClientGeoCountryName,
			"client.geo.location", ClientGeoLocation,
			"client.geo.name", ClientGeoName,
			"client.geo.postal_code", ClientGeoPostalCode,
			"client.geo.region_iso_code", ClientGeoRegionIsoCode,
			"client.geo.region_name", ClientGeoRegionName,
			"client.geo.timezone", ClientGeoTimezone,
			"client.user.domain", ClientUserDomain,
			"client.user.email", ClientUserEmail,
			"client.user.full_name", ClientUserFullName,
			"client.user.hash", ClientUserHash,
			"client.user.id", ClientUserId,
			"client.user.name", ClientUserName,
			"client.user.group.domain", ClientUserGroupDomain,
			"client.user.group.id", ClientUserGroupId,
			"client.user.group.name", ClientUserGroupName,
			"client.user.risk.calculated_level", ClientUserRiskCalculatedLevel,
			"client.user.risk.calculated_score", ClientUserRiskCalculatedScore,
			"client.user.risk.calculated_score_norm", ClientUserRiskCalculatedScoreNorm,
			"client.user.risk.static_level", ClientUserRiskStaticLevel,
			"client.user.risk.static_score", ClientUserRiskStaticScore,
			"client.user.risk.static_score_norm", ClientUserRiskStaticScoreNorm,
			"cloud.account.id", CloudAccountId,
			"cloud.account.name", CloudAccountName,
			"cloud.availability_zone", CloudAvailabilityZone,
			"cloud.instance.id", CloudInstanceId,
			"cloud.instance.name", CloudInstanceName,
			"cloud.machine.type", CloudMachineType,
			"cloud.project.id", CloudProjectId,
			"cloud.project.name", CloudProjectName,
			"cloud.provider", CloudProvider,
			"cloud.region", CloudRegion,
			"cloud.service.name", CloudServiceName,
			"code_signature.digest_algorithm", CodeSignatureDigestAlgorithm,
			"code_signature.exists", CodeSignatureExists,
			"code_signature.signing_id", CodeSignatureSigningId,
			"code_signature.status", CodeSignatureStatus,
			"code_signature.subject_name", CodeSignatureSubjectName,
			"code_signature.team_id", CodeSignatureTeamId,
			"code_signature.timestamp", CodeSignatureTimestamp,
			"code_signature.trusted", CodeSignatureTrusted,
			"code_signature.valid", CodeSignatureValid,
			"container.cpu.usage", ContainerCpuUsage,
			"container.disk.read.bytes", ContainerDiskReadBytes,
			"container.disk.write.bytes", ContainerDiskWriteBytes,
			"container.id", ContainerId,
			"container.image.name", ContainerImageName,
			"container.memory.usage", ContainerMemoryUsage,
			"container.name", ContainerName,
			"container.network.egress.bytes", ContainerNetworkEgressBytes,
			"container.network.ingress.bytes", ContainerNetworkIngressBytes,
			"container.runtime", ContainerRuntime,
			"container.security_context.privileged", ContainerSecurityContextPrivileged,
			"data_stream.dataset", DataStreamDataset,
			"data_stream.namespace", DataStreamNamespace,
			"data_stream.type", DataStreamType,
			"destination.address", DestinationAddress,
			"destination.bytes", DestinationBytes,
			"destination.domain", DestinationDomain,
			"destination.ip", DestinationIp,
			"destination.mac", DestinationMac,
			"destination.nat.ip", DestinationNatIp,
			"destination.nat.port", DestinationNatPort,
			"destination.packets", DestinationPackets,
			"destination.port", DestinationPort,
			"destination.registered_domain", DestinationRegisteredDomain,
			"destination.subdomain", DestinationSubdomain,
			"destination.top_level_domain", DestinationTopLevelDomain,
			"destination.as.number", DestinationAsNumber,
			"destination.as.organization.name", DestinationAsOrganizationName,
			"destination.geo.city_name", DestinationGeoCityName,
			"destination.geo.continent_code", DestinationGeoContinentCode,
			"destination.geo.continent_name", DestinationGeoContinentName,
			"destination.geo.country_iso_code", DestinationGeoCountryIsoCode,
			"destination.geo.country_name", DestinationGeoCountryName,
			"destination.geo.location", DestinationGeoLocation,
			"destination.geo.name", DestinationGeoName,
			"destination.geo.postal_code", DestinationGeoPostalCode,
			"destination.geo.region_iso_code", DestinationGeoRegionIsoCode,
			"destination.geo.region_name", DestinationGeoRegionName,
			"destination.geo.timezone", DestinationGeoTimezone,
			"destination.user.domain", DestinationUserDomain,
			"destination.user.email", DestinationUserEmail,
			"destination.user.full_name", DestinationUserFullName,
			"destination.user.hash", DestinationUserHash,
			"destination.user.id", DestinationUserId,
			"destination.user.name", DestinationUserName,
			"destination.user.group.domain", DestinationUserGroupDomain,
			"destination.user.group.id", DestinationUserGroupId,
			"destination.user.group.name", DestinationUserGroupName,
			"destination.user.risk.calculated_level", DestinationUserRiskCalculatedLevel,
			"destination.user.risk.calculated_score", DestinationUserRiskCalculatedScore,
			"destination.user.risk.calculated_score_norm", DestinationUserRiskCalculatedScoreNorm,
			"destination.user.risk.static_level", DestinationUserRiskStaticLevel,
			"destination.user.risk.static_score", DestinationUserRiskStaticScore,
			"destination.user.risk.static_score_norm", DestinationUserRiskStaticScoreNorm,
			"device.id", DeviceId,
			"device.manufacturer", DeviceManufacturer,
			"device.model.identifier", DeviceModelIdentifier,
			"device.model.name", DeviceModelName,
			"dll.name", DllName,
			"dll.path", DllPath,
			"dll.hash.md5", DllHashMd5,
			"dll.hash.sha1", DllHashSha1,
			"dll.hash.sha256", DllHashSha256,
			"dll.hash.sha384", DllHashSha384,
			"dll.hash.sha512", DllHashSha512,
			"dll.hash.ssdeep", DllHashSsdeep,
			"dll.hash.tlsh", DllHashTlsh,
			"dll.pe.architecture", DllPeArchitecture,
			"dll.pe.company", DllPeCompany,
			"dll.pe.description", DllPeDescription,
			"dll.pe.file_version", DllPeFileVersion,
			"dll.pe.go_import_hash", DllPeGoImportHash,
			"dll.pe.go_imports", DllPeGoImports,
			"dll.pe.go_imports_names_entropy", DllPeGoImportsNamesEntropy,
			"dll.pe.go_imports_names_var_entropy", DllPeGoImportsNamesVarEntropy,
			"dll.pe.go_stripped", DllPeGoStripped,
			"dll.pe.imphash", DllPeImphash,
			"dll.pe.import_hash", DllPeImportHash,
			"dll.pe.imports_names_entropy", DllPeImportsNamesEntropy,
			"dll.pe.imports_names_var_entropy", DllPeImportsNamesVarEntropy,
			"dll.pe.original_file_name", DllPeOriginalFileName,
			"dll.pe.pehash", DllPePehash,
			"dll.pe.product", DllPeProduct,
			"dll.code_signature.digest_algorithm", DllCodeSignatureDigestAlgorithm,
			"dll.code_signature.exists", DllCodeSignatureExists,
			"dll.code_signature.signing_id", DllCodeSignatureSigningId,
			"dll.code_signature.status", DllCodeSignatureStatus,
			"dll.code_signature.subject_name", DllCodeSignatureSubjectName,
			"dll.code_signature.team_id", DllCodeSignatureTeamId,
			"dll.code_signature.timestamp", DllCodeSignatureTimestamp,
			"dll.code_signature.trusted", DllCodeSignatureTrusted,
			"dll.code_signature.valid", DllCodeSignatureValid,
			"dns.id", DnsId,
			"dns.op_code", DnsOpCode,
			"dns.question.class", DnsQuestionClass,
			"dns.question.name", DnsQuestionName,
			"dns.question.registered_domain", DnsQuestionRegisteredDomain,
			"dns.question.subdomain", DnsQuestionSubdomain,
			"dns.question.top_level_domain", DnsQuestionTopLevelDomain,
			"dns.question.type", DnsQuestionType,
			"dns.response_code", DnsResponseCode,
			"dns.type", DnsType,
			"ecs.version", EcsVersion,
			"elf.architecture", ElfArchitecture,
			"elf.byte_order", ElfByteOrder,
			"elf.cpu_type", ElfCpuType,
			"elf.creation_date", ElfCreationDate,
			"elf.go_import_hash", ElfGoImportHash,
			"elf.go_imports", ElfGoImports,
			"elf.go_imports_names_entropy", ElfGoImportsNamesEntropy,
			"elf.go_imports_names_var_entropy", ElfGoImportsNamesVarEntropy,
			"elf.go_stripped", ElfGoStripped,
			"elf.header.abi_version", ElfHeaderAbiVersion,
			"elf.header.class", ElfHeaderClass,
			"elf.header.data", ElfHeaderData,
			"elf.header.entrypoint", ElfHeaderEntrypoint,
			"elf.header.object_version", ElfHeaderObjectVersion,
			"elf.header.os_abi", ElfHeaderOsAbi,
			"elf.header.type", ElfHeaderType,
			"elf.header.version", ElfHeaderVersion,
			"elf.import_hash", ElfImportHash,
			"elf.imports_names_entropy", ElfImportsNamesEntropy,
			"elf.imports_names_var_entropy", ElfImportsNamesVarEntropy,
			"elf.telfhash", ElfTelfhash,
			"email.content_type", EmailContentType,
			"email.delivery_timestamp", EmailDeliveryTimestamp,
			"email.direction", EmailDirection,
			"email.local_id", EmailLocalId,
			"email.message_id", EmailMessageId,
			"email.origination_timestamp", EmailOriginationTimestamp,
			"email.sender.address", EmailSenderAddress,
			"email.subject", EmailSubject,
			"email.x_mailer", EmailXMailer,
			"error.code", ErrorCode,
			"error.id", ErrorId,
			"error.message", ErrorMessage,
			"error.stack_trace", ErrorStackTrace,
			"error.type", ErrorType,
			"event.action", EventAction,
			"event.agent_id_status", EventAgentIdStatus,
			"event.code", EventCode,
			"event.created", EventCreated,
			"event.dataset", EventDataset,
			"event.duration", EventDuration,
			"event.end", EventEnd,
			"event.hash", EventHash,
			"event.id", EventId,
			"event.ingested", EventIngested,
			"event.kind", EventKind,
			"event.module", EventModule,
			"event.original", EventOriginal,
			"event.outcome", EventOutcome,
			"event.provider", EventProvider,
			"event.reason", EventReason,
			"event.reference", EventReference,
			"event.risk_score", EventRiskScore,
			"event.risk_score_norm", EventRiskScoreNorm,
			"event.sequence", EventSequence,
			"event.severity", EventSeverity,
			"event.start", EventStart,
			"event.timezone", EventTimezone,
			"event.url", EventUrl,
			"faas.coldstart", FaasColdstart,
			"faas.execution", FaasExecution,
			"faas.id", FaasId,
			"faas.name", FaasName,
			"faas.trigger.request_id", FaasTriggerRequestId,
			"faas.trigger.type", FaasTriggerType,
			"faas.version", FaasVersion,
			"file.accessed", FileAccessed,
			"file.created", FileCreated,
			"file.ctime", FileCtime,
			"file.device", FileDevice,
			"file.directory", FileDirectory,
			"file.drive_letter", FileDriveLetter,
			"file.extension", FileExtension,
			"file.fork_name", FileForkName,
			"file.gid", FileGid,
			"file.group", FileGroup,
			"file.inode", FileInode,
			"file.mime_type", FileMimeType,
			"file.mode", FileMode,
			"file.mtime", FileMtime,
			"file.name", FileName,
			"file.owner", FileOwner,
			"file.path", FilePath,
			"file.size", FileSize,
			"file.target_path", FileTargetPath,
			"file.type", FileType,
			"file.uid", FileUid,
			"file.hash.md5", FileHashMd5,
			"file.hash.sha1", FileHashSha1,
			"file.hash.sha256", FileHashSha256,
			"file.hash.sha384", FileHashSha384,
			"file.hash.sha512", FileHashSha512,
			"file.hash.ssdeep", FileHashSsdeep,
			"file.hash.tlsh", FileHashTlsh,
			"file.pe.architecture", FilePeArchitecture,
			"file.pe.company", FilePeCompany,
			"file.pe.description", FilePeDescription,
			"file.pe.file_version", FilePeFileVersion,
			"file.pe.go_import_hash", FilePeGoImportHash,
			"file.pe.go_imports", FilePeGoImports,
			"file.pe.go_imports_names_entropy", FilePeGoImportsNamesEntropy,
			"file.pe.go_imports_names_var_entropy", FilePeGoImportsNamesVarEntropy,
			"file.pe.go_stripped", FilePeGoStripped,
			"file.pe.imphash", FilePeImphash,
			"file.pe.import_hash", FilePeImportHash,
			"file.pe.imports_names_entropy", FilePeImportsNamesEntropy,
			"file.pe.imports_names_var_entropy", FilePeImportsNamesVarEntropy,
			"file.pe.original_file_name", FilePeOriginalFileName,
			"file.pe.pehash", FilePePehash,
			"file.pe.product", FilePeProduct,
			"file.x509.issuer.distinguished_name", FileX509IssuerDistinguishedName,
			"file.x509.not_after", FileX509NotAfter,
			"file.x509.not_before", FileX509NotBefore,
			"file.x509.public_key_algorithm", FileX509PublicKeyAlgorithm,
			"file.x509.public_key_curve", FileX509PublicKeyCurve,
			"file.x509.public_key_exponent", FileX509PublicKeyExponent,
			"file.x509.public_key_size", FileX509PublicKeySize,
			"file.x509.serial_number", FileX509SerialNumber,
			"file.x509.signature_algorithm", FileX509SignatureAlgorithm,
			"file.x509.subject.distinguished_name", FileX509SubjectDistinguishedName,
			"file.x509.version_number", FileX509VersionNumber,
			"file.code_signature.digest_algorithm", FileCodeSignatureDigestAlgorithm,
			"file.code_signature.exists", FileCodeSignatureExists,
			"file.code_signature.signing_id", FileCodeSignatureSigningId,
			"file.code_signature.status", FileCodeSignatureStatus,
			"file.code_signature.subject_name", FileCodeSignatureSubjectName,
			"file.code_signature.team_id", FileCodeSignatureTeamId,
			"file.code_signature.timestamp", FileCodeSignatureTimestamp,
			"file.code_signature.trusted", FileCodeSignatureTrusted,
			"file.code_signature.valid", FileCodeSignatureValid,
			"file.elf.architecture", FileElfArchitecture,
			"file.elf.byte_order", FileElfByteOrder,
			"file.elf.cpu_type", FileElfCpuType,
			"file.elf.creation_date", FileElfCreationDate,
			"file.elf.go_import_hash", FileElfGoImportHash,
			"file.elf.go_imports", FileElfGoImports,
			"file.elf.go_imports_names_entropy", FileElfGoImportsNamesEntropy,
			"file.elf.go_imports_names_var_entropy", FileElfGoImportsNamesVarEntropy,
			"file.elf.go_stripped", FileElfGoStripped,
			"file.elf.header.abi_version", FileElfHeaderAbiVersion,
			"file.elf.header.class", FileElfHeaderClass,
			"file.elf.header.data", FileElfHeaderData,
			"file.elf.header.entrypoint", FileElfHeaderEntrypoint,
			"file.elf.header.object_version", FileElfHeaderObjectVersion,
			"file.elf.header.os_abi", FileElfHeaderOsAbi,
			"file.elf.header.type", FileElfHeaderType,
			"file.elf.header.version", FileElfHeaderVersion,
			"file.elf.import_hash", FileElfImportHash,
			"file.elf.imports_names_entropy", FileElfImportsNamesEntropy,
			"file.elf.imports_names_var_entropy", FileElfImportsNamesVarEntropy,
			"file.elf.telfhash", FileElfTelfhash,
			"file.macho.go_import_hash", FileMachoGoImportHash,
			"file.macho.go_imports", FileMachoGoImports,
			"file.macho.go_imports_names_entropy", FileMachoGoImportsNamesEntropy,
			"file.macho.go_imports_names_var_entropy", FileMachoGoImportsNamesVarEntropy,
			"file.macho.go_stripped", FileMachoGoStripped,
			"file.macho.import_hash", FileMachoImportHash,
			"file.macho.imports_names_entropy", FileMachoImportsNamesEntropy,
			"file.macho.imports_names_var_entropy", FileMachoImportsNamesVarEntropy,
			"file.macho.symhash", FileMachoSymhash,
			"geo.city_name", GeoCityName,
			"geo.continent_code", GeoContinentCode,
			"geo.continent_name", GeoContinentName,
			"geo.country_iso_code", GeoCountryIsoCode,
			"geo.country_name", GeoCountryName,
			"geo.location", GeoLocation,
			"geo.name", GeoName,
			"geo.postal_code", GeoPostalCode,
			"geo.region_iso_code", GeoRegionIsoCode,
			"geo.region_name", GeoRegionName,
			"geo.timezone", GeoTimezone,
			"group.domain", GroupDomain,
			"group.id", GroupId,
			"group.name", GroupName,
			"hash.md5", HashMd5,
			"hash.sha1", HashSha1,
			"hash.sha256", HashSha256,
			"hash.sha384", HashSha384,
			"hash.sha512", HashSha512,
			"hash.ssdeep", HashSsdeep,
			"hash.tlsh", HashTlsh,
			"host.architecture", HostArchitecture,
			"host.boot.id", HostBootId,
			"host.cpu.usage", HostCpuUsage,
			"host.disk.read.bytes", HostDiskReadBytes,
			"host.disk.write.bytes", HostDiskWriteBytes,
			"host.domain", HostDomain,
			"host.hostname", HostHostname,
			"host.id", HostId,
			"host.name", HostName,
			"host.network.egress.bytes", HostNetworkEgressBytes,
			"host.network.egress.packets", HostNetworkEgressPackets,
			"host.network.ingress.bytes", HostNetworkIngressBytes,
			"host.network.ingress.packets", HostNetworkIngressPackets,
			"host.pid_ns_ino", HostPidNsIno,
			"host.type", HostType,
			"host.uptime", HostUptime,
			"host.geo.city_name", HostGeoCityName,
			"host.geo.continent_code", HostGeoContinentCode,
			"host.geo.continent_name", HostGeoContinentName,
			"host.geo.country_iso_code", HostGeoCountryIsoCode,
			"host.geo.country_name", HostGeoCountryName,
			"host.geo.location", HostGeoLocation,
			"host.geo.name", HostGeoName,
			"host.geo.postal_code", HostGeoPostalCode,
			"host.geo.region_iso_code", HostGeoRegionIsoCode,
			"host.geo.region_name", HostGeoRegionName,
			"host.geo.timezone", HostGeoTimezone,
			"host.os.family", HostOsFamily,
			"host.os.full", HostOsFull,
			"host.os.kernel", HostOsKernel,
			"host.os.name", HostOsName,
			"host.os.platform", HostOsPlatform,
			"host.os.type", HostOsType,
			"host.os.version", HostOsVersion,
			"host.risk.calculated_level", HostRiskCalculatedLevel,
			"host.risk.calculated_score", HostRiskCalculatedScore,
			"host.risk.calculated_score_norm", HostRiskCalculatedScoreNorm,
			"host.risk.static_level", HostRiskStaticLevel,
			"host.risk.static_score", HostRiskStaticScore,
			"host.risk.static_score_norm", HostRiskStaticScoreNorm,
			"http.request.body.bytes", HttpRequestBodyBytes,
			"http.request.body.content", HttpRequestBodyContent,
			"http.request.bytes", HttpRequestBytes,
			"http.request.id", HttpRequestId,
			"http.request.method", HttpRequestMethod,
			"http.request.mime_type", HttpRequestMimeType,
			"http.request.referrer", HttpRequestReferrer,
			"http.response.body.bytes", HttpResponseBodyBytes,
			"http.response.body.content", HttpResponseBodyContent,
			"http.response.bytes", HttpResponseBytes,
			"http.response.mime_type", HttpResponseMimeType,
			"http.response.status_code", HttpResponseStatusCode,
			"http.version", HttpVersion,
			"interface.alias", InterfaceAlias,
			"interface.id", InterfaceId,
			"interface.name", InterfaceName,
			"log.file.path", LogFilePath,
			"log.level", LogLevel,
			"log.logger", LogLogger,
			"log.origin.file.line", LogOriginFileLine,
			"log.origin.file.name", LogOriginFileName,
			"log.origin.function", LogOriginFunction,
			"macho.go_import_hash", MachoGoImportHash,
			"macho.go_imports", MachoGoImports,
			"macho.go_imports_names_entropy", MachoGoImportsNamesEntropy,
			"macho.go_imports_names_var_entropy", MachoGoImportsNamesVarEntropy,
			"macho.go_stripped", MachoGoStripped,
			"macho.import_hash", MachoImportHash,
			"macho.imports_names_entropy", MachoImportsNamesEntropy,
			"macho.imports_names_var_entropy", MachoImportsNamesVarEntropy,
			"macho.symhash", MachoSymhash,
			"network.application", NetworkApplication,
			"network.bytes", NetworkBytes,
			"network.community_id", NetworkCommunityId,
			"network.direction", NetworkDirection,
			"network.forwarded_ip", NetworkForwardedIp,
			"network.iana_number", NetworkIanaNumber,
			"network.name", NetworkName,
			"network.packets", NetworkPackets,
			"network.protocol", NetworkProtocol,
			"network.transport", NetworkTransport,
			"network.type", NetworkType,
			"network.vlan.id", NetworkVlanId,
			"network.vlan.name", NetworkVlanName,
			"observer.hostname", ObserverHostname,
			"observer.name", ObserverName,
			"observer.product", ObserverProduct,
			"observer.serial_number", ObserverSerialNumber,
			"observer.type", ObserverType,
			"observer.vendor", ObserverVendor,
			"observer.version", ObserverVersion,
			"observer.geo.city_name", ObserverGeoCityName,
			"observer.geo.continent_code", ObserverGeoContinentCode,
			"observer.geo.continent_name", ObserverGeoContinentName,
			"observer.geo.country_iso_code", ObserverGeoCountryIsoCode,
			"observer.geo.country_name", ObserverGeoCountryName,
			"observer.geo.location", ObserverGeoLocation,
			"observer.geo.name", ObserverGeoName,
			"observer.geo.postal_code", ObserverGeoPostalCode,
			"observer.geo.region_iso_code", ObserverGeoRegionIsoCode,
			"observer.geo.region_name", ObserverGeoRegionName,
			"observer.geo.timezone", ObserverGeoTimezone,
			"observer.os.family", ObserverOsFamily,
			"observer.os.full", ObserverOsFull,
			"observer.os.kernel", ObserverOsKernel,
			"observer.os.name", ObserverOsName,
			"observer.os.platform", ObserverOsPlatform,
			"observer.os.type", ObserverOsType,
			"observer.os.version", ObserverOsVersion,
			"orchestrator.api_version", OrchestratorApiVersion,
			"orchestrator.cluster.id", OrchestratorClusterId,
			"orchestrator.cluster.name", OrchestratorClusterName,
			"orchestrator.cluster.url", OrchestratorClusterUrl,
			"orchestrator.cluster.version", OrchestratorClusterVersion,
			"orchestrator.namespace", OrchestratorNamespace,
			"orchestrator.organization", OrchestratorOrganization,
			"orchestrator.resource.id", OrchestratorResourceId,
			"orchestrator.resource.name", OrchestratorResourceName,
			"orchestrator.resource.parent.type", OrchestratorResourceParentType,
			"orchestrator.resource.type", OrchestratorResourceType,
			"orchestrator.type", OrchestratorType,
			"organization.id", OrganizationId,
			"organization.name", OrganizationName,
			"os.family", OsFamily,
			"os.full", OsFull,
			"os.kernel", OsKernel,
			"os.name", OsName,
			"os.platform", OsPlatform,
			"os.type", OsType,
			"os.version", OsVersion,
			"package.architecture", PackageArchitecture,
			"package.build_version", PackageBuildVersion,
			"package.checksum", PackageChecksum,
			"package.description", PackageDescription,
			"package.install_scope", PackageInstallScope,
			"package.installed", PackageInstalled,
			"package.license", PackageLicense,
			"package.name", PackageName,
			"package.path", PackagePath,
			"package.reference", PackageReference,
			"package.size", PackageSize,
			"package.type", PackageType,
			"package.version", PackageVersion,
			"pe.architecture", PeArchitecture,
			"pe.company", PeCompany,
			"pe.description", PeDescription,
			"pe.file_version", PeFileVersion,
			"pe.go_import_hash", PeGoImportHash,
			"pe.go_imports", PeGoImports,
			"pe.go_imports_names_entropy", PeGoImportsNamesEntropy,
			"pe.go_imports_names_var_entropy", PeGoImportsNamesVarEntropy,
			"pe.go_stripped", PeGoStripped,
			"pe.imphash", PeImphash,
			"pe.import_hash", PeImportHash,
			"pe.imports_names_entropy", PeImportsNamesEntropy,
			"pe.imports_names_var_entropy", PeImportsNamesVarEntropy,
			"pe.original_file_name", PeOriginalFileName,
			"pe.pehash", PePehash,
			"pe.product", PeProduct,
			"process.args_count", ProcessArgsCount,
			"process.command_line", ProcessCommandLine,
			"process.end", ProcessEnd,
			"process.entity_id", ProcessEntityId,
			"process.executable", ProcessExecutable,
			"process.exit_code", ProcessExitCode,
			"process.interactive", ProcessInteractive,
			"process.name", ProcessName,
			"process.pgid", ProcessPgid,
			"process.pid", ProcessPid,
			"process.start", ProcessStart,
			"process.thread.id", ProcessThreadId,
			"process.thread.name", ProcessThreadName,
			"process.title", ProcessTitle,
			"process.uptime", ProcessUptime,
			"process.vpid", ProcessVpid,
			"process.working_directory", ProcessWorkingDirectory,
			"process.group.domain", ProcessGroupDomain,
			"process.group.id", ProcessGroupId,
			"process.group.name", ProcessGroupName,
			"process.real_group.domain", ProcessRealGroupDomain,
			"process.real_group.id", ProcessRealGroupId,
			"process.real_group.name", ProcessRealGroupName,
			"process.saved_group.domain", ProcessSavedGroupDomain,
			"process.saved_group.id", ProcessSavedGroupId,
			"process.saved_group.name", ProcessSavedGroupName,
			"process.hash.md5", ProcessHashMd5,
			"process.hash.sha1", ProcessHashSha1,
			"process.hash.sha256", ProcessHashSha256,
			"process.hash.sha384", ProcessHashSha384,
			"process.hash.sha512", ProcessHashSha512,
			"process.hash.ssdeep", ProcessHashSsdeep,
			"process.hash.tlsh", ProcessHashTlsh,
			"process.pe.architecture", ProcessPeArchitecture,
			"process.pe.company", ProcessPeCompany,
			"process.pe.description", ProcessPeDescription,
			"process.pe.file_version", ProcessPeFileVersion,
			"process.pe.go_import_hash", ProcessPeGoImportHash,
			"process.pe.go_imports", ProcessPeGoImports,
			"process.pe.go_imports_names_entropy", ProcessPeGoImportsNamesEntropy,
			"process.pe.go_imports_names_var_entropy", ProcessPeGoImportsNamesVarEntropy,
			"process.pe.go_stripped", ProcessPeGoStripped,
			"process.pe.imphash", ProcessPeImphash,
			"process.pe.import_hash", ProcessPeImportHash,
			"process.pe.imports_names_entropy", ProcessPeImportsNamesEntropy,
			"process.pe.imports_names_var_entropy", ProcessPeImportsNamesVarEntropy,
			"process.pe.original_file_name", ProcessPeOriginalFileName,
			"process.pe.pehash", ProcessPePehash,
			"process.pe.product", ProcessPeProduct,
			"process.code_signature.digest_algorithm", ProcessCodeSignatureDigestAlgorithm,
			"process.code_signature.exists", ProcessCodeSignatureExists,
			"process.code_signature.signing_id", ProcessCodeSignatureSigningId,
			"process.code_signature.status", ProcessCodeSignatureStatus,
			"process.code_signature.subject_name", ProcessCodeSignatureSubjectName,
			"process.code_signature.team_id", ProcessCodeSignatureTeamId,
			"process.code_signature.timestamp", ProcessCodeSignatureTimestamp,
			"process.code_signature.trusted", ProcessCodeSignatureTrusted,
			"process.code_signature.valid", ProcessCodeSignatureValid,
			"process.elf.architecture", ProcessElfArchitecture,
			"process.elf.byte_order", ProcessElfByteOrder,
			"process.elf.cpu_type", ProcessElfCpuType,
			"process.elf.creation_date", ProcessElfCreationDate,
			"process.elf.go_import_hash", ProcessElfGoImportHash,
			"process.elf.go_imports", ProcessElfGoImports,
			"process.elf.go_imports_names_entropy", ProcessElfGoImportsNamesEntropy,
			"process.elf.go_imports_names_var_entropy", ProcessElfGoImportsNamesVarEntropy,
			"process.elf.go_stripped", ProcessElfGoStripped,
			"process.elf.header.abi_version", ProcessElfHeaderAbiVersion,
			"process.elf.header.class", ProcessElfHeaderClass,
			"process.elf.header.data", ProcessElfHeaderData,
			"process.elf.header.entrypoint", ProcessElfHeaderEntrypoint,
			"process.elf.header.object_version", ProcessElfHeaderObjectVersion,
			"process.elf.header.os_abi", ProcessElfHeaderOsAbi,
			"process.elf.header.type", ProcessElfHeaderType,
			"process.elf.header.version", ProcessElfHeaderVersion,
			"process.elf.import_hash", ProcessElfImportHash,
			"process.elf.imports_names_entropy", ProcessElfImportsNamesEntropy,
			"process.elf.imports_names_var_entropy", ProcessElfImportsNamesVarEntropy,
			"process.elf.telfhash", ProcessElfTelfhash,
			"process.macho.go_import_hash", ProcessMachoGoImportHash,
			"process.macho.go_imports", ProcessMachoGoImports,
			"process.macho.go_imports_names_entropy", ProcessMachoGoImportsNamesEntropy,
			"process.macho.go_imports_names_var_entropy", ProcessMachoGoImportsNamesVarEntropy,
			"process.macho.go_stripped", ProcessMachoGoStripped,
			"process.macho.import_hash", ProcessMachoImportHash,
			"process.macho.imports_names_entropy", ProcessMachoImportsNamesEntropy,
			"process.macho.imports_names_var_entropy", ProcessMachoImportsNamesVarEntropy,
			"process.macho.symhash", ProcessMachoSymhash,
			"process.entry_meta.source.address", ProcessEntryMetaSourceAddress,
			"process.entry_meta.source.bytes", ProcessEntryMetaSourceBytes,
			"process.entry_meta.source.domain", ProcessEntryMetaSourceDomain,
			"process.entry_meta.source.ip", ProcessEntryMetaSourceIp,
			"process.entry_meta.source.mac", ProcessEntryMetaSourceMac,
			"process.entry_meta.source.nat.ip", ProcessEntryMetaSourceNatIp,
			"process.entry_meta.source.nat.port", ProcessEntryMetaSourceNatPort,
			"process.entry_meta.source.packets", ProcessEntryMetaSourcePackets,
			"process.entry_meta.source.port", ProcessEntryMetaSourcePort,
			"process.entry_meta.source.registered_domain", ProcessEntryMetaSourceRegisteredDomain,
			"process.entry_meta.source.subdomain", ProcessEntryMetaSourceSubdomain,
			"process.entry_meta.source.top_level_domain", ProcessEntryMetaSourceTopLevelDomain,
			"process.entry_meta.source.as.number", ProcessEntryMetaSourceAsNumber,
			"process.entry_meta.source.as.organization.name", ProcessEntryMetaSourceAsOrganizationName,
			"process.entry_meta.source.geo.city_name", ProcessEntryMetaSourceGeoCityName,
			"process.entry_meta.source.geo.continent_code", ProcessEntryMetaSourceGeoContinentCode,
			"process.entry_meta.source.geo.continent_name", ProcessEntryMetaSourceGeoContinentName,
			"process.entry_meta.source.geo.country_iso_code", ProcessEntryMetaSourceGeoCountryIsoCode,
			"process.entry_meta.source.geo.country_name", ProcessEntryMetaSourceGeoCountryName,
			"process.entry_meta.source.geo.location", ProcessEntryMetaSourceGeoLocation,
			"process.entry_meta.source.geo.name", ProcessEntryMetaSourceGeoName,
			"process.entry_meta.source.geo.postal_code", ProcessEntryMetaSourceGeoPostalCode,
			"process.entry_meta.source.geo.region_iso_code", ProcessEntryMetaSourceGeoRegionIsoCode,
			"process.entry_meta.source.geo.region_name", ProcessEntryMetaSourceGeoRegionName,
			"process.entry_meta.source.geo.timezone", ProcessEntryMetaSourceGeoTimezone,
			"process.entry_meta.source.user.domain", ProcessEntryMetaSourceUserDomain,
			"process.entry_meta.source.user.email", ProcessEntryMetaSourceUserEmail,
			"process.entry_meta.source.user.full_name", ProcessEntryMetaSourceUserFullName,
			"process.entry_meta.source.user.hash", ProcessEntryMetaSourceUserHash,
			"process.entry_meta.source.user.id", ProcessEntryMetaSourceUserId,
			"process.entry_meta.source.user.name", ProcessEntryMetaSourceUserName,
			"process.entry_meta.source.user.group.domain", ProcessEntryMetaSourceUserGroupDomain,
			"process.entry_meta.source.user.group.id", ProcessEntryMetaSourceUserGroupId,
			"process.entry_meta.source.user.group.name", ProcessEntryMetaSourceUserGroupName,
			"process.entry_meta.source.user.risk.calculated_level", ProcessEntryMetaSourceUserRiskCalculatedLevel,
			"process.entry_meta.source.user.risk.calculated_score", ProcessEntryMetaSourceUserRiskCalculatedScore,
			"process.entry_meta.source.user.risk.calculated_score_norm", ProcessEntryMetaSourceUserRiskCalculatedScoreNorm,
			"process.entry_meta.source.user.risk.static_level", ProcessEntryMetaSourceUserRiskStaticLevel,
			"process.entry_meta.source.user.risk.static_score", ProcessEntryMetaSourceUserRiskStaticScore,
			"process.entry_meta.source.user.risk.static_score_norm", ProcessEntryMetaSourceUserRiskStaticScoreNorm,
			"process.user.domain", ProcessUserDomain,
			"process.user.email", ProcessUserEmail,
			"process.user.full_name", ProcessUserFullName,
			"process.user.hash", ProcessUserHash,
			"process.user.id", ProcessUserId,
			"process.user.name", ProcessUserName,
			"process.user.group.domain", ProcessUserGroupDomain,
			"process.user.group.id", ProcessUserGroupId,
			"process.user.group.name", ProcessUserGroupName,
			"process.user.risk.calculated_level", ProcessUserRiskCalculatedLevel,
			"process.user.risk.calculated_score", ProcessUserRiskCalculatedScore,
			"process.user.risk.calculated_score_norm", ProcessUserRiskCalculatedScoreNorm,
			"process.user.risk.static_level", ProcessUserRiskStaticLevel,
			"process.user.risk.static_score", ProcessUserRiskStaticScore,
			"process.user.risk.static_score_norm", ProcessUserRiskStaticScoreNorm,
			"process.saved_user.domain", ProcessSavedUserDomain,
			"process.saved_user.email", ProcessSavedUserEmail,
			"process.saved_user.full_name", ProcessSavedUserFullName,
			"process.saved_user.hash", ProcessSavedUserHash,
			"process.saved_user.id", ProcessSavedUserId,
			"process.saved_user.name", ProcessSavedUserName,
			"process.saved_user.group.domain", ProcessSavedUserGroupDomain,
			"process.saved_user.group.id", ProcessSavedUserGroupId,
			"process.saved_user.group.name", ProcessSavedUserGroupName,
			"process.saved_user.risk.calculated_level", ProcessSavedUserRiskCalculatedLevel,
			"process.saved_user.risk.calculated_score", ProcessSavedUserRiskCalculatedScore,
			"process.saved_user.risk.calculated_score_norm", ProcessSavedUserRiskCalculatedScoreNorm,
			"process.saved_user.risk.static_level", ProcessSavedUserRiskStaticLevel,
			"process.saved_user.risk.static_score", ProcessSavedUserRiskStaticScore,
			"process.saved_user.risk.static_score_norm", ProcessSavedUserRiskStaticScoreNorm,
			"process.real_user.domain", ProcessRealUserDomain,
			"process.real_user.email", ProcessRealUserEmail,
			"process.real_user.full_name", ProcessRealUserFullName,
			"process.real_user.hash", ProcessRealUserHash,
			"process.real_user.id", ProcessRealUserId,
			"process.real_user.name", ProcessRealUserName,
			"process.real_user.group.domain", ProcessRealUserGroupDomain,
			"process.real_user.group.id", ProcessRealUserGroupId,
			"process.real_user.group.name", ProcessRealUserGroupName,
			"process.real_user.risk.calculated_level", ProcessRealUserRiskCalculatedLevel,
			"process.real_user.risk.calculated_score", ProcessRealUserRiskCalculatedScore,
			"process.real_user.risk.calculated_score_norm", ProcessRealUserRiskCalculatedScoreNorm,
			"process.real_user.risk.static_level", ProcessRealUserRiskStaticLevel,
			"process.real_user.risk.static_score", ProcessRealUserRiskStaticScore,
			"process.real_user.risk.static_score_norm", ProcessRealUserRiskStaticScoreNorm,
			"process.attested_user.domain", ProcessAttestedUserDomain,
			"process.attested_user.email", ProcessAttestedUserEmail,
			"process.attested_user.full_name", ProcessAttestedUserFullName,
			"process.attested_user.hash", ProcessAttestedUserHash,
			"process.attested_user.id", ProcessAttestedUserId,
			"process.attested_user.name", ProcessAttestedUserName,
			"process.attested_user.group.domain", ProcessAttestedUserGroupDomain,
			"process.attested_user.group.id", ProcessAttestedUserGroupId,
			"process.attested_user.group.name", ProcessAttestedUserGroupName,
			"process.attested_user.risk.calculated_level", ProcessAttestedUserRiskCalculatedLevel,
			"process.attested_user.risk.calculated_score", ProcessAttestedUserRiskCalculatedScore,
			"process.attested_user.risk.calculated_score_norm", ProcessAttestedUserRiskCalculatedScoreNorm,
			"process.attested_user.risk.static_level", ProcessAttestedUserRiskStaticLevel,
			"process.attested_user.risk.static_score", ProcessAttestedUserRiskStaticScore,
			"process.attested_user.risk.static_score_norm", ProcessAttestedUserRiskStaticScoreNorm,
			"registry.data.bytes", RegistryDataBytes,
			"registry.data.type", RegistryDataType,
			"registry.hive", RegistryHive,
			"registry.key", RegistryKey,
			"registry.path", RegistryPath,
			"registry.value", RegistryValue,
			"risk.calculated_level", RiskCalculatedLevel,
			"risk.calculated_score", RiskCalculatedScore,
			"risk.calculated_score_norm", RiskCalculatedScoreNorm,
			"risk.static_level", RiskStaticLevel,
			"risk.static_score", RiskStaticScore,
			"risk.static_score_norm", RiskStaticScoreNorm,
			"rule.category", RuleCategory,
			"rule.description", RuleDescription,
			"rule.id", RuleId,
			"rule.license", RuleLicense,
			"rule.name", RuleName,
			"rule.reference", RuleReference,
			"rule.ruleset", RuleRuleset,
			"rule.uuid", RuleUuid,
			"rule.version", RuleVersion,
			"server.address", ServerAddress,
			"server.bytes", ServerBytes,
			"server.domain", ServerDomain,
			"server.ip", ServerIp,
			"server.mac", ServerMac,
			"server.nat.ip", ServerNatIp,
			"server.nat.port", ServerNatPort,
			"server.packets", ServerPackets,
			"server.port", ServerPort,
			"server.registered_domain", ServerRegisteredDomain,
			"server.subdomain", ServerSubdomain,
			"server.top_level_domain", ServerTopLevelDomain,
			"server.as.number", ServerAsNumber,
			"server.as.organization.name", ServerAsOrganizationName,
			"server.geo.city_name", ServerGeoCityName,
			"server.geo.continent_code", ServerGeoContinentCode,
			"server.geo.continent_name", ServerGeoContinentName,
			"server.geo.country_iso_code", ServerGeoCountryIsoCode,
			"server.geo.country_name", ServerGeoCountryName,
			"server.geo.location", ServerGeoLocation,
			"server.geo.name", ServerGeoName,
			"server.geo.postal_code", ServerGeoPostalCode,
			"server.geo.region_iso_code", ServerGeoRegionIsoCode,
			"server.geo.region_name", ServerGeoRegionName,
			"server.geo.timezone", ServerGeoTimezone,
			"server.user.domain", ServerUserDomain,
			"server.user.email", ServerUserEmail,
			"server.user.full_name", ServerUserFullName,
			"server.user.hash", ServerUserHash,
			"server.user.id", ServerUserId,
			"server.user.name", ServerUserName,
			"server.user.group.domain", ServerUserGroupDomain,
			"server.user.group.id", ServerUserGroupId,
			"server.user.group.name", ServerUserGroupName,
			"server.user.risk.calculated_level", ServerUserRiskCalculatedLevel,
			"server.user.risk.calculated_score", ServerUserRiskCalculatedScore,
			"server.user.risk.calculated_score_norm", ServerUserRiskCalculatedScoreNorm,
			"server.user.risk.static_level", ServerUserRiskStaticLevel,
			"server.user.risk.static_score", ServerUserRiskStaticScore,
			"server.user.risk.static_score_norm", ServerUserRiskStaticScoreNorm,
			"service.address", ServiceAddress,
			"service.environment", ServiceEnvironment,
			"service.ephemeral_id", ServiceEphemeralId,
			"service.id", ServiceId,
			"service.name", ServiceName,
			"service.node.name", ServiceNodeName,
			"service.node.role", ServiceNodeRole,
			"service.state", ServiceState,
			"service.type", ServiceType,
			"service.version", ServiceVersion,
			"source.address", SourceAddress,
			"source.bytes", SourceBytes,
			"source.domain", SourceDomain,
			"source.ip", SourceIp,
			"source.mac", SourceMac,
			"source.nat.ip", SourceNatIp,
			"source.nat.port", SourceNatPort,
			"source.packets", SourcePackets,
			"source.port", SourcePort,
			"source.registered_domain", SourceRegisteredDomain,
			"source.subdomain", SourceSubdomain,
			"source.top_level_domain", SourceTopLevelDomain,
			"source.as.number", SourceAsNumber,
			"source.as.organization.name", SourceAsOrganizationName,
			"source.geo.city_name", SourceGeoCityName,
			"source.geo.continent_code", SourceGeoContinentCode,
			"source.geo.continent_name", SourceGeoContinentName,
			"source.geo.country_iso_code", SourceGeoCountryIsoCode,
			"source.geo.country_name", SourceGeoCountryName,
			"source.geo.location", SourceGeoLocation,
			"source.geo.name", SourceGeoName,
			"source.geo.postal_code", SourceGeoPostalCode,
			"source.geo.region_iso_code", SourceGeoRegionIsoCode,
			"source.geo.region_name", SourceGeoRegionName,
			"source.geo.timezone", SourceGeoTimezone,
			"source.user.domain", SourceUserDomain,
			"source.user.email", SourceUserEmail,
			"source.user.full_name", SourceUserFullName,
			"source.user.hash", SourceUserHash,
			"source.user.id", SourceUserId,
			"source.user.name", SourceUserName,
			"source.user.group.domain", SourceUserGroupDomain,
			"source.user.group.id", SourceUserGroupId,
			"source.user.group.name", SourceUserGroupName,
			"source.user.risk.calculated_level", SourceUserRiskCalculatedLevel,
			"source.user.risk.calculated_score", SourceUserRiskCalculatedScore,
			"source.user.risk.calculated_score_norm", SourceUserRiskCalculatedScoreNorm,
			"source.user.risk.static_level", SourceUserRiskStaticLevel,
			"source.user.risk.static_score", SourceUserRiskStaticScore,
			"source.user.risk.static_score_norm", SourceUserRiskStaticScoreNorm,
			"threat.feed.dashboard_id", ThreatFeedDashboardId,
			"threat.feed.description", ThreatFeedDescription,
			"threat.feed.name", ThreatFeedName,
			"threat.feed.reference", ThreatFeedReference,
			"threat.framework", ThreatFramework,
			"threat.group.id", ThreatGroupId,
			"threat.group.name", ThreatGroupName,
			"threat.group.reference", ThreatGroupReference,
			"threat.indicator.confidence", ThreatIndicatorConfidence,
			"threat.indicator.description", ThreatIndicatorDescription,
			"threat.indicator.email.address", ThreatIndicatorEmailAddress,
			"threat.indicator.first_seen", ThreatIndicatorFirstSeen,
			"threat.indicator.ip", ThreatIndicatorIp,
			"threat.indicator.last_seen", ThreatIndicatorLastSeen,
			"threat.indicator.marking.tlp", ThreatIndicatorMarkingTlp,
			"threat.indicator.marking.tlp_version", ThreatIndicatorMarkingTlpVersion,
			"threat.indicator.modified_at", ThreatIndicatorModifiedAt,
			"threat.indicator.name", ThreatIndicatorName,
			"threat.indicator.port", ThreatIndicatorPort,
			"threat.indicator.provider", ThreatIndicatorProvider,
			"threat.indicator.reference", ThreatIndicatorReference,
			"threat.indicator.scanner_stats", ThreatIndicatorScannerStats,
			"threat.indicator.sightings", ThreatIndicatorSightings,
			"threat.indicator.type", ThreatIndicatorType,
			"threat.software.id", ThreatSoftwareId,
			"threat.software.name", ThreatSoftwareName,
			"threat.software.reference", ThreatSoftwareReference,
			"threat.software.type", ThreatSoftwareType,
			"threat.indicator.x509.issuer.distinguished_name", ThreatIndicatorX509IssuerDistinguishedName,
			"threat.indicator.x509.not_after", ThreatIndicatorX509NotAfter,
			"threat.indicator.x509.not_before", ThreatIndicatorX509NotBefore,
			"threat.indicator.x509.public_key_algorithm", ThreatIndicatorX509PublicKeyAlgorithm,
			"threat.indicator.x509.public_key_curve", ThreatIndicatorX509PublicKeyCurve,
			"threat.indicator.x509.public_key_exponent", ThreatIndicatorX509PublicKeyExponent,
			"threat.indicator.x509.public_key_size", ThreatIndicatorX509PublicKeySize,
			"threat.indicator.x509.serial_number", ThreatIndicatorX509SerialNumber,
			"threat.indicator.x509.signature_algorithm", ThreatIndicatorX509SignatureAlgorithm,
			"threat.indicator.x509.subject.distinguished_name", ThreatIndicatorX509SubjectDistinguishedName,
			"threat.indicator.x509.version_number", ThreatIndicatorX509VersionNumber,
			"threat.indicator.as.number", ThreatIndicatorAsNumber,
			"threat.indicator.as.organization.name", ThreatIndicatorAsOrganizationName,
			"threat.indicator.file.accessed", ThreatIndicatorFileAccessed,
			"threat.indicator.file.created", ThreatIndicatorFileCreated,
			"threat.indicator.file.ctime", ThreatIndicatorFileCtime,
			"threat.indicator.file.device", ThreatIndicatorFileDevice,
			"threat.indicator.file.directory", ThreatIndicatorFileDirectory,
			"threat.indicator.file.drive_letter", ThreatIndicatorFileDriveLetter,
			"threat.indicator.file.extension", ThreatIndicatorFileExtension,
			"threat.indicator.file.fork_name", ThreatIndicatorFileForkName,
			"threat.indicator.file.gid", ThreatIndicatorFileGid,
			"threat.indicator.file.group", ThreatIndicatorFileGroup,
			"threat.indicator.file.inode", ThreatIndicatorFileInode,
			"threat.indicator.file.mime_type", ThreatIndicatorFileMimeType,
			"threat.indicator.file.mode", ThreatIndicatorFileMode,
			"threat.indicator.file.mtime", ThreatIndicatorFileMtime,
			"threat.indicator.file.name", ThreatIndicatorFileName,
			"threat.indicator.file.owner", ThreatIndicatorFileOwner,
			"threat.indicator.file.path", ThreatIndicatorFilePath,
			"threat.indicator.file.size", ThreatIndicatorFileSize,
			"threat.indicator.file.target_path", ThreatIndicatorFileTargetPath,
			"threat.indicator.file.type", ThreatIndicatorFileType,
			"threat.indicator.file.uid", ThreatIndicatorFileUid,
			"threat.indicator.file.hash.md5", ThreatIndicatorFileHashMd5,
			"threat.indicator.file.hash.sha1", ThreatIndicatorFileHashSha1,
			"threat.indicator.file.hash.sha256", ThreatIndicatorFileHashSha256,
			"threat.indicator.file.hash.sha384", ThreatIndicatorFileHashSha384,
			"threat.indicator.file.hash.sha512", ThreatIndicatorFileHashSha512,
			"threat.indicator.file.hash.ssdeep", ThreatIndicatorFileHashSsdeep,
			"threat.indicator.file.hash.tlsh", ThreatIndicatorFileHashTlsh,
			"threat.indicator.file.pe.architecture", ThreatIndicatorFilePeArchitecture,
			"threat.indicator.file.pe.company", ThreatIndicatorFilePeCompany,
			"threat.indicator.file.pe.description", ThreatIndicatorFilePeDescription,
			"threat.indicator.file.pe.file_version", ThreatIndicatorFilePeFileVersion,
			"threat.indicator.file.pe.go_import_hash", ThreatIndicatorFilePeGoImportHash,
			"threat.indicator.file.pe.go_imports", ThreatIndicatorFilePeGoImports,
			"threat.indicator.file.pe.go_imports_names_entropy", ThreatIndicatorFilePeGoImportsNamesEntropy,
			"threat.indicator.file.pe.go_imports_names_var_entropy", ThreatIndicatorFilePeGoImportsNamesVarEntropy,
			"threat.indicator.file.pe.go_stripped", ThreatIndicatorFilePeGoStripped,
			"threat.indicator.file.pe.imphash", ThreatIndicatorFilePeImphash,
			"threat.indicator.file.pe.import_hash", ThreatIndicatorFilePeImportHash,
			"threat.indicator.file.pe.imports_names_entropy", ThreatIndicatorFilePeImportsNamesEntropy,
			"threat.indicator.file.pe.imports_names_var_entropy", ThreatIndicatorFilePeImportsNamesVarEntropy,
			"threat.indicator.file.pe.original_file_name", ThreatIndicatorFilePeOriginalFileName,
			"threat.indicator.file.pe.pehash", ThreatIndicatorFilePePehash,
			"threat.indicator.file.pe.product", ThreatIndicatorFilePeProduct,
			"threat.indicator.file.x509.issuer.distinguished_name", ThreatIndicatorFileX509IssuerDistinguishedName,
			"threat.indicator.file.x509.not_after", ThreatIndicatorFileX509NotAfter,
			"threat.indicator.file.x509.not_before", ThreatIndicatorFileX509NotBefore,
			"threat.indicator.file.x509.public_key_algorithm", ThreatIndicatorFileX509PublicKeyAlgorithm,
			"threat.indicator.file.x509.public_key_curve", ThreatIndicatorFileX509PublicKeyCurve,
			"threat.indicator.file.x509.public_key_exponent", ThreatIndicatorFileX509PublicKeyExponent,
			"threat.indicator.file.x509.public_key_size", ThreatIndicatorFileX509PublicKeySize,
			"threat.indicator.file.x509.serial_number", ThreatIndicatorFileX509SerialNumber,
			"threat.indicator.file.x509.signature_algorithm", ThreatIndicatorFileX509SignatureAlgorithm,
			"threat.indicator.file.x509.subject.distinguished_name", ThreatIndicatorFileX509SubjectDistinguishedName,
			"threat.indicator.file.x509.version_number", ThreatIndicatorFileX509VersionNumber,
			"threat.indicator.file.code_signature.digest_algorithm", ThreatIndicatorFileCodeSignatureDigestAlgorithm,
			"threat.indicator.file.code_signature.exists", ThreatIndicatorFileCodeSignatureExists,
			"threat.indicator.file.code_signature.signing_id", ThreatIndicatorFileCodeSignatureSigningId,
			"threat.indicator.file.code_signature.status", ThreatIndicatorFileCodeSignatureStatus,
			"threat.indicator.file.code_signature.subject_name", ThreatIndicatorFileCodeSignatureSubjectName,
			"threat.indicator.file.code_signature.team_id", ThreatIndicatorFileCodeSignatureTeamId,
			"threat.indicator.file.code_signature.timestamp", ThreatIndicatorFileCodeSignatureTimestamp,
			"threat.indicator.file.code_signature.trusted", ThreatIndicatorFileCodeSignatureTrusted,
			"threat.indicator.file.code_signature.valid", ThreatIndicatorFileCodeSignatureValid,
			"threat.indicator.file.elf.architecture", ThreatIndicatorFileElfArchitecture,
			"threat.indicator.file.elf.byte_order", ThreatIndicatorFileElfByteOrder,
			"threat.indicator.file.elf.cpu_type", ThreatIndicatorFileElfCpuType,
			"threat.indicator.file.elf.creation_date", ThreatIndicatorFileElfCreationDate,
			"threat.indicator.file.elf.go_import_hash", ThreatIndicatorFileElfGoImportHash,
			"threat.indicator.file.elf.go_imports", ThreatIndicatorFileElfGoImports,
			"threat.indicator.file.elf.go_imports_names_entropy", ThreatIndicatorFileElfGoImportsNamesEntropy,
			"threat.indicator.file.elf.go_imports_names_var_entropy", ThreatIndicatorFileElfGoImportsNamesVarEntropy,
			"threat.indicator.file.elf.go_stripped", ThreatIndicatorFileElfGoStripped,
			"threat.indicator.file.elf.header.abi_version", ThreatIndicatorFileElfHeaderAbiVersion,
			"threat.indicator.file.elf.header.class", ThreatIndicatorFileElfHeaderClass,
			"threat.indicator.file.elf.header.data", ThreatIndicatorFileElfHeaderData,
			"threat.indicator.file.elf.header.entrypoint", ThreatIndicatorFileElfHeaderEntrypoint,
			"threat.indicator.file.elf.header.object_version", ThreatIndicatorFileElfHeaderObjectVersion,
			"threat.indicator.file.elf.header.os_abi", ThreatIndicatorFileElfHeaderOsAbi,
			"threat.indicator.file.elf.header.type", ThreatIndicatorFileElfHeaderType,
			"threat.indicator.file.elf.header.version", ThreatIndicatorFileElfHeaderVersion,
			"threat.indicator.file.elf.import_hash", ThreatIndicatorFileElfImportHash,
			"threat.indicator.file.elf.imports_names_entropy", ThreatIndicatorFileElfImportsNamesEntropy,
			"threat.indicator.file.elf.imports_names_var_entropy", ThreatIndicatorFileElfImportsNamesVarEntropy,
			"threat.indicator.file.elf.telfhash", ThreatIndicatorFileElfTelfhash,
			"threat.indicator.file.macho.go_import_hash", ThreatIndicatorFileMachoGoImportHash,
			"threat.indicator.file.macho.go_imports", ThreatIndicatorFileMachoGoImports,
			"threat.indicator.file.macho.go_imports_names_entropy", ThreatIndicatorFileMachoGoImportsNamesEntropy,
			"threat.indicator.file.macho.go_imports_names_var_entropy", ThreatIndicatorFileMachoGoImportsNamesVarEntropy,
			"threat.indicator.file.macho.go_stripped", ThreatIndicatorFileMachoGoStripped,
			"threat.indicator.file.macho.import_hash", ThreatIndicatorFileMachoImportHash,
			"threat.indicator.file.macho.imports_names_entropy", ThreatIndicatorFileMachoImportsNamesEntropy,
			"threat.indicator.file.macho.imports_names_var_entropy", ThreatIndicatorFileMachoImportsNamesVarEntropy,
			"threat.indicator.file.macho.symhash", ThreatIndicatorFileMachoSymhash,
			"threat.indicator.geo.city_name", ThreatIndicatorGeoCityName,
			"threat.indicator.geo.continent_code", ThreatIndicatorGeoContinentCode,
			"threat.indicator.geo.continent_name", ThreatIndicatorGeoContinentName,
			"threat.indicator.geo.country_iso_code", ThreatIndicatorGeoCountryIsoCode,
			"threat.indicator.geo.country_name", ThreatIndicatorGeoCountryName,
			"threat.indicator.geo.location", ThreatIndicatorGeoLocation,
			"threat.indicator.geo.name", ThreatIndicatorGeoName,
			"threat.indicator.geo.postal_code", ThreatIndicatorGeoPostalCode,
			"threat.indicator.geo.region_iso_code", ThreatIndicatorGeoRegionIsoCode,
			"threat.indicator.geo.region_name", ThreatIndicatorGeoRegionName,
			"threat.indicator.geo.timezone", ThreatIndicatorGeoTimezone,
			"threat.indicator.registry.data.bytes", ThreatIndicatorRegistryDataBytes,
			"threat.indicator.registry.data.type", ThreatIndicatorRegistryDataType,
			"threat.indicator.registry.hive", ThreatIndicatorRegistryHive,
			"threat.indicator.registry.key", ThreatIndicatorRegistryKey,
			"threat.indicator.registry.path", ThreatIndicatorRegistryPath,
			"threat.indicator.registry.value", ThreatIndicatorRegistryValue,
			"threat.indicator.url.domain", ThreatIndicatorUrlDomain,
			"threat.indicator.url.extension", ThreatIndicatorUrlExtension,
			"threat.indicator.url.fragment", ThreatIndicatorUrlFragment,
			"threat.indicator.url.full", ThreatIndicatorUrlFull,
			"threat.indicator.url.original", ThreatIndicatorUrlOriginal,
			"threat.indicator.url.password", ThreatIndicatorUrlPassword,
			"threat.indicator.url.path", ThreatIndicatorUrlPath,
			"threat.indicator.url.port", ThreatIndicatorUrlPort,
			"threat.indicator.url.query", ThreatIndicatorUrlQuery,
			"threat.indicator.url.registered_domain", ThreatIndicatorUrlRegisteredDomain,
			"threat.indicator.url.scheme", ThreatIndicatorUrlScheme,
			"threat.indicator.url.subdomain", ThreatIndicatorUrlSubdomain,
			"threat.indicator.url.top_level_domain", ThreatIndicatorUrlTopLevelDomain,
			"threat.indicator.url.username", ThreatIndicatorUrlUsername,
			"tls.cipher", TlsCipher,
			"tls.client.certificate", TlsClientCertificate,
			"tls.client.hash.md5", TlsClientHashMd5,
			"tls.client.hash.sha1", TlsClientHashSha1,
			"tls.client.hash.sha256", TlsClientHashSha256,
			"tls.client.issuer", TlsClientIssuer,
			"tls.client.ja3", TlsClientJa3,
			"tls.client.not_after", TlsClientNotAfter,
			"tls.client.not_before", TlsClientNotBefore,
			"tls.client.server_name", TlsClientServerName,
			"tls.client.subject", TlsClientSubject,
			"tls.curve", TlsCurve,
			"tls.established", TlsEstablished,
			"tls.next_protocol", TlsNextProtocol,
			"tls.resumed", TlsResumed,
			"tls.server.certificate", TlsServerCertificate,
			"tls.server.hash.md5", TlsServerHashMd5,
			"tls.server.hash.sha1", TlsServerHashSha1,
			"tls.server.hash.sha256", TlsServerHashSha256,
			"tls.server.issuer", TlsServerIssuer,
			"tls.server.ja3s", TlsServerJa3s,
			"tls.server.not_after", TlsServerNotAfter,
			"tls.server.not_before", TlsServerNotBefore,
			"tls.server.subject", TlsServerSubject,
			"tls.version", TlsVersion,
			"tls.version_protocol", TlsVersionProtocol,
			"tls.client.x509.issuer.distinguished_name", TlsClientX509IssuerDistinguishedName,
			"tls.client.x509.not_after", TlsClientX509NotAfter,
			"tls.client.x509.not_before", TlsClientX509NotBefore,
			"tls.client.x509.public_key_algorithm", TlsClientX509PublicKeyAlgorithm,
			"tls.client.x509.public_key_curve", TlsClientX509PublicKeyCurve,
			"tls.client.x509.public_key_exponent", TlsClientX509PublicKeyExponent,
			"tls.client.x509.public_key_size", TlsClientX509PublicKeySize,
			"tls.client.x509.serial_number", TlsClientX509SerialNumber,
			"tls.client.x509.signature_algorithm", TlsClientX509SignatureAlgorithm,
			"tls.client.x509.subject.distinguished_name", TlsClientX509SubjectDistinguishedName,
			"tls.client.x509.version_number", TlsClientX509VersionNumber,
			"url.domain", UrlDomain,
			"url.extension", UrlExtension,
			"url.fragment", UrlFragment,
			"url.full", UrlFull,
			"url.original", UrlOriginal,
			"url.password", UrlPassword,
			"url.path", UrlPath,
			"url.port", UrlPort,
			"url.query", UrlQuery,
			"url.registered_domain", UrlRegisteredDomain,
			"url.scheme", UrlScheme,
			"url.subdomain", UrlSubdomain,
			"url.top_level_domain", UrlTopLevelDomain,
			"url.username", UrlUsername,
			"user.domain", UserDomain,
			"user.email", UserEmail,
			"user.full_name", UserFullName,
			"user.hash", UserHash,
			"user.id", UserId,
			"user.name", UserName,
			"user.group.domain", UserGroupDomain,
			"user.group.id", UserGroupId,
			"user.group.name", UserGroupName,
			"user.risk.calculated_level", UserRiskCalculatedLevel,
			"user.risk.calculated_score", UserRiskCalculatedScore,
			"user.risk.calculated_score_norm", UserRiskCalculatedScoreNorm,
			"user.risk.static_level", UserRiskStaticLevel,
			"user.risk.static_score", UserRiskStaticScore,
			"user.risk.static_score_norm", UserRiskStaticScoreNorm,
			"user_agent.device.name", UserAgentDeviceName,
			"user_agent.name", UserAgentName,
			"user_agent.original", UserAgentOriginal,
			"user_agent.version", UserAgentVersion,
			"user_agent.os.family", UserAgentOsFamily,
			"user_agent.os.full", UserAgentOsFull,
			"user_agent.os.kernel", UserAgentOsKernel,
			"user_agent.os.name", UserAgentOsName,
			"user_agent.os.platform", UserAgentOsPlatform,
			"user_agent.os.type", UserAgentOsType,
			"user_agent.os.version", UserAgentOsVersion,
			"vlan.id", VlanId,
			"vlan.name", VlanName,
			"vulnerability.classification", VulnerabilityClassification,
			"vulnerability.description", VulnerabilityDescription,
			"vulnerability.enumeration", VulnerabilityEnumeration,
			"vulnerability.id", VulnerabilityId,
			"vulnerability.reference", VulnerabilityReference,
			"vulnerability.report_id", VulnerabilityReportId,
			"vulnerability.scanner.vendor", VulnerabilityScannerVendor,
			"vulnerability.score.base", VulnerabilityScoreBase,
			"vulnerability.score.environmental", VulnerabilityScoreEnvironmental,
			"vulnerability.score.temporal", VulnerabilityScoreTemporal,
			"vulnerability.score.version", VulnerabilityScoreVersion,
			"vulnerability.severity", VulnerabilitySeverity,
			"x509.issuer.distinguished_name", X509IssuerDistinguishedName,
			"x509.not_after", X509NotAfter,
			"x509.not_before", X509NotBefore,
			"x509.public_key_algorithm", X509PublicKeyAlgorithm,
			"x509.public_key_curve", X509PublicKeyCurve,
			"x509.public_key_exponent", X509PublicKeyExponent,
			"x509.public_key_size", X509PublicKeySize,
			"x509.serial_number", X509SerialNumber,
			"x509.signature_algorithm", X509SignatureAlgorithm,
			"x509.subject.distinguished_name", X509SubjectDistinguishedName,
			"x509.version_number", X509VersionNumber,
		};
	}

}