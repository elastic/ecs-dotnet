// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information

/*
IMPORTANT NOTE
==============
This file has been generated. 
If you wish to submit a PR please modify the original csharp file and submit the PR with that change. Thanks!
*/

// ReSharper disable RedundantUsingDirective
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using System.Net;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;

#nullable enable
namespace Elastic.CommonSchema
{

	///<summary>
	/// The agent fields contain the data about the software entity, if any, that collects, detects, or observes events on a host, or takes measurements on a host.&#xA;Examples include Beats. Agents may also run on observers. ECS agent.* fields shall be populated with details of the agent running on the host or observer where the event happened or the measurement was taken.
	///</summary>
	public abstract class AgentFieldSet {

		///<summary>
		/// <para><c>agent.build.original</c></para>
		/// <para>Extended build information for the agent.
		/// This field is intended to contain any build information that a data source may provide, no specific formatting is required.</para>
		/// <example>metricbeat version 7.6.0 (amd64), libbeat 7.6.0 [6a23e8f8f30f5001ba344e4e54d8d9cb82cb107c built 2020-02-05 23:10:10 +0000 UTC]</example>
		///</summary>
		[JsonPropertyName("build.original"), DataMember(Name = "build.original")]
		public string? BuildOriginal { get; set; }

		///<summary>
		/// <para><c>agent.ephemeral_id</c></para>
		/// <para>Ephemeral identifier of this agent (if one exists).
		/// This id normally changes across restarts, but `agent.id` does not.</para>
		/// <example>8a4f500f</example>
		///</summary>
		[JsonPropertyName("ephemeral_id"), DataMember(Name = "ephemeral_id")]
		public string? EphemeralId { get; set; }

		///<summary>
		/// <para><c>agent.id</c></para>
		/// <para>Unique identifier of this agent (if one exists).
		/// Example: For Beats this would be beat.id.</para>
		/// <example>8a4f500d</example>
		///</summary>
		[JsonPropertyName("id"), DataMember(Name = "id")]
		public string? Id { get; set; }

		///<summary>
		/// <para><c>agent.name</c></para>
		/// <para>Custom name of the agent.
		/// This is a name that can be given to an agent. This can be helpful if for example two Filebeat instances are running on the same host but a human readable separation is needed on which Filebeat instance data is coming from.</para>
		/// <example>foo</example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }

		///<summary>
		/// <para><c>agent.type</c></para>
		/// <para>Type of the agent.
		/// The agent type always stays the same and should be given by the agent used. In case of Filebeat the agent would always be Filebeat also if two Filebeat instances are run on the same machine.</para>
		/// <example>filebeat</example>
		///</summary>
		[JsonPropertyName("type"), DataMember(Name = "type")]
		public string? Type { get; set; }

		///<summary>
		/// <para><c>agent.version</c></para>
		/// <para>Version of the agent.</para>
		/// <example>6.0.0-rc2</example>
		///</summary>
		[JsonPropertyName("version"), DataMember(Name = "version")]
		public string? Version { get; set; }
	}

	///<summary>
	/// An autonomous system (AS) is a collection of connected Internet Protocol (IP) routing prefixes under the control of one or more network operators on behalf of a single administrative entity or domain that presents a common, clearly defined routing policy to the internet.
	///</summary>
	public abstract class AsFieldSet {

		///<summary>
		/// <para><c>as.number</c></para>
		/// <para>Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.</para>
		/// <example>15169</example>
		///</summary>
		[JsonPropertyName("number"), DataMember(Name = "number")]
		public long? Number { get; set; }

		///<summary>
		/// <para><c>as.organization.name</c></para>
		/// <para>Organization name.</para>
		/// <example>Google LLC</example>
		///</summary>
		[JsonPropertyName("organization.name"), DataMember(Name = "organization.name")]
		public string? OrganizationName { get; set; }
	}

	///<summary>
	/// The `base` field set contains all fields which are at the root of the events. These fields are common across all types of events.
	///</summary>
	public abstract class BaseFieldSet {

		///<summary>
		/// <para><c>@timestamp</c></para>
		/// <para>Date/time when the event originated.
		/// This is the date/time extracted from the event, typically representing when the event was generated by the source.
		/// If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.
		/// Required field for all events.
		/// <para><br/>This is a required field</para></para>
		/// <example>5/23/2016 8:05:34â€¯AM</example>
		///</summary>
		[JsonPropertyName("@timestamp"), DataMember(Name = "@timestamp")]
		public DateTimeOffset? Timestamp { get; set; }

		///<summary>
		/// <para><c>message</c></para>
		/// <para>For log events the message field contains the log message, optimized for viewing in a log viewer.
		/// For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.
		/// If multiple messages exist, they can be combined into one message.</para>
		/// <example>Hello World</example>
		///</summary>
		[JsonPropertyName("message"), DataMember(Name = "message")]
		public string? Message { get; set; }

		///<summary>
		/// <para><c>tags</c></para>
		/// <para>List of keywords used to tag each event.</para>
		/// <example>["production", "env2"]</example>
		///</summary>
		[JsonPropertyName("tags"), DataMember(Name = "tags")]
		public string[]? Tags { get; set; }

		///<summary>
		/// <para><c>span.id</c></para>
		/// <para>Unique identifier of the span within the scope of its trace.
		/// A span represents an operation within a transaction, such as a request to another service, or a database query.</para>
		/// <example>3ff9a8981b7ccd5a</example>
		///</summary>
		[JsonPropertyName("span.id"), DataMember(Name = "span.id")]
		public string? SpanId { get; set; }

		///<summary>
		/// <para><c>trace.id</c></para>
		/// <para>Unique identifier of the trace.
		/// A trace groups multiple events like transactions that belong together. For example, a user request handled by multiple inter-connected services.</para>
		/// <example>4bf92f3577b34da6a3ce929d0e0e4736</example>
		///</summary>
		[JsonPropertyName("trace.id"), DataMember(Name = "trace.id")]
		public string? TraceId { get; set; }

		///<summary>
		/// <para><c>transaction.id</c></para>
		/// <para>Unique identifier of the transaction within the scope of its trace.
		/// A transaction is the highest level of work measured within a service, such as a request to a server.</para>
		/// <example>00f067aa0ba902b7</example>
		///</summary>
		[JsonPropertyName("transaction.id"), DataMember(Name = "transaction.id")]
		public string? TransactionId { get; set; }

		///<summary>
		/// <para><c>labels</c></para>
		/// <para>Custom key/value pairs.
		/// Can be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.
		/// Example: `docker` and `k8s` labels.</para>
		/// <example>{"application": "foo-bar", "env": "production"}</example>
		///</summary>
		[JsonPropertyName("labels"), DataMember(Name = "labels")]
		public Labels? Labels { get; set; }
	}

	///<summary>
	/// A client is defined as the initiator of a network connection for events regarding sessions, connections, or bidirectional flow records.&#xA;For TCP events, the client is the initiator of the TCP connection that sends the SYN packet(s). For other protocols, the client is generally the initiator or requestor in the network transaction. Some systems use the term &quot;originator&quot; to refer the client in TCP connections. The client fields describe details about the system acting as the client in the network event. Client fields are usually populated in conjunction with server fields. Client fields are generally not populated for packet-level events.&#xA;Client / server representations can add semantic context to an exchange, which is helpful to visualize the data in certain situations. If your context falls in that category, you should still ensure that source and destination are filled appropriately.
	///</summary>
	public abstract class ClientFieldSet {

		///<summary>
		/// <para><c>client.address</c></para>
		/// <para>Some event client addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
		/// Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("address"), DataMember(Name = "address")]
		public string? Address { get; set; }

		///<summary>
		/// <para><c>client.bytes</c></para>
		/// <para>Bytes sent from the client to the server.</para>
		/// <example>184</example>
		///</summary>
		[JsonPropertyName("bytes"), DataMember(Name = "bytes")]
		public long? Bytes { get; set; }

		///<summary>
		/// <para><c>client.domain</c></para>
		/// <para>The domain name of the client system.
		/// This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.</para>
		/// <example>foo.example.com</example>
		///</summary>
		[JsonPropertyName("domain"), DataMember(Name = "domain")]
		public string? Domain { get; set; }

		///<summary>
		/// <para><c>client.ip</c></para>
		/// <para>IP address of the client (IPv4 or IPv6).</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("ip"), DataMember(Name = "ip")]
		public string? Ip { get; set; }

		///<summary>
		/// <para><c>client.mac</c></para>
		/// <para>MAC address of the client.
		/// The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
		/// <para>pattern: </para></para>
		/// <example>00-00-5E-00-53-23</example>
		///</summary>
		[JsonPropertyName("mac"), DataMember(Name = "mac")]
		public string? Mac { get; set; }

		///<summary>
		/// <para><c>client.nat.ip</c></para>
		/// <para>Translated IP of source based NAT sessions (e.g. internal client to internet).
		/// Typically connections traversing load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("nat.ip"), DataMember(Name = "nat.ip")]
		public string? NatIp { get; set; }

		///<summary>
		/// <para><c>client.nat.port</c></para>
		/// <para>Translated port of source based NAT sessions (e.g. internal client to internet).
		/// Typically connections traversing load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("nat.port"), DataMember(Name = "nat.port")]
		public long? NatPort { get; set; }

		///<summary>
		/// <para><c>client.packets</c></para>
		/// <para>Packets sent from the client to the server.</para>
		/// <example>12</example>
		///</summary>
		[JsonPropertyName("packets"), DataMember(Name = "packets")]
		public long? Packets { get; set; }

		///<summary>
		/// <para><c>client.port</c></para>
		/// <para>Port of the client.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("port"), DataMember(Name = "port")]
		public long? Port { get; set; }

		///<summary>
		/// <para><c>client.registered_domain</c></para>
		/// <para>The highest registered client domain, stripped of the subdomain.
		/// For example, the registered domain for "foo.example.com" is "example.com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".</para>
		/// <example>example.com</example>
		///</summary>
		[JsonPropertyName("registered_domain"), DataMember(Name = "registered_domain")]
		public string? RegisteredDomain { get; set; }

		///<summary>
		/// <para><c>client.subdomain</c></para>
		/// <para>The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
		/// For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.</para>
		/// <example>east</example>
		///</summary>
		[JsonPropertyName("subdomain"), DataMember(Name = "subdomain")]
		public string? Subdomain { get; set; }

		///<summary>
		/// <para><c>client.top_level_domain</c></para>
		/// <para>The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".</para>
		/// <example>co.uk</example>
		///</summary>
		[JsonPropertyName("top_level_domain"), DataMember(Name = "top_level_domain")]
		public string? TopLevelDomain { get; set; }
	}

	///<summary>
	/// Fields related to the cloud or infrastructure the events are coming from.
	///</summary>
	public abstract class CloudFieldSet {

		///<summary>
		/// <para><c>cloud.account.id</c></para>
		/// <para>The cloud account or organization id used to identify different entities in a multi-tenant environment.
		/// Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.</para>
		/// <example>666777888999</example>
		///</summary>
		[JsonPropertyName("account.id"), DataMember(Name = "account.id")]
		public string? AccountId { get; set; }

		///<summary>
		/// <para><c>cloud.account.name</c></para>
		/// <para>The cloud account name or alias used to identify different entities in a multi-tenant environment.
		/// Examples: AWS account name, Google Cloud ORG display name.</para>
		/// <example>elastic-dev</example>
		///</summary>
		[JsonPropertyName("account.name"), DataMember(Name = "account.name")]
		public string? AccountName { get; set; }

		///<summary>
		/// <para><c>cloud.availability_zone</c></para>
		/// <para>Availability zone in which this host, resource, or service is located.</para>
		/// <example>us-east-1c</example>
		///</summary>
		[JsonPropertyName("availability_zone"), DataMember(Name = "availability_zone")]
		public string? AvailabilityZone { get; set; }

		///<summary>
		/// <para><c>cloud.instance.id</c></para>
		/// <para>Instance ID of the host machine.</para>
		/// <example>i-1234567890abcdef0</example>
		///</summary>
		[JsonPropertyName("instance.id"), DataMember(Name = "instance.id")]
		public string? InstanceId { get; set; }

		///<summary>
		/// <para><c>cloud.instance.name</c></para>
		/// <para>Instance name of the host machine.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("instance.name"), DataMember(Name = "instance.name")]
		public string? InstanceName { get; set; }

		///<summary>
		/// <para><c>cloud.machine.type</c></para>
		/// <para>Machine type of the host machine.</para>
		/// <example>t2.medium</example>
		///</summary>
		[JsonPropertyName("machine.type"), DataMember(Name = "machine.type")]
		public string? MachineType { get; set; }

		///<summary>
		/// <para><c>cloud.project.id</c></para>
		/// <para>The cloud project identifier.
		/// Examples: Google Cloud Project id, Azure Project id.</para>
		/// <example>my-project</example>
		///</summary>
		[JsonPropertyName("project.id"), DataMember(Name = "project.id")]
		public string? ProjectId { get; set; }

		///<summary>
		/// <para><c>cloud.project.name</c></para>
		/// <para>The cloud project name.
		/// Examples: Google Cloud Project name, Azure Project name.</para>
		/// <example>my project</example>
		///</summary>
		[JsonPropertyName("project.name"), DataMember(Name = "project.name")]
		public string? ProjectName { get; set; }

		///<summary>
		/// <para><c>cloud.provider</c></para>
		/// <para>Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean.</para>
		/// <example>aws</example>
		///</summary>
		[JsonPropertyName("provider"), DataMember(Name = "provider")]
		public string? Provider { get; set; }

		///<summary>
		/// <para><c>cloud.region</c></para>
		/// <para>Region in which this host, resource, or service is located.</para>
		/// <example>us-east-1</example>
		///</summary>
		[JsonPropertyName("region"), DataMember(Name = "region")]
		public string? Region { get; set; }

		///<summary>
		/// <para><c>cloud.service.name</c></para>
		/// <para>The cloud service name is intended to distinguish services running on different platforms within a provider, eg AWS EC2 vs Lambda, GCP GCE vs App Engine, Azure VM vs App Server.
		/// Examples: app engine, app service, cloud run, fargate, lambda.</para>
		/// <example>lambda</example>
		///</summary>
		[JsonPropertyName("service.name"), DataMember(Name = "service.name")]
		public string? ServiceName { get; set; }
	}

	///<summary>
	/// These fields contain information about binary code signatures.
	///</summary>
	public abstract class CodeSignatureFieldSet {

		///<summary>
		/// <para><c>code_signature.digest_algorithm</c></para>
		/// <para>The hashing algorithm used to sign the process.
		/// This value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.</para>
		/// <example>sha256</example>
		///</summary>
		[JsonPropertyName("digest_algorithm"), DataMember(Name = "digest_algorithm")]
		public string? DigestAlgorithm { get; set; }

		///<summary>
		/// <para><c>code_signature.exists</c></para>
		/// <para>Boolean to capture if a signature is present.</para>
		/// <example>true</example>
		///</summary>
		[JsonPropertyName("exists"), DataMember(Name = "exists")]
		public bool? Exists { get; set; }

		///<summary>
		/// <para><c>code_signature.signing_id</c></para>
		/// <para>The identifier used to sign the process.
		/// This is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.</para>
		/// <example>com.apple.xpc.proxy</example>
		///</summary>
		[JsonPropertyName("signing_id"), DataMember(Name = "signing_id")]
		public string? SigningId { get; set; }

		///<summary>
		/// <para><c>code_signature.status</c></para>
		/// <para>Additional information about the certificate status.
		/// This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.</para>
		/// <example>ERROR_UNTRUSTED_ROOT</example>
		///</summary>
		[JsonPropertyName("status"), DataMember(Name = "status")]
		public string? Status { get; set; }

		///<summary>
		/// <para><c>code_signature.subject_name</c></para>
		/// <para>Subject name of the code signer</para>
		/// <example>Microsoft Corporation</example>
		///</summary>
		[JsonPropertyName("subject_name"), DataMember(Name = "subject_name")]
		public string? SubjectName { get; set; }

		///<summary>
		/// <para><c>code_signature.team_id</c></para>
		/// <para>The team identifier used to sign the process.
		/// This is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.</para>
		/// <example>EQHXZ8M8AV</example>
		///</summary>
		[JsonPropertyName("team_id"), DataMember(Name = "team_id")]
		public string? TeamId { get; set; }

		///<summary>
		/// <para><c>code_signature.timestamp</c></para>
		/// <para>Date and time when the code signature was generated and signed.</para>
		/// <example>1/1/2021 12:10:30â€¯PM</example>
		///</summary>
		[JsonPropertyName("timestamp"), DataMember(Name = "timestamp")]
		public DateTimeOffset? Timestamp { get; set; }

		///<summary>
		/// <para><c>code_signature.trusted</c></para>
		/// <para>Stores the trust status of the certificate chain.
		/// Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.</para>
		/// <example>true</example>
		///</summary>
		[JsonPropertyName("trusted"), DataMember(Name = "trusted")]
		public bool? Trusted { get; set; }

		///<summary>
		/// <para><c>code_signature.valid</c></para>
		/// <para>Boolean to capture if the digital signature is verified against the binary content.
		/// Leave unpopulated if a certificate was unchecked.</para>
		/// <example>true</example>
		///</summary>
		[JsonPropertyName("valid"), DataMember(Name = "valid")]
		public bool? Valid { get; set; }
	}

	///<summary>
	/// Container fields are used for meta information about the specific container that is the source of information.&#xA;These fields help correlate data based containers from any runtime.
	///</summary>
	public abstract class ContainerFieldSet {

		///<summary>
		/// <para><c>container.cpu.usage</c></para>
		/// <para>Percent CPU used which is normalized by the number of CPU cores and it ranges from 0 to 1. Scaling factor: 1000.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("cpu.usage"), DataMember(Name = "cpu.usage")]
		public float? CpuUsage { get; set; }

		///<summary>
		/// <para><c>container.disk.read.bytes</c></para>
		/// <para>The total number of bytes (gauge) read successfully (aggregated from all disks) since the last metric collection.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("disk.read.bytes"), DataMember(Name = "disk.read.bytes")]
		public long? DiskReadBytes { get; set; }

		///<summary>
		/// <para><c>container.disk.write.bytes</c></para>
		/// <para>The total number of bytes (gauge) written successfully (aggregated from all disks) since the last metric collection.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("disk.write.bytes"), DataMember(Name = "disk.write.bytes")]
		public long? DiskWriteBytes { get; set; }

		///<summary>
		/// <para><c>container.id</c></para>
		/// <para>Unique container id.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("id"), DataMember(Name = "id")]
		public string? Id { get; set; }

		///<summary>
		/// <para><c>container.image.hash.all</c></para>
		/// <para>An array of digests of the image the container was built on. Each digest consists of the hash algorithm and value in this format: `algorithm:value`. Algorithm names should align with the field names in the ECS hash field set.</para>
		/// <example>[sha256:f8fefc80e3273dc756f288a63945820d6476ad64883892c771b5e2ece6bf1b26]</example>
		///</summary>
		[JsonPropertyName("image.hash.all"), DataMember(Name = "image.hash.all")]
		public string[]? ImageHashAll { get; set; }

		///<summary>
		/// <para><c>container.image.name</c></para>
		/// <para>Name of the image the container was built on.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("image.name"), DataMember(Name = "image.name")]
		public string? ImageName { get; set; }

		///<summary>
		/// <para><c>container.image.tag</c></para>
		/// <para>Container image tags.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("image.tag"), DataMember(Name = "image.tag")]
		public string[]? ImageTag { get; set; }

		///<summary>
		/// <para><c>container.memory.usage</c></para>
		/// <para>Memory usage percentage and it ranges from 0 to 1. Scaling factor: 1000.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("memory.usage"), DataMember(Name = "memory.usage")]
		public float? MemoryUsage { get; set; }

		///<summary>
		/// <para><c>container.name</c></para>
		/// <para>Container name.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }

		///<summary>
		/// <para><c>container.network.egress.bytes</c></para>
		/// <para>The number of bytes (gauge) sent out on all network interfaces by the container since the last metric collection.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("network.egress.bytes"), DataMember(Name = "network.egress.bytes")]
		public long? NetworkEgressBytes { get; set; }

		///<summary>
		/// <para><c>container.network.ingress.bytes</c></para>
		/// <para>The number of bytes received (gauge) on all network interfaces by the container since the last metric collection.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("network.ingress.bytes"), DataMember(Name = "network.ingress.bytes")]
		public long? NetworkIngressBytes { get; set; }

		///<summary>
		/// <para><c>container.runtime</c></para>
		/// <para>Runtime managing this container.</para>
		/// <example>docker</example>
		///</summary>
		[JsonPropertyName("runtime"), DataMember(Name = "runtime")]
		public string? Runtime { get; set; }

		///<summary>
		/// <para><c>container.security_context.privileged</c></para>
		/// <para>Indicates whether the container is running in privileged mode.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("security_context.privileged"), DataMember(Name = "security_context.privileged")]
		public bool? SecurityContextPrivileged { get; set; }

		///<summary>
		/// <para><c>container.labels</c></para>
		/// <para>Image labels.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("labels"), DataMember(Name = "labels")]
		public ContainerLabels? Labels { get; set; }
	}

	///<summary>
	/// The data_stream fields take part in defining the new data stream naming scheme.&#xA;In the new data stream naming scheme the value of the data stream fields combine to the name of the actual data stream in the following manner: `{data_stream.type}-{data_stream.dataset}-{data_stream.namespace}`. This means the fields can only contain characters that are valid as part of names of data streams. More details about this can be found in this https://www.elastic.co/blog/an-introduction-to-the-elastic-data-stream-naming-scheme[blog post].&#xA;An Elasticsearch data stream consists of one or more backing indices, and a data stream name forms part of the backing indices names. Due to this convention, data streams must also follow index naming restrictions. For example, data stream names cannot include `\`, `/`, `*`, `?`, `&quot;`, `&lt;`, `&gt;`, `|`, ` ` (space character), `,`, or `#`. Please see the Elasticsearch reference for additional https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html#indices-create-api-path-params[restrictions].
	///</summary>
	public abstract class DataStreamFieldSet {

		///<summary>
		/// <para><c>data_stream.dataset</c></para>
		/// <para>The field can contain anything that makes sense to signify the source of the data.
		/// Examples include `nginx.access`, `prometheus`, `endpoint` etc. For data streams that otherwise fit, but that do not have dataset set we use the value "generic" for the dataset value. `event.dataset` should have the same value as `data_stream.dataset`.
		/// Beyond the Elasticsearch data stream naming criteria noted above, the `dataset` value has additional restrictions:
		///   * Must not contain `-`
		///   * No longer than 100 characters</para>
		/// <example>nginx.access</example>
		///</summary>
		[JsonPropertyName("dataset"), DataMember(Name = "dataset")]
		public string? Dataset { get; set; }

		///<summary>
		/// <para><c>data_stream.namespace</c></para>
		/// <para>A user defined namespace. Namespaces are useful to allow grouping of data.
		/// Many users already organize their indices this way, and the data stream naming scheme now provides this best practice as a default. Many users will populate this field with `default`. If no value is used, it falls back to `default`.
		/// Beyond the Elasticsearch index naming criteria noted above, `namespace` value has the additional restrictions:
		///   * Must not contain `-`
		///   * No longer than 100 characters</para>
		/// <example>production</example>
		///</summary>
		[JsonPropertyName("namespace"), DataMember(Name = "namespace")]
		public string? Namespace { get; set; }

		///<summary>
		/// <para><c>data_stream.type</c></para>
		/// <para>An overarching type for the data stream.
		/// Currently allowed values are "logs" and "metrics". We expect to also add "traces" and "synthetics" in the near future.</para>
		/// <example>logs</example>
		///</summary>
		[JsonPropertyName("type"), DataMember(Name = "type")]
		public string? Type { get; set; }
	}

	///<summary>
	/// Destination fields capture details about the receiver of a network exchange/packet. These fields are populated from a network event, packet, or other event containing details of a network transaction.&#xA;Destination fields are usually populated in conjunction with source fields. The source and destination fields are considered the baseline and should always be filled if an event contains source and destination details from a network transaction. If the event also contains identification of the client and server roles, then the client and server fields should also be populated.
	///</summary>
	public abstract class DestinationFieldSet {

		///<summary>
		/// <para><c>destination.address</c></para>
		/// <para>Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
		/// Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("address"), DataMember(Name = "address")]
		public string? Address { get; set; }

		///<summary>
		/// <para><c>destination.bytes</c></para>
		/// <para>Bytes sent from the destination to the source.</para>
		/// <example>184</example>
		///</summary>
		[JsonPropertyName("bytes"), DataMember(Name = "bytes")]
		public long? Bytes { get; set; }

		///<summary>
		/// <para><c>destination.domain</c></para>
		/// <para>The domain name of the destination system.
		/// This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.</para>
		/// <example>foo.example.com</example>
		///</summary>
		[JsonPropertyName("domain"), DataMember(Name = "domain")]
		public string? Domain { get; set; }

		///<summary>
		/// <para><c>destination.ip</c></para>
		/// <para>IP address of the destination (IPv4 or IPv6).</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("ip"), DataMember(Name = "ip")]
		public string? Ip { get; set; }

		///<summary>
		/// <para><c>destination.mac</c></para>
		/// <para>MAC address of the destination.
		/// The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
		/// <para>pattern: </para></para>
		/// <example>00-00-5E-00-53-23</example>
		///</summary>
		[JsonPropertyName("mac"), DataMember(Name = "mac")]
		public string? Mac { get; set; }

		///<summary>
		/// <para><c>destination.nat.ip</c></para>
		/// <para>Translated ip of destination based NAT sessions (e.g. internet to private DMZ)
		/// Typically used with load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("nat.ip"), DataMember(Name = "nat.ip")]
		public string? NatIp { get; set; }

		///<summary>
		/// <para><c>destination.nat.port</c></para>
		/// <para>Port the source session is translated to by NAT Device.
		/// Typically used with load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("nat.port"), DataMember(Name = "nat.port")]
		public long? NatPort { get; set; }

		///<summary>
		/// <para><c>destination.packets</c></para>
		/// <para>Packets sent from the destination to the source.</para>
		/// <example>12</example>
		///</summary>
		[JsonPropertyName("packets"), DataMember(Name = "packets")]
		public long? Packets { get; set; }

		///<summary>
		/// <para><c>destination.port</c></para>
		/// <para>Port of the destination.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("port"), DataMember(Name = "port")]
		public long? Port { get; set; }

		///<summary>
		/// <para><c>destination.registered_domain</c></para>
		/// <para>The highest registered destination domain, stripped of the subdomain.
		/// For example, the registered domain for "foo.example.com" is "example.com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".</para>
		/// <example>example.com</example>
		///</summary>
		[JsonPropertyName("registered_domain"), DataMember(Name = "registered_domain")]
		public string? RegisteredDomain { get; set; }

		///<summary>
		/// <para><c>destination.subdomain</c></para>
		/// <para>The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
		/// For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.</para>
		/// <example>east</example>
		///</summary>
		[JsonPropertyName("subdomain"), DataMember(Name = "subdomain")]
		public string? Subdomain { get; set; }

		///<summary>
		/// <para><c>destination.top_level_domain</c></para>
		/// <para>The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".</para>
		/// <example>co.uk</example>
		///</summary>
		[JsonPropertyName("top_level_domain"), DataMember(Name = "top_level_domain")]
		public string? TopLevelDomain { get; set; }
	}

	///<summary>
	/// Fields that describe a device instance and its characteristics.  Data collected for applications and processes running on a (mobile) device can be enriched with these fields to describe the identity, type and other characteristics of the device.&#xA;This field group definition is based on the Device namespace of the OpenTelemetry Semantic Conventions (https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/device/).
	///</summary>
	public abstract class DeviceFieldSet {

		///<summary>
		/// <para><c>device.id</c></para>
		/// <para>The unique identifier of a device. The identifier must not change across application sessions but stay fixed for an instance of a (mobile) device. 
		/// On iOS, this value must be equal to the vendor identifier (https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android, this value must be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application.
		/// For GDPR and data protection law reasons this identifier should not carry information that would allow to identify a user.</para>
		/// <example>00000000-54b3-e7c7-0000-000046bffd97</example>
		///</summary>
		[JsonPropertyName("id"), DataMember(Name = "id")]
		public string? Id { get; set; }

		///<summary>
		/// <para><c>device.manufacturer</c></para>
		/// <para>The vendor name of the device manufacturer.</para>
		/// <example>Samsung</example>
		///</summary>
		[JsonPropertyName("manufacturer"), DataMember(Name = "manufacturer")]
		public string? Manufacturer { get; set; }

		///<summary>
		/// <para><c>device.model.identifier</c></para>
		/// <para>The machine readable identifier of the device model.</para>
		/// <example>SM-G920F</example>
		///</summary>
		[JsonPropertyName("model.identifier"), DataMember(Name = "model.identifier")]
		public string? ModelIdentifier { get; set; }

		///<summary>
		/// <para><c>device.model.name</c></para>
		/// <para>The human readable marketing name of the device model.</para>
		/// <example>Samsung Galaxy S6</example>
		///</summary>
		[JsonPropertyName("model.name"), DataMember(Name = "model.name")]
		public string? ModelName { get; set; }
	}

	///<summary>
	/// These fields contain information about code libraries dynamically loaded into processes.&#xA;&#xA;Many operating systems refer to &quot;shared code libraries&quot; with different names, but this field set refers to all of the following:&#xA;* Dynamic-link library (`.dll`) commonly used on Windows&#xA;* Shared Object (`.so`) commonly used on Unix-like operating systems&#xA;* Dynamic library (`.dylib`) commonly used on macOS
	///</summary>
	public abstract class DllFieldSet {

		///<summary>
		/// <para><c>dll.name</c></para>
		/// <para>Name of the library.
		/// This generally maps to the name of the file on disk.</para>
		/// <example>kernel32.dll</example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }

		///<summary>
		/// <para><c>dll.path</c></para>
		/// <para>Full file path of the library.</para>
		/// <example>C:\Windows\System32\kernel32.dll</example>
		///</summary>
		[JsonPropertyName("path"), DataMember(Name = "path")]
		public string? Path { get; set; }
	}

	///<summary>
	/// Fields describing DNS queries and answers.&#xA;DNS events should either represent a single DNS query prior to getting answers (`dns.type:query`) or they should represent a full exchange and contain the query details as well as all of the answers that were provided for this query (`dns.type:answer`).
	///</summary>
	public abstract class DnsFieldSet {

		///<summary>
		/// <para><c>dns.header_flags</c></para>
		/// <para>Array of 2 letter DNS header flags.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>AA</item>
		/// <item>TC</item>
		/// <item>RD</item>
		/// <item>RA</item>
		/// <item>AD</item>
		/// <item>CD</item>
		/// <item>DO</item>
		/// </list></para>
		/// <example>["RD", "RA"]</example>
		///</summary>
		[JsonPropertyName("header_flags"), DataMember(Name = "header_flags")]
		public string[]? HeaderFlags { get; set; }

		///<summary>
		/// <para><c>dns.id</c></para>
		/// <para>The DNS packet identifier assigned by the program that generated the query. The identifier is copied to the response.</para>
		/// <example>62111</example>
		///</summary>
		[JsonPropertyName("id"), DataMember(Name = "id")]
		public string? Id { get; set; }

		///<summary>
		/// <para><c>dns.op_code</c></para>
		/// <para>The DNS operation code that specifies the kind of query in the message. This value is set by the originator of a query and copied into the response.</para>
		/// <example>QUERY</example>
		///</summary>
		[JsonPropertyName("op_code"), DataMember(Name = "op_code")]
		public string? OpCode { get; set; }

		///<summary>
		/// <para><c>dns.question.class</c></para>
		/// <para>The class of records being queried.</para>
		/// <example>IN</example>
		///</summary>
		[JsonPropertyName("question.class"), DataMember(Name = "question.class")]
		public string? QuestionClass { get; set; }

		///<summary>
		/// <para><c>dns.question.name</c></para>
		/// <para>The name being queried.
		/// If the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \t, \r, and \n respectively.</para>
		/// <example>www.example.com</example>
		///</summary>
		[JsonPropertyName("question.name"), DataMember(Name = "question.name")]
		public string? QuestionName { get; set; }

		///<summary>
		/// <para><c>dns.question.registered_domain</c></para>
		/// <para>The highest registered domain, stripped of the subdomain.
		/// For example, the registered domain for "foo.example.com" is "example.com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".</para>
		/// <example>example.com</example>
		///</summary>
		[JsonPropertyName("question.registered_domain"), DataMember(Name = "question.registered_domain")]
		public string? QuestionRegisteredDomain { get; set; }

		///<summary>
		/// <para><c>dns.question.subdomain</c></para>
		/// <para>The subdomain is all of the labels under the registered_domain.
		/// If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.</para>
		/// <example>www</example>
		///</summary>
		[JsonPropertyName("question.subdomain"), DataMember(Name = "question.subdomain")]
		public string? QuestionSubdomain { get; set; }

		///<summary>
		/// <para><c>dns.question.top_level_domain</c></para>
		/// <para>The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".</para>
		/// <example>co.uk</example>
		///</summary>
		[JsonPropertyName("question.top_level_domain"), DataMember(Name = "question.top_level_domain")]
		public string? QuestionTopLevelDomain { get; set; }

		///<summary>
		/// <para><c>dns.question.type</c></para>
		/// <para>The type of record being queried.</para>
		/// <example>AAAA</example>
		///</summary>
		[JsonPropertyName("question.type"), DataMember(Name = "question.type")]
		public string? QuestionType { get; set; }

		///<summary>
		/// <para><c>dns.resolved_ip</c></para>
		/// <para>Array containing all IPs seen in `answers.data`.
		/// The `answers` array can be difficult to use, because of the variety of data formats it can contain. Extracting all IP addresses seen in there to `dns.resolved_ip` makes it possible to index them as IP addresses, and makes them easier to visualize and query for.</para>
		/// <example>["10.10.10.10", "10.10.10.11"]</example>
		///</summary>
		[JsonPropertyName("resolved_ip"), DataMember(Name = "resolved_ip")]
		public string[]? ResolvedIp { get; set; }

		///<summary>
		/// <para><c>dns.response_code</c></para>
		/// <para>The DNS response code.</para>
		/// <example>NOERROR</example>
		///</summary>
		[JsonPropertyName("response_code"), DataMember(Name = "response_code")]
		public string? ResponseCode { get; set; }

		///<summary>
		/// <para><c>dns.type</c></para>
		/// <para>The type of DNS event captured, query or answer.
		/// If your source of DNS events only gives you DNS queries, you should only create dns events of type `dns.type:query`.
		/// If your source of DNS events gives you answers as well, you should create one event per query (optionally as soon as the query is seen). And a second event containing all query details as well as an array of answers.</para>
		/// <example>answer</example>
		///</summary>
		[JsonPropertyName("type"), DataMember(Name = "type")]
		public string? Type { get; set; }

		///<summary>
		/// <para><c>dns.answers</c></para>
		/// <para>An array containing an object for each answer section returned by the server.
		/// The main keys that should be present in these objects are defined by ECS. Records that have more information may contain more keys than what ECS defines.
		/// Not all DNS data sources give all details about DNS answers. At minimum, answer objects must contain the `data` key. If more information is available, map as much of it to ECS as possible, and add any additional fields to the answer objects as custom fields.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("answers"), DataMember(Name = "answers")]
		public DnsAnswers[]? Answers { get; set; }
	}

	///<summary>
	/// Meta-information specific to ECS.
	///</summary>
	public abstract class EcsFieldSet {

		///<summary>
		/// <para><c>ecs.version</c></para>
		/// <para>ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
		/// When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
		/// <para><br/>This is a required field</para></para>
		/// <example>1.0.0</example>
		///</summary>
		[JsonPropertyName("version"), DataMember(Name = "version")]
		public string? Version { get; set; }
	}

	///<summary>
	/// These fields contain Linux Executable Linkable Format (ELF) metadata.
	///</summary>
	public abstract class ElfFieldSet {

		///<summary>
		/// <para><c>elf.architecture</c></para>
		/// <para>Machine architecture of the ELF file.</para>
		/// <example>x86-64</example>
		///</summary>
		[JsonPropertyName("architecture"), DataMember(Name = "architecture")]
		public string? Architecture { get; set; }

		///<summary>
		/// <para><c>elf.byte_order</c></para>
		/// <para>Byte sequence of ELF file.</para>
		/// <example>Little Endian</example>
		///</summary>
		[JsonPropertyName("byte_order"), DataMember(Name = "byte_order")]
		public string? ByteOrder { get; set; }

		///<summary>
		/// <para><c>elf.cpu_type</c></para>
		/// <para>CPU type of the ELF file.</para>
		/// <example>Intel</example>
		///</summary>
		[JsonPropertyName("cpu_type"), DataMember(Name = "cpu_type")]
		public string? CpuType { get; set; }

		///<summary>
		/// <para><c>elf.creation_date</c></para>
		/// <para>Extracted when possible from the file's metadata. Indicates when it was built or compiled. It can also be faked by malware creators.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("creation_date"), DataMember(Name = "creation_date")]
		public DateTimeOffset? CreationDate { get; set; }

		///<summary>
		/// <para><c>elf.exports</c></para>
		/// <para>List of exported element names and types.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("exports"), DataMember(Name = "exports")]
		public string[]? Exports { get; set; }

		///<summary>
		/// <para><c>elf.go_import_hash</c></para>
		/// <para>A hash of the Go language imports in an ELF file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// The algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).</para>
		/// <example>10bddcb4cee42080f76c88d9ff964491</example>
		///</summary>
		[JsonPropertyName("go_import_hash"), DataMember(Name = "go_import_hash")]
		public string? GoImportHash { get; set; }

		///<summary>
		/// <para><c>elf.go_imports</c></para>
		/// <para>List of imported Go language element names and types.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("go_imports"), DataMember(Name = "go_imports")]
		public string? GoImports { get; set; }

		///<summary>
		/// <para><c>elf.go_imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("go_imports_names_entropy"), DataMember(Name = "go_imports_names_entropy")]
		public long? GoImportsNamesEntropy { get; set; }

		///<summary>
		/// <para><c>elf.go_imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("go_imports_names_var_entropy"), DataMember(Name = "go_imports_names_var_entropy")]
		public long? GoImportsNamesVarEntropy { get; set; }

		///<summary>
		/// <para><c>elf.go_stripped</c></para>
		/// <para>Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("go_stripped"), DataMember(Name = "go_stripped")]
		public bool? GoStripped { get; set; }

		///<summary>
		/// <para><c>elf.header.abi_version</c></para>
		/// <para>Version of the ELF Application Binary Interface (ABI).</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("header.abi_version"), DataMember(Name = "header.abi_version")]
		public string? HeaderAbiVersion { get; set; }

		///<summary>
		/// <para><c>elf.header.class</c></para>
		/// <para>Header class of the ELF file.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("header.class"), DataMember(Name = "header.class")]
		public string? HeaderClass { get; set; }

		///<summary>
		/// <para><c>elf.header.data</c></para>
		/// <para>Data table of the ELF header.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("header.data"), DataMember(Name = "header.data")]
		public string? HeaderData { get; set; }

		///<summary>
		/// <para><c>elf.header.entrypoint</c></para>
		/// <para>Header entrypoint of the ELF file.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("header.entrypoint"), DataMember(Name = "header.entrypoint")]
		public long? HeaderEntrypoint { get; set; }

		///<summary>
		/// <para><c>elf.header.object_version</c></para>
		/// <para>"0x1" for original ELF files.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("header.object_version"), DataMember(Name = "header.object_version")]
		public string? HeaderObjectVersion { get; set; }

		///<summary>
		/// <para><c>elf.header.os_abi</c></para>
		/// <para>Application Binary Interface (ABI) of the Linux OS.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("header.os_abi"), DataMember(Name = "header.os_abi")]
		public string? HeaderOsAbi { get; set; }

		///<summary>
		/// <para><c>elf.header.type</c></para>
		/// <para>Header type of the ELF file.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("header.type"), DataMember(Name = "header.type")]
		public string? HeaderType { get; set; }

		///<summary>
		/// <para><c>elf.header.version</c></para>
		/// <para>Version of the ELF header.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("header.version"), DataMember(Name = "header.version")]
		public string? HeaderVersion { get; set; }

		///<summary>
		/// <para><c>elf.import_hash</c></para>
		/// <para>A hash of the imports in an ELF file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is an ELF implementation of the Windows PE imphash.</para>
		/// <example>d41d8cd98f00b204e9800998ecf8427e</example>
		///</summary>
		[JsonPropertyName("import_hash"), DataMember(Name = "import_hash")]
		public string? ImportHash { get; set; }

		///<summary>
		/// <para><c>elf.imports</c></para>
		/// <para>List of imported element names and types.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("imports"), DataMember(Name = "imports")]
		public string[]? Imports { get; set; }

		///<summary>
		/// <para><c>elf.imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("imports_names_entropy"), DataMember(Name = "imports_names_entropy")]
		public long? ImportsNamesEntropy { get; set; }

		///<summary>
		/// <para><c>elf.imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("imports_names_var_entropy"), DataMember(Name = "imports_names_var_entropy")]
		public long? ImportsNamesVarEntropy { get; set; }

		///<summary>
		/// <para><c>elf.shared_libraries</c></para>
		/// <para>List of shared libraries used by this ELF object.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("shared_libraries"), DataMember(Name = "shared_libraries")]
		public string[]? SharedLibraries { get; set; }

		///<summary>
		/// <para><c>elf.telfhash</c></para>
		/// <para>telfhash symbol hash for ELF file.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("telfhash"), DataMember(Name = "telfhash")]
		public string? Telfhash { get; set; }

		///<summary>
		/// <para><c>elf.sections</c></para>
		/// <para>An array containing an object for each section of the ELF file.
		/// The keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*`.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("sections"), DataMember(Name = "sections")]
		public ElfSections[]? Sections { get; set; }

		///<summary>
		/// <para><c>elf.segments</c></para>
		/// <para>An array containing an object for each segment of the ELF file.
		/// The keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*`.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("segments"), DataMember(Name = "segments")]
		public ElfSegments[]? Segments { get; set; }
	}

	///<summary>
	/// Event details relating to an email transaction.&#xA;This field set focuses on the email message header, body, and attachments. Network protocols that send and receive email messages such as SMTP are outside the scope of the `email.*` fields.
	///</summary>
	public abstract class EmailFieldSet {

		///<summary>
		/// <para><c>email.bcc.address</c></para>
		/// <para>The email address of BCC recipient</para>
		/// <example>bcc.user1@example.com</example>
		///</summary>
		[JsonPropertyName("bcc.address"), DataMember(Name = "bcc.address")]
		public string[]? BccAddress { get; set; }

		///<summary>
		/// <para><c>email.cc.address</c></para>
		/// <para>The email address of CC recipient</para>
		/// <example>cc.user1@example.com</example>
		///</summary>
		[JsonPropertyName("cc.address"), DataMember(Name = "cc.address")]
		public string[]? CcAddress { get; set; }

		///<summary>
		/// <para><c>email.content_type</c></para>
		/// <para>Information about how the message is to be displayed.
		/// Typically a MIME type.</para>
		/// <example>text/plain</example>
		///</summary>
		[JsonPropertyName("content_type"), DataMember(Name = "content_type")]
		public string? ContentType { get; set; }

		///<summary>
		/// <para><c>email.delivery_timestamp</c></para>
		/// <para>The date and time when the email message was received by the service or client.</para>
		/// <example>11/10/2020 10:12:34â€¯PM</example>
		///</summary>
		[JsonPropertyName("delivery_timestamp"), DataMember(Name = "delivery_timestamp")]
		public DateTimeOffset? DeliveryTimestamp { get; set; }

		///<summary>
		/// <para><c>email.direction</c></para>
		/// <para>The direction of the message based on the sending and receiving domains.</para>
		/// <example>inbound</example>
		///</summary>
		[JsonPropertyName("direction"), DataMember(Name = "direction")]
		public string? Direction { get; set; }

		///<summary>
		/// <para><c>email.from.address</c></para>
		/// <para>The email address of the sender, typically from the RFC 5322 `From:` header field.</para>
		/// <example>sender@example.com</example>
		///</summary>
		[JsonPropertyName("from.address"), DataMember(Name = "from.address")]
		public string[]? FromAddress { get; set; }

		///<summary>
		/// <para><c>email.local_id</c></para>
		/// <para>Unique identifier given to the email by the source that created the event.
		/// Identifier is not persistent across hops.</para>
		/// <example>c26dbea0-80d5-463b-b93c-4e8b708219ce</example>
		///</summary>
		[JsonPropertyName("local_id"), DataMember(Name = "local_id")]
		public string? LocalId { get; set; }

		///<summary>
		/// <para><c>email.message_id</c></para>
		/// <para>Identifier from the RFC 5322 `Message-ID:` email header that refers to a particular email message.</para>
		/// <example>81ce15$8r2j59@mail01.example.com</example>
		///</summary>
		[JsonPropertyName("message_id"), DataMember(Name = "message_id")]
		public string? MessageId { get; set; }

		///<summary>
		/// <para><c>email.origination_timestamp</c></para>
		/// <para>The date and time the email message was composed. Many email clients will fill in this value automatically when the message is sent by a user.</para>
		/// <example>11/10/2020 10:12:34â€¯PM</example>
		///</summary>
		[JsonPropertyName("origination_timestamp"), DataMember(Name = "origination_timestamp")]
		public DateTimeOffset? OriginationTimestamp { get; set; }

		///<summary>
		/// <para><c>email.reply_to.address</c></para>
		/// <para>The address that replies should be delivered to based on the value in the RFC 5322 `Reply-To:` header.</para>
		/// <example>reply.here@example.com</example>
		///</summary>
		[JsonPropertyName("reply_to.address"), DataMember(Name = "reply_to.address")]
		public string[]? ReplyToAddress { get; set; }

		///<summary>
		/// <para><c>email.sender.address</c></para>
		/// <para>Per RFC 5322, specifies the address responsible for the actual transmission of the message.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("sender.address"), DataMember(Name = "sender.address")]
		public string? SenderAddress { get; set; }

		///<summary>
		/// <para><c>email.subject</c></para>
		/// <para>A brief summary of the topic of the message.</para>
		/// <example>Please see this important message.</example>
		///</summary>
		[JsonPropertyName("subject"), DataMember(Name = "subject")]
		public string? Subject { get; set; }

		///<summary>
		/// <para><c>email.to.address</c></para>
		/// <para>The email address of recipient</para>
		/// <example>user1@example.com</example>
		///</summary>
		[JsonPropertyName("to.address"), DataMember(Name = "to.address")]
		public string[]? ToAddress { get; set; }

		///<summary>
		/// <para><c>email.x_mailer</c></para>
		/// <para>The name of the application that was used to draft and send the original email message.</para>
		/// <example>Spambot v2.5</example>
		///</summary>
		[JsonPropertyName("x_mailer"), DataMember(Name = "x_mailer")]
		public string? XMailer { get; set; }

		///<summary>
		/// <para><c>email.attachments</c></para>
		/// <para>A list of objects describing the attachment files sent along with an email message.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("attachments"), DataMember(Name = "attachments")]
		public EmailAttachments[]? Attachments { get; set; }
	}

	///<summary>
	/// These fields can represent errors of any kind.&#xA;Use them for errors that happen while fetching events or in cases where the event itself contains an error.
	///</summary>
	public abstract class ErrorFieldSet {

		///<summary>
		/// <para><c>error.code</c></para>
		/// <para>Error code describing the error.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("code"), DataMember(Name = "code")]
		public string? Code { get; set; }

		///<summary>
		/// <para><c>error.id</c></para>
		/// <para>Unique identifier for the error.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("id"), DataMember(Name = "id")]
		public string? Id { get; set; }

		///<summary>
		/// <para><c>error.message</c></para>
		/// <para>Error message.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("message"), DataMember(Name = "message")]
		public string? Message { get; set; }

		///<summary>
		/// <para><c>error.stack_trace</c></para>
		/// <para>The stack trace of this error in plain text.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("stack_trace"), DataMember(Name = "stack_trace")]
		public string? StackTrace { get; set; }

		///<summary>
		/// <para><c>error.type</c></para>
		/// <para>The type of the error, for example the class name of the exception.</para>
		/// <example>java.lang.NullPointerException</example>
		///</summary>
		[JsonPropertyName("type"), DataMember(Name = "type")]
		public string? Type { get; set; }
	}

	///<summary>
	/// The event fields are used for context information about the log or metric event itself.&#xA;A log is defined as an event containing details of something that happened. Log events must include the time at which the thing happened. Examples of log events include a process starting on a host, a network packet being sent from a source to a destination, or a network connection between a client and a server being initiated or closed. A metric is defined as an event containing one or more numerical measurements and the time at which the measurement was taken. Examples of metric events include memory pressure measured on a host and device temperature. See the `event.kind` definition in this section for additional details about metric and state events.
	///</summary>
	public abstract class EventFieldSet {

		///<summary>
		/// <para><c>event.action</c></para>
		/// <para>The action captured by the event.
		/// This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.</para>
		/// <example>user-password-change</example>
		///</summary>
		[JsonPropertyName("action"), DataMember(Name = "action")]
		public string? Action { get; set; }

		///<summary>
		/// <para><c>event.agent_id_status</c></para>
		/// <para>Agents are normally responsible for populating the `agent.id` field value. If the system receiving events is capable of validating the value based on authentication information for the client then this field can be used to reflect the outcome of that validation.
		/// For example if the agent's connection is authenticated with mTLS and the client cert contains the ID of the agent to which the cert was issued then the `agent.id` value in events can be checked against the certificate. If the values match then `event.agent_id_status: verified` is added to the event, otherwise one of the other allowed values should be used.
		/// If no validation is performed then the field should be omitted.
		/// The allowed values are:
		/// `verified` - The `agent.id` field value matches expected value obtained from auth metadata.
		/// `mismatch` - The `agent.id` field value does not match the expected value obtained from auth metadata.
		/// `missing` - There was no `agent.id` field in the event to validate.
		/// `auth_metadata_missing` - There was no auth metadata or it was missing information about the agent ID.</para>
		/// <example>verified</example>
		///</summary>
		[JsonPropertyName("agent_id_status"), DataMember(Name = "agent_id_status")]
		public string? AgentIdStatus { get; set; }

		///<summary>
		/// <para><c>event.category</c></para>
		/// <para>This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.
		/// `event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.
		/// This field is an array. This will allow proper categorization of some events that fall in multiple categories.
		/// <para><br/>Allowed Values:</para>
		/// <list type="table">
		/// <listheader><term>Value</term><description>Description</description></listheader>
		/// <item><term>api</term><description>Events in this category annotate API calls that occured on a system. Typical sources for those events could be from the Operating System level through the native libraries (for example Windows Win32, Linux libc, etc.), or managed sources of events (such as ETW, syslog), but can also include network protocols (such as SOAP, RPC, Websocket, REST, etc.)</description></item>
		/// <item><term>authentication</term><description>Events in this category are related to the challenge and response process in which credentials are supplied and verified to allow the creation of a session. Common sources for these logs are Windows event logs and ssh logs. Visualize and analyze events in this category to look for failed logins, and other authentication-related activity.</description></item>
		/// <item><term>configuration</term><description>Events in the configuration category have to deal with creating, modifying, or deleting the settings or parameters of an application, process, or system.
		/// Example sources include security policy change logs, configuration auditing logging, and system integrity monitoring.</description></item>
		/// <item><term>database</term><description>The database category denotes events and metrics relating to a data storage and retrieval system. Note that use of this category is not limited to relational database systems. Examples include event logs from MS SQL, MySQL, Elasticsearch, MongoDB, etc. Use this category to visualize and analyze database activity such as accesses and changes.</description></item>
		/// <item><term>driver</term><description>Events in the driver category have to do with operating system device drivers and similar software entities such as Windows drivers, kernel extensions, kernel modules, etc.
		/// Use events and metrics in this category to visualize and analyze driver-related activity and status on hosts.</description></item>
		/// <item><term>email</term><description>This category is used for events relating to email messages, email attachments, and email network or protocol activity.
		/// Emails events can be produced by email security gateways, mail transfer agents, email cloud service providers, or mail server monitoring applications.</description></item>
		/// <item><term>file</term><description>Relating to a set of information that has been created on, or has existed on a filesystem. Use this category of events to visualize and analyze the creation, access, and deletions of files. Events in this category can come from both host-based and network-based sources. An example source of a network-based detection of a file transfer would be the Zeek file.log.</description></item>
		/// <item><term>host</term><description>Use this category to visualize and analyze information such as host inventory or host lifecycle events.
		/// Most of the events in this category can usually be observed from the outside, such as from a hypervisor or a control plane's point of view. Some can also be seen from within, such as "start" or "end".
		/// Note that this category is for information about hosts themselves; it is not meant to capture activity "happening on a host".</description></item>
		/// <item><term>iam</term><description>Identity and access management (IAM) events relating to users, groups, and administration. Use this category to visualize and analyze IAM-related logs and data from active directory, LDAP, Okta, Duo, and other IAM systems.</description></item>
		/// <item><term>intrusion_detection</term><description>Relating to intrusion detections from IDS/IPS systems and functions, both network and host-based. Use this category to visualize and analyze intrusion detection alerts from systems such as Snort, Suricata, and Palo Alto threat detections.</description></item>
		/// <item><term>library</term><description>Events in this category refer to the loading of a library, such as (dll / so / dynlib), into a process. Use this category to visualize and analyze library loading related activity on hosts.  Keep in mind that driver related activity will be captured under the "driver" category above.</description></item>
		/// <item><term>malware</term><description>Malware detection events and alerts. Use this category to visualize and analyze malware detections from EDR/EPP systems such as Elastic Endpoint Security, Symantec Endpoint Protection, Crowdstrike, and network IDS/IPS systems such as Suricata, or other sources of malware-related events such as Palo Alto Networks threat logs and Wildfire logs.</description></item>
		/// <item><term>network</term><description>Relating to all network activity, including network connection lifecycle, network traffic, and essentially any event that includes an IP address. Many events containing decoded network protocol transactions fit into this category. Use events in this category to visualize or analyze counts of network ports, protocols, addresses, geolocation information, etc.</description></item>
		/// <item><term>package</term><description>Relating to software packages installed on hosts. Use this category to visualize and analyze inventory of software installed on various hosts, or to determine host vulnerability in the absence of vulnerability scan data.</description></item>
		/// <item><term>process</term><description>Use this category of events to visualize and analyze process-specific information such as lifecycle events or process ancestry.</description></item>
		/// <item><term>registry</term><description>Having to do with settings and assets stored in the Windows registry. Use this category to visualize and analyze activity such as registry access and modifications.</description></item>
		/// <item><term>session</term><description>The session category is applied to events and metrics regarding logical persistent connections to hosts and services. Use this category to visualize and analyze interactive or automated persistent connections between assets. Data for this category may come from Windows Event logs, SSH logs, or stateless sessions such as HTTP cookie-based sessions, etc.</description></item>
		/// <item><term>threat</term><description>Use this category to visualize and analyze events describing threat actors' targets, motives, or behaviors.</description></item>
		/// <item><term>vulnerability</term><description>Relating to vulnerability scan results. Use this category to analyze vulnerabilities detected by Tenable, Qualys, internal scanners, and other vulnerability management sources.</description></item>
		/// <item><term>web</term><description>Relating to web server access. Use this category to create a dashboard of web server/proxy activity from apache, IIS, nginx web servers, etc. Note: events from network observers such as Zeek http log may also be included in this category.</description></item>
		/// </list></para>
		/// <example>authentication</example>
		///</summary>
		[JsonPropertyName("category"), DataMember(Name = "category")]
		public string[]? Category { get; set; }

		///<summary>
		/// <para><c>event.code</c></para>
		/// <para>Identification code for this event, if one exists.
		/// Some event sources use event codes to identify messages unambiguously, regardless of message language or wording adjustments over time. An example of this is the Windows Event ID.</para>
		/// <example>4648</example>
		///</summary>
		[JsonPropertyName("code"), DataMember(Name = "code")]
		public string? Code { get; set; }

		///<summary>
		/// <para><c>event.created</c></para>
		/// <para>`event.created` contains the date/time when the event was first read by an agent, or by your pipeline.
		/// This field is distinct from `@timestamp` in that `@timestamp` typically contain the time extracted from the original event.
		/// In most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent's or pipeline's ability to keep up with your event source.
		/// In case the two timestamps are identical, `@timestamp` should be used.</para>
		/// <example>5/23/2016 8:05:34â€¯AM</example>
		///</summary>
		[JsonPropertyName("created"), DataMember(Name = "created")]
		public DateTimeOffset? Created { get; set; }

		///<summary>
		/// <para><c>event.dataset</c></para>
		/// <para>Name of the dataset.
		/// If an event source publishes more than one type of log or events (e.g. access log, error log), the dataset is used to specify which one the event comes from.
		/// It's recommended but not required to start the dataset name with the module name, followed by a dot, then the dataset name.</para>
		/// <example>apache.access</example>
		///</summary>
		[JsonPropertyName("dataset"), DataMember(Name = "dataset")]
		public string? Dataset { get; set; }

		///<summary>
		/// <para><c>event.duration</c></para>
		/// <para>Duration of the event in nanoseconds.
		/// If `event.start` and `event.end` are known this value should be the difference between the end and start time.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("duration"), DataMember(Name = "duration")]
		public long? Duration { get; set; }

		///<summary>
		/// <para><c>event.end</c></para>
		/// <para>`event.end` contains the date when the event ended or when the activity was last observed.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("end"), DataMember(Name = "end")]
		public DateTimeOffset? End { get; set; }

		///<summary>
		/// <para><c>event.hash</c></para>
		/// <para>Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity.</para>
		/// <example>123456789012345678901234567890ABCD</example>
		///</summary>
		[JsonPropertyName("hash"), DataMember(Name = "hash")]
		public string? Hash { get; set; }

		///<summary>
		/// <para><c>event.id</c></para>
		/// <para>Unique ID to describe the event.</para>
		/// <example>8a4f500d</example>
		///</summary>
		[JsonPropertyName("id"), DataMember(Name = "id")]
		public string? Id { get; set; }

		///<summary>
		/// <para><c>event.ingested</c></para>
		/// <para>Timestamp when an event arrived in the central data store.
		/// This is different from `@timestamp`, which is when the event originally occurred.  It's also different from `event.created`, which is meant to capture the first time an agent saw the event.
		/// In normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` &lt; `event.created` &lt; `event.ingested`.</para>
		/// <example>5/23/2016 8:05:35â€¯AM</example>
		///</summary>
		[JsonPropertyName("ingested"), DataMember(Name = "ingested")]
		public DateTimeOffset? Ingested { get; set; }

		///<summary>
		/// <para><c>event.kind</c></para>
		/// <para>This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.
		/// `event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.
		/// The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data is coming in at a regular interval or not.
		/// <para><br/>Allowed Values:</para>
		/// <list type="table">
		/// <listheader><term>Value</term><description>Description</description></listheader>
		/// <item><term>alert</term><description>This value indicates an event such as an alert or notable event, triggered by a detection rule executing externally to the Elastic Stack.
		/// `event.kind:alert` is often populated for events coming from firewalls, intrusion detection systems, endpoint detection and response systems, and so on.
		/// This value is not used by Elastic solutions for alert documents that are created by rules executing within the Kibana alerting framework.</description></item>
		/// <item><term>asset</term><description>This value indicates events whose primary purpose is to store an inventory of assets/entities and their attributes. Assets/entities are objects (such as users and hosts) that are expected to be subjects of detailed analysis within the system.
		/// Examples include lists of user identities or accounts ingested from directory services such as Active Directory (AD), inventory of hosts pulled from configuration management databases (CMDB), and lists of cloud storage buckets pulled from cloud provider APIs.
		/// This value is used by Elastic Security for asset management solutions. `event.kind: asset` is not used for normal system events or logs that are coming from an asset/entity, nor is it used for system events or logs coming from a directory or CMDB system.</description></item>
		/// <item><term>enrichment</term><description>The `enrichment` value indicates an event collected to provide additional context, often to other events.
		/// An example is collecting indicators of compromise (IOCs) from a threat intelligence provider with the intent to use those values to enrich other events. The IOC events from the intelligence provider should be categorized as `event.kind:enrichment`.</description></item>
		/// <item><term>event</term><description>This value is the most general and most common value for this field. It is used to represent events that indicate that something happened.</description></item>
		/// <item><term>metric</term><description>This value is used to indicate that this event describes a numeric measurement taken at given point in time.
		/// Examples include CPU utilization, memory usage, or device temperature.
		/// Metric events are often collected on a predictable frequency, such as once every few seconds, or once a minute, but can also be used to describe ad-hoc numeric metric queries.</description></item>
		/// <item><term>state</term><description>The state value is similar to metric, indicating that this event describes a measurement taken at given point in time, except that the measurement does not result in a numeric value, but rather one of a fixed set of categorical values that represent conditions or states.
		/// Examples include periodic events reporting Elasticsearch cluster state (green/yellow/red), the state of a TCP connection (open, closed, fin_wait, etc.), the state of a host with respect to a software vulnerability (vulnerable, not vulnerable), and the state of a system regarding compliance with a regulatory standard (compliant, not compliant).
		/// Note that an event that describes a change of state would not use `event.kind:state`, but instead would use 'event.kind:event' since a state change fits the more general event definition of something that happened.
		/// State events are often collected on a predictable frequency, such as once every few seconds, once a minute, once an hour, or once a day, but can also be used to describe ad-hoc state queries.</description></item>
		/// <item><term>pipeline_error</term><description>This value indicates that an error occurred during the ingestion of this event, and that event data may be missing, inconsistent, or incorrect. `event.kind:pipeline_error` is often associated with parsing errors.</description></item>
		/// <item><term>signal</term><description>This value is used by Elastic solutions (e.g., Security, Observability) for alert documents that are created by rules executing within the Kibana alerting framework.
		/// Usage of this value is reserved, and data ingestion pipelines must not populate `event.kind` with the value "signal".</description></item>
		/// </list></para>
		/// <example>alert</example>
		///</summary>
		[JsonPropertyName("kind"), DataMember(Name = "kind")]
		public string? Kind { get; set; }

		///<summary>
		/// <para><c>event.module</c></para>
		/// <para>Name of the module this data is coming from.
		/// If your monitoring agent supports the concept of modules or plugins to process events of a given source (e.g. Apache logs), `event.module` should contain the name of this module.</para>
		/// <example>apache</example>
		///</summary>
		[JsonPropertyName("module"), DataMember(Name = "module")]
		public string? Module { get; set; }

		///<summary>
		/// <para><c>event.original</c></para>
		/// <para>Raw text message of entire event. Used to demonstrate log integrity or where the full log message (before splitting it up in multiple parts) may be required, e.g. for reindex.
		/// This field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`. If users wish to override this and index this field, please see `Field data types` in the `Elasticsearch Reference`.
		/// <para><br/>Stored but not available for search in Elasticsearch by default</para></para>
		/// <example>Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124; worm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232</example>
		///</summary>
		[JsonPropertyName("original"), DataMember(Name = "original")]
		public string? Original { get; set; }

		///<summary>
		/// <para><c>event.outcome</c></para>
		/// <para>This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.
		/// `event.outcome` simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event.
		/// Note that when a single transaction is described in multiple events, each event may populate different values of `event.outcome`, according to their perspective.
		/// Also note that in the case of a compound event (a single event that contains multiple logical events), this field should be populated with the value that best captures the overall success or failure from the perspective of the event producer.
		/// Further note that not all events will have an associated outcome. For example, this field is generally not populated for metric events, events with `event.type:info`, or any events for which an outcome does not make logical sense.
		/// <para><br/>Allowed Values:</para>
		/// <list type="table">
		/// <listheader><term>Value</term><description>Description</description></listheader>
		/// <item><term>failure</term><description>Indicates that this event describes a failed result. A common example is `event.category:file AND event.type:access AND event.outcome:failure` to indicate that a file access was attempted, but was not successful.</description></item>
		/// <item><term>success</term><description>Indicates that this event describes a successful result. A common example is `event.category:file AND event.type:create AND event.outcome:success` to indicate that a file was successfully created.</description></item>
		/// <item><term>unknown</term><description>Indicates that this event describes only an attempt for which the result is unknown from the perspective of the event producer. For example, if the event contains information only about the request side of a transaction that results in a response, populating `event.outcome:unknown` in the request event is appropriate. The unknown value should not be used when an outcome doesn't make logical sense for the event. In such cases `event.outcome` should not be populated.</description></item>
		/// </list></para>
		/// <example>success</example>
		///</summary>
		[JsonPropertyName("outcome"), DataMember(Name = "outcome")]
		public string? Outcome { get; set; }

		///<summary>
		/// <para><c>event.provider</c></para>
		/// <para>Source of the event.
		/// Event transports such as Syslog or the Windows Event Log typically mention the source of an event. It can be the name of the software that generated the event (e.g. Sysmon, httpd), or of a subsystem of the operating system (kernel, Microsoft-Windows-Security-Auditing).</para>
		/// <example>kernel</example>
		///</summary>
		[JsonPropertyName("provider"), DataMember(Name = "provider")]
		public string? Provider { get; set; }

		///<summary>
		/// <para><c>event.reason</c></para>
		/// <para>Reason why this event happened, according to the source.
		/// This describes the why of a particular action or outcome captured in the event. Where `event.action` captures the action from the event, `event.reason` describes why that action was taken. For example, a web proxy with an `event.action` which denied the request may also populate `event.reason` with the reason why (e.g. `blocked site`).</para>
		/// <example>Terminated an unexpected process</example>
		///</summary>
		[JsonPropertyName("reason"), DataMember(Name = "reason")]
		public string? Reason { get; set; }

		///<summary>
		/// <para><c>event.reference</c></para>
		/// <para>Reference URL linking to additional information about this event.
		/// This URL links to a static definition of this event. Alert events, indicated by `event.kind:alert`, are a common use case for this field.</para>
		/// <example>https://system.example.com/event/#0001234</example>
		///</summary>
		[JsonPropertyName("reference"), DataMember(Name = "reference")]
		public string? Reference { get; set; }

		///<summary>
		/// <para><c>event.risk_score</c></para>
		/// <para>Risk score or priority of the event (e.g. security solutions). Use your system's original value here.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("risk_score"), DataMember(Name = "risk_score")]
		public float? RiskScore { get; set; }

		///<summary>
		/// <para><c>event.risk_score_norm</c></para>
		/// <para>Normalized risk score or priority of the event, on a scale of 0 to 100.
		/// This is mainly useful if you use more than one system that assigns risk scores, and you want to see a normalized value across all systems.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("risk_score_norm"), DataMember(Name = "risk_score_norm")]
		public float? RiskScoreNorm { get; set; }

		///<summary>
		/// <para><c>event.sequence</c></para>
		/// <para>Sequence number of the event.
		/// The sequence number is a value published by some event sources, to make the exact ordering of events unambiguous, regardless of the timestamp precision.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("sequence"), DataMember(Name = "sequence")]
		public long? Sequence { get; set; }

		///<summary>
		/// <para><c>event.severity</c></para>
		/// <para>The numeric severity of the event according to your event source.
		/// What the different severity values mean can be different between sources and use cases. It's up to the implementer to make sure severities are consistent across events from the same source.
		/// The Syslog severity belongs in `log.syslog.severity.code`. `event.severity` is meant to represent the severity according to the event source (e.g. firewall, IDS). If the event source does not publish its own severity, you may optionally copy the `log.syslog.severity.code` to `event.severity`.</para>
		/// <example>7</example>
		///</summary>
		[JsonPropertyName("severity"), DataMember(Name = "severity")]
		public long? Severity { get; set; }

		///<summary>
		/// <para><c>event.start</c></para>
		/// <para>`event.start` contains the date when the event started or when the activity was first observed.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("start"), DataMember(Name = "start")]
		public DateTimeOffset? Start { get; set; }

		///<summary>
		/// <para><c>event.timezone</c></para>
		/// <para>This field should be populated when the event's timestamp does not include timezone information already (e.g. default Syslog timestamps). It's optional otherwise.
		/// Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"), abbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("timezone"), DataMember(Name = "timezone")]
		public string? Timezone { get; set; }

		///<summary>
		/// <para><c>event.type</c></para>
		/// <para>This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.
		/// `event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.
		/// This field is an array. This will allow proper categorization of some events that fall in multiple event types.
		/// <para><br/>Allowed Values:</para>
		/// <list type="table">
		/// <listheader><term>Value</term><description>Description</description></listheader>
		/// <item><term>access</term><description>The access event type is used for the subset of events within a category that indicate that something was accessed. Common examples include `event.category:database AND event.type:access`, or `event.category:file AND event.type:access`. Note for file access, both directory listings and file opens should be included in this subcategory. You can further distinguish access operations using the ECS `event.action` field.</description></item>
		/// <item><term>admin</term><description>The admin event type is used for the subset of events within a category that are related to admin objects. For example, administrative changes within an IAM framework that do not specifically affect a user or group (e.g., adding new applications to a federation solution or connecting discrete forests in Active Directory) would fall into this subcategory. Common example: `event.category:iam AND event.type:change AND event.type:admin`. You can further distinguish admin operations using the ECS `event.action` field.</description></item>
		/// <item><term>allowed</term><description>The allowed event type is used for the subset of events within a category that indicate that something was allowed. Common examples include `event.category:network AND event.type:connection AND event.type:allowed` (to indicate a network firewall event for which the firewall disposition was to allow the connection to complete) and `event.category:intrusion_detection AND event.type:allowed` (to indicate a network intrusion prevention system event for which the IPS disposition was to allow the connection to complete). You can further distinguish allowed operations using the ECS `event.action` field, populating with values of your choosing, such as "allow", "detect", or "pass".</description></item>
		/// <item><term>change</term><description>The change event type is used for the subset of events within a category that indicate that something has changed. If semantics best describe an event as modified, then include them in this subcategory. Common examples include `event.category:process AND event.type:change`, and `event.category:file AND event.type:change`. You can further distinguish change operations using the ECS `event.action` field.</description></item>
		/// <item><term>connection</term><description>Used primarily with `event.category:network` this value is used for the subset of network traffic that includes sufficient information for the event to be included in flow or connection analysis. Events in this subcategory will contain at least source and destination IP addresses, source and destination TCP/UDP ports, and will usually contain counts of bytes and/or packets transferred. Events in this subcategory may contain unidirectional or bidirectional information, including summary information. Use this subcategory to visualize and analyze network connections. Flow analysis, including Netflow, IPFIX, and other flow-related events fit in this subcategory. Note that firewall events from many Next-Generation Firewall (NGFW) devices will also fit into this subcategory.  A common filter for flow/connection information would be `event.category:network AND event.type:connection AND event.type:end` (to view or analyze all completed network connections, ignoring mid-flow reports). You can further distinguish connection events using the ECS `event.action` field, populating with values of your choosing, such as "timeout", or "reset".</description></item>
		/// <item><term>creation</term><description>The "creation" event type is used for the subset of events within a category that indicate that something was created. A common example is `event.category:file AND event.type:creation`.</description></item>
		/// <item><term>deletion</term><description>The deletion event type is used for the subset of events within a category that indicate that something was deleted. A common example is `event.category:file AND event.type:deletion` to indicate that a file has been deleted.</description></item>
		/// <item><term>denied</term><description>The denied event type is used for the subset of events within a category that indicate that something was denied. Common examples include `event.category:network AND event.type:denied` (to indicate a network firewall event for which the firewall disposition was to deny the connection) and `event.category:intrusion_detection AND event.type:denied` (to indicate a network intrusion prevention system event for which the IPS disposition was to deny the connection to complete). You can further distinguish denied operations using the ECS `event.action` field, populating with values of your choosing, such as "blocked", "dropped", or "quarantined".</description></item>
		/// <item><term>end</term><description>The end event type is used for the subset of events within a category that indicate something has ended. A common example is `event.category:process AND event.type:end`.</description></item>
		/// <item><term>error</term><description>The error event type is used for the subset of events within a category that indicate or describe an error. A common example is `event.category:database AND event.type:error`. Note that pipeline errors that occur during the event ingestion process should not use this `event.type` value. Instead, they should use `event.kind:pipeline_error`.</description></item>
		/// <item><term>group</term><description>The group event type is used for the subset of events within a category that are related to group objects. Common example: `event.category:iam AND event.type:creation AND event.type:group`. You can further distinguish group operations using the ECS `event.action` field.</description></item>
		/// <item><term>indicator</term><description>The indicator event type is used for the subset of events within a category that contain details about indicators of compromise (IOCs).
		/// A common example is `event.category:threat AND event.type:indicator`.</description></item>
		/// <item><term>info</term><description>The info event type is used for the subset of events within a category that indicate that they are purely informational, and don't report a state change, or any type of action. For example, an initial run of a file integrity monitoring system (FIM), where an agent reports all files under management, would fall into the "info" subcategory. Similarly, an event containing a dump of all currently running processes (as opposed to reporting that a process started/ended) would fall into the "info" subcategory. An additional common examples is `event.category:intrusion_detection AND event.type:info`.</description></item>
		/// <item><term>installation</term><description>The installation event type is used for the subset of events within a category that indicate that something was installed. A common example is `event.category:package` AND `event.type:installation`.</description></item>
		/// <item><term>protocol</term><description>The protocol event type is used for the subset of events within a category that indicate that they contain protocol details or analysis, beyond simply identifying the protocol. Generally, network events that contain specific protocol details will fall into this subcategory. A common example is `event.category:network AND event.type:protocol AND event.type:connection AND event.type:end` (to indicate that the event is a network connection event sent at the end of a connection that also includes a protocol detail breakdown). Note that events that only indicate the name or id of the protocol should not use the protocol value. Further note that when the protocol subcategory is used, the identified protocol is populated in the ECS `network.protocol` field.</description></item>
		/// <item><term>start</term><description>The start event type is used for the subset of events within a category that indicate something has started. A common example is `event.category:process AND event.type:start`.</description></item>
		/// <item><term>user</term><description>The user event type is used for the subset of events within a category that are related to user objects. Common example: `event.category:iam AND event.type:deletion AND event.type:user`. You can further distinguish user operations using the ECS `event.action` field.</description></item>
		/// </list></para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("type"), DataMember(Name = "type")]
		public string[]? Type { get; set; }

		///<summary>
		/// <para><c>event.url</c></para>
		/// <para>URL linking to an external system to continue investigation of this event.
		/// This URL links to another system where in-depth investigation of the specific occurrence of this event can take place. Alert events, indicated by `event.kind:alert`, are a common use case for this field.</para>
		/// <example>https://mysystem.example.com/alert/5271dedb-f5b0-4218-87f0-4ac4870a38fe</example>
		///</summary>
		[JsonPropertyName("url"), DataMember(Name = "url")]
		public string? Url { get; set; }
	}

	///<summary>
	/// The user fields describe information about the function as a service (FaaS) that is relevant to the event.
	///</summary>
	public abstract class FaasFieldSet {

		///<summary>
		/// <para><c>faas.coldstart</c></para>
		/// <para>Boolean value indicating a cold start of a function.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("coldstart"), DataMember(Name = "coldstart")]
		public bool? Coldstart { get; set; }

		///<summary>
		/// <para><c>faas.execution</c></para>
		/// <para>The execution ID of the current function execution.</para>
		/// <example>af9d5aa4-a685-4c5f-a22b-444f80b3cc28</example>
		///</summary>
		[JsonPropertyName("execution"), DataMember(Name = "execution")]
		public string? Execution { get; set; }

		///<summary>
		/// <para><c>faas.id</c></para>
		/// <para>The unique identifier of a serverless function.
		/// For AWS Lambda it's the function ARN (Amazon Resource Name) without a version or alias suffix.</para>
		/// <example>arn:aws:lambda:us-west-2:123456789012:function:my-function</example>
		///</summary>
		[JsonPropertyName("id"), DataMember(Name = "id")]
		public string? Id { get; set; }

		///<summary>
		/// <para><c>faas.name</c></para>
		/// <para>The name of a serverless function.</para>
		/// <example>my-function</example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }

		///<summary>
		/// <para><c>faas.trigger.request_id</c></para>
		/// <para>The ID of the trigger request , message, event, etc.</para>
		/// <example>123456789</example>
		///</summary>
		[JsonPropertyName("trigger.request_id"), DataMember(Name = "trigger.request_id")]
		public string? TriggerRequestId { get; set; }

		///<summary>
		/// <para><c>faas.trigger.type</c></para>
		/// <para>The trigger for the function execution.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>http</item>
		/// <item>pubsub</item>
		/// <item>datasource</item>
		/// <item>timer</item>
		/// <item>other</item>
		/// </list></para>
		/// <example>http</example>
		///</summary>
		[JsonPropertyName("trigger.type"), DataMember(Name = "trigger.type")]
		public string? TriggerType { get; set; }

		///<summary>
		/// <para><c>faas.version</c></para>
		/// <para>The version of a serverless function.</para>
		/// <example>123</example>
		///</summary>
		[JsonPropertyName("version"), DataMember(Name = "version")]
		public string? Version { get; set; }
	}

	///<summary>
	/// A file is defined as a set of information that has been created on, or has existed on a filesystem.&#xA;File objects can be associated with host events, network events, and/or file events (e.g., those produced by File Integrity Monitoring [FIM] products or services). File fields provide details about the affected file associated with the event or metric.
	///</summary>
	public abstract class FileFieldSet {

		///<summary>
		/// <para><c>file.accessed</c></para>
		/// <para>Last time the file was accessed.
		/// Note that not all filesystems keep track of access time.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("accessed"), DataMember(Name = "accessed")]
		public DateTimeOffset? Accessed { get; set; }

		///<summary>
		/// <para><c>file.attributes</c></para>
		/// <para>Array of file attributes.
		/// Attributes names will vary by platform. Here's a non-exhaustive list of values that are expected in this field: archive, compressed, directory, encrypted, execute, hidden, read, readonly, system, write.</para>
		/// <example>["readonly", "system"]</example>
		///</summary>
		[JsonPropertyName("attributes"), DataMember(Name = "attributes")]
		public string[]? Attributes { get; set; }

		///<summary>
		/// <para><c>file.created</c></para>
		/// <para>File creation time.
		/// Note that not all filesystems store the creation time.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("created"), DataMember(Name = "created")]
		public DateTimeOffset? Created { get; set; }

		///<summary>
		/// <para><c>file.ctime</c></para>
		/// <para>Last time the file attributes or metadata changed.
		/// Note that changes to the file content will update `mtime`. This implies `ctime` will be adjusted at the same time, since `mtime` is an attribute of the file.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("ctime"), DataMember(Name = "ctime")]
		public DateTimeOffset? Ctime { get; set; }

		///<summary>
		/// <para><c>file.device</c></para>
		/// <para>Device that is the source of the file.</para>
		/// <example>sda</example>
		///</summary>
		[JsonPropertyName("device"), DataMember(Name = "device")]
		public string? Device { get; set; }

		///<summary>
		/// <para><c>file.directory</c></para>
		/// <para>Directory where the file is located. It should include the drive letter, when appropriate.</para>
		/// <example>/home/alice</example>
		///</summary>
		[JsonPropertyName("directory"), DataMember(Name = "directory")]
		public string? Directory { get; set; }

		///<summary>
		/// <para><c>file.drive_letter</c></para>
		/// <para>Drive letter where the file is located. This field is only relevant on Windows.
		/// The value should be uppercase, and not include the colon.</para>
		/// <example>C</example>
		///</summary>
		[JsonPropertyName("drive_letter"), DataMember(Name = "drive_letter")]
		public string? DriveLetter { get; set; }

		///<summary>
		/// <para><c>file.extension</c></para>
		/// <para>File extension, excluding the leading dot.
		/// Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").</para>
		/// <example>png</example>
		///</summary>
		[JsonPropertyName("extension"), DataMember(Name = "extension")]
		public string? Extension { get; set; }

		///<summary>
		/// <para><c>file.fork_name</c></para>
		/// <para>A fork is additional data associated with a filesystem object.
		/// On Linux, a resource fork is used to store additional data with a filesystem object. A file always has at least one fork for the data portion, and additional forks may exist.
		/// On NTFS, this is analogous to an Alternate Data Stream (ADS), and the default data stream for a file is just called $DATA. Zone.Identifier is commonly used by Windows to track contents downloaded from the Internet. An ADS is typically of the form: `C:\path\to\filename.extension:some_fork_name`, and `some_fork_name` is the value that should populate `fork_name`. `filename.extension` should populate `file.name`, and `extension` should populate `file.extension`. The full path, `file.path`, will include the fork name.</para>
		/// <example>Zone.Identifer</example>
		///</summary>
		[JsonPropertyName("fork_name"), DataMember(Name = "fork_name")]
		public string? ForkName { get; set; }

		///<summary>
		/// <para><c>file.gid</c></para>
		/// <para>Primary group ID (GID) of the file.</para>
		/// <example>1001</example>
		///</summary>
		[JsonPropertyName("gid"), DataMember(Name = "gid")]
		public string? Gid { get; set; }

		///<summary>
		/// <para><c>file.group</c></para>
		/// <para>Primary group name of the file.</para>
		/// <example>alice</example>
		///</summary>
		[JsonPropertyName("group"), DataMember(Name = "group")]
		public string? Group { get; set; }

		///<summary>
		/// <para><c>file.inode</c></para>
		/// <para>Inode representing the file in the filesystem.</para>
		/// <example>256383</example>
		///</summary>
		[JsonPropertyName("inode"), DataMember(Name = "inode")]
		public string? Inode { get; set; }

		///<summary>
		/// <para><c>file.mime_type</c></para>
		/// <para>MIME type should identify the format of the file or stream of bytes using https://www.iana.org/assignments/media-types/media-types.xhtml[IANA official types], where possible. When more than one type is applicable, the most specific type should be used.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("mime_type"), DataMember(Name = "mime_type")]
		public string? MimeType { get; set; }

		///<summary>
		/// <para><c>file.mode</c></para>
		/// <para>Mode of the file in octal representation.</para>
		/// <example>0640</example>
		///</summary>
		[JsonPropertyName("mode"), DataMember(Name = "mode")]
		public string? Mode { get; set; }

		///<summary>
		/// <para><c>file.mtime</c></para>
		/// <para>Last time the file content was modified.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("mtime"), DataMember(Name = "mtime")]
		public DateTimeOffset? Mtime { get; set; }

		///<summary>
		/// <para><c>file.name</c></para>
		/// <para>Name of the file including the extension, without the directory.</para>
		/// <example>example.png</example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }

		///<summary>
		/// <para><c>file.owner</c></para>
		/// <para>File owner's username.</para>
		/// <example>alice</example>
		///</summary>
		[JsonPropertyName("owner"), DataMember(Name = "owner")]
		public string? Owner { get; set; }

		///<summary>
		/// <para><c>file.path</c></para>
		/// <para>Full path to the file, including the file name. It should include the drive letter, when appropriate.</para>
		/// <example>/home/alice/example.png</example>
		///</summary>
		[JsonPropertyName("path"), DataMember(Name = "path")]
		public string? Path { get; set; }

		///<summary>
		/// <para><c>file.size</c></para>
		/// <para>File size in bytes.
		/// Only relevant when `file.type` is "file".</para>
		/// <example>16384</example>
		///</summary>
		[JsonPropertyName("size"), DataMember(Name = "size")]
		public long? Size { get; set; }

		///<summary>
		/// <para><c>file.target_path</c></para>
		/// <para>Target path for symlinks.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("target_path"), DataMember(Name = "target_path")]
		public string? TargetPath { get; set; }

		///<summary>
		/// <para><c>file.type</c></para>
		/// <para>File type (file, dir, or symlink).</para>
		/// <example>file</example>
		///</summary>
		[JsonPropertyName("type"), DataMember(Name = "type")]
		public string? Type { get; set; }

		///<summary>
		/// <para><c>file.uid</c></para>
		/// <para>The user ID (UID) or security identifier (SID) of the file owner.</para>
		/// <example>1001</example>
		///</summary>
		[JsonPropertyName("uid"), DataMember(Name = "uid")]
		public string? Uid { get; set; }
	}

	///<summary>
	/// Geo fields can carry data about a specific location related to an event.&#xA;This geolocation information can be derived from techniques such as Geo IP, or be user-supplied.
	///</summary>
	public abstract class GeoFieldSet {

		///<summary>
		/// <para><c>geo.city_name</c></para>
		/// <para>City name.</para>
		/// <example>Montreal</example>
		///</summary>
		[JsonPropertyName("city_name"), DataMember(Name = "city_name")]
		public string? CityName { get; set; }

		///<summary>
		/// <para><c>geo.continent_code</c></para>
		/// <para>Two-letter code representing continent's name.</para>
		/// <example>NA</example>
		///</summary>
		[JsonPropertyName("continent_code"), DataMember(Name = "continent_code")]
		public string? ContinentCode { get; set; }

		///<summary>
		/// <para><c>geo.continent_name</c></para>
		/// <para>Name of the continent.</para>
		/// <example>North America</example>
		///</summary>
		[JsonPropertyName("continent_name"), DataMember(Name = "continent_name")]
		public string? ContinentName { get; set; }

		///<summary>
		/// <para><c>geo.country_iso_code</c></para>
		/// <para>Country ISO code.</para>
		/// <example>CA</example>
		///</summary>
		[JsonPropertyName("country_iso_code"), DataMember(Name = "country_iso_code")]
		public string? CountryIsoCode { get; set; }

		///<summary>
		/// <para><c>geo.country_name</c></para>
		/// <para>Country name.</para>
		/// <example>Canada</example>
		///</summary>
		[JsonPropertyName("country_name"), DataMember(Name = "country_name")]
		public string? CountryName { get; set; }

		///<summary>
		/// <para><c>geo.location</c></para>
		/// <para>Longitude and latitude.</para>
		/// <example>{ "lon": -73.614830, "lat": 45.505918 }</example>
		///</summary>
		[JsonPropertyName("location"), DataMember(Name = "location")]
		public Location? Location { get; set; }

		///<summary>
		/// <para><c>geo.name</c></para>
		/// <para>User-defined description of a location, at the level of granularity they care about.
		/// Could be the name of their data centers, the floor number, if this describes a local physical entity, city names.
		/// Not typically used in automated geolocation.</para>
		/// <example>boston-dc</example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }

		///<summary>
		/// <para><c>geo.postal_code</c></para>
		/// <para>Postal code associated with the location.
		/// Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.</para>
		/// <example>94040</example>
		///</summary>
		[JsonPropertyName("postal_code"), DataMember(Name = "postal_code")]
		public string? PostalCode { get; set; }

		///<summary>
		/// <para><c>geo.region_iso_code</c></para>
		/// <para>Region ISO code.</para>
		/// <example>CA-QC</example>
		///</summary>
		[JsonPropertyName("region_iso_code"), DataMember(Name = "region_iso_code")]
		public string? RegionIsoCode { get; set; }

		///<summary>
		/// <para><c>geo.region_name</c></para>
		/// <para>Region name.</para>
		/// <example>Quebec</example>
		///</summary>
		[JsonPropertyName("region_name"), DataMember(Name = "region_name")]
		public string? RegionName { get; set; }

		///<summary>
		/// <para><c>geo.timezone</c></para>
		/// <para>The time zone of the location, such as IANA time zone name.</para>
		/// <example>America/Argentina/Buenos_Aires</example>
		///</summary>
		[JsonPropertyName("timezone"), DataMember(Name = "timezone")]
		public string? Timezone { get; set; }
	}

	///<summary>
	/// The group fields are meant to represent groups that are relevant to the event.
	///</summary>
	public abstract class GroupFieldSet {

		///<summary>
		/// <para><c>group.domain</c></para>
		/// <para>Name of the directory the group is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("domain"), DataMember(Name = "domain")]
		public string? Domain { get; set; }

		///<summary>
		/// <para><c>group.id</c></para>
		/// <para>Unique identifier for the group on the system/platform.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("id"), DataMember(Name = "id")]
		public string? Id { get; set; }

		///<summary>
		/// <para><c>group.name</c></para>
		/// <para>Name of the group.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }
	}

	///<summary>
	/// The hash fields represent different bitwise hash algorithms and their values.&#xA;Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields for other hashes by lowercasing the hash algorithm name and using underscore separators as appropriate (snake case, e.g. sha3_512).&#xA;Note that this fieldset is used for common hashes that may be computed over a range of generic bytes. Entity-specific hashes such as ja3 or imphash are placed in the fieldsets to which they relate (tls and pe, respectively).
	///</summary>
	public abstract class HashFieldSet {

		///<summary>
		/// <para><c>hash.md5</c></para>
		/// <para>MD5 hash.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("md5"), DataMember(Name = "md5")]
		public string? Md5 { get; set; }

		///<summary>
		/// <para><c>hash.sha1</c></para>
		/// <para>SHA1 hash.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("sha1"), DataMember(Name = "sha1")]
		public string? Sha1 { get; set; }

		///<summary>
		/// <para><c>hash.sha256</c></para>
		/// <para>SHA256 hash.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("sha256"), DataMember(Name = "sha256")]
		public string? Sha256 { get; set; }

		///<summary>
		/// <para><c>hash.sha384</c></para>
		/// <para>SHA384 hash.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("sha384"), DataMember(Name = "sha384")]
		public string? Sha384 { get; set; }

		///<summary>
		/// <para><c>hash.sha512</c></para>
		/// <para>SHA512 hash.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("sha512"), DataMember(Name = "sha512")]
		public string? Sha512 { get; set; }

		///<summary>
		/// <para><c>hash.ssdeep</c></para>
		/// <para>SSDEEP hash.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("ssdeep"), DataMember(Name = "ssdeep")]
		public string? Ssdeep { get; set; }

		///<summary>
		/// <para><c>hash.tlsh</c></para>
		/// <para>TLSH hash.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("tlsh"), DataMember(Name = "tlsh")]
		public string? Tlsh { get; set; }
	}

	///<summary>
	/// A host is defined as a general computing instance.&#xA;ECS host.* fields should be populated with details about the host on which the event happened, or from which the measurement was taken. Host types include hardware, virtual machines, Docker containers, and Kubernetes nodes.
	///</summary>
	public abstract class HostFieldSet {

		///<summary>
		/// <para><c>host.architecture</c></para>
		/// <para>Operating system architecture.</para>
		/// <example>x86_64</example>
		///</summary>
		[JsonPropertyName("architecture"), DataMember(Name = "architecture")]
		public string? Architecture { get; set; }

		///<summary>
		/// <para><c>host.boot.id</c></para>
		/// <para>Linux boot uuid taken from /proc/sys/kernel/random/boot_id. Note the boot_id value from /proc may or may not be the same in containers as on the host. Some container runtimes will bind mount a new boot_id value onto the proc file in each container.
		/// <para><br/>This field is beta and subject to change.</para></para>
		/// <example>88a1f0ed-5ae5-41ee-af6b-41921c311872</example>
		///</summary>
		[JsonPropertyName("boot.id"), DataMember(Name = "boot.id")]
		public string? BootId { get; set; }

		///<summary>
		/// <para><c>host.cpu.usage</c></para>
		/// <para>Percent CPU used which is normalized by the number of CPU cores and it ranges from 0 to 1.
		/// Scaling factor: 1000.
		/// For example: For a two core host, this value should be the average of the two cores, between 0 and 1.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("cpu.usage"), DataMember(Name = "cpu.usage")]
		public float? CpuUsage { get; set; }

		///<summary>
		/// <para><c>host.disk.read.bytes</c></para>
		/// <para>The total number of bytes (gauge) read successfully (aggregated from all disks) since the last metric collection.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("disk.read.bytes"), DataMember(Name = "disk.read.bytes")]
		public long? DiskReadBytes { get; set; }

		///<summary>
		/// <para><c>host.disk.write.bytes</c></para>
		/// <para>The total number of bytes (gauge) written successfully (aggregated from all disks) since the last metric collection.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("disk.write.bytes"), DataMember(Name = "disk.write.bytes")]
		public long? DiskWriteBytes { get; set; }

		///<summary>
		/// <para><c>host.domain</c></para>
		/// <para>Name of the domain of which the host is a member.
		/// For example, on Windows this could be the host's Active Directory domain or NetBIOS domain name. For Linux this could be the domain of the host's LDAP provider.</para>
		/// <example>CONTOSO</example>
		///</summary>
		[JsonPropertyName("domain"), DataMember(Name = "domain")]
		public string? Domain { get; set; }

		///<summary>
		/// <para><c>host.hostname</c></para>
		/// <para>Hostname of the host.
		/// It normally contains what the `hostname` command returns on the host machine.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("hostname"), DataMember(Name = "hostname")]
		public string? Hostname { get; set; }

		///<summary>
		/// <para><c>host.id</c></para>
		/// <para>Unique host id.
		/// As hostname is not always unique, use values that are meaningful in your environment.
		/// Example: The current usage of `beat.name`.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("id"), DataMember(Name = "id")]
		public string? Id { get; set; }

		///<summary>
		/// <para><c>host.ip</c></para>
		/// <para>Host ip addresses.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("ip"), DataMember(Name = "ip")]
		public string[]? Ip { get; set; }

		///<summary>
		/// <para><c>host.mac</c></para>
		/// <para>Host MAC addresses.
		/// The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
		/// <para>pattern: </para></para>
		/// <example>["00-00-5E-00-53-23", "00-00-5E-00-53-24"]</example>
		///</summary>
		[JsonPropertyName("mac"), DataMember(Name = "mac")]
		public string[]? Mac { get; set; }

		///<summary>
		/// <para><c>host.name</c></para>
		/// <para>Name of the host.
		/// It can contain what hostname returns on Unix systems, the fully qualified domain name (FQDN), or a name specified by the user. The recommended value is the lowercase FQDN of the host.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }

		///<summary>
		/// <para><c>host.network.egress.bytes</c></para>
		/// <para>The number of bytes (gauge) sent out on all network interfaces by the host since the last metric collection.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("network.egress.bytes"), DataMember(Name = "network.egress.bytes")]
		public long? NetworkEgressBytes { get; set; }

		///<summary>
		/// <para><c>host.network.egress.packets</c></para>
		/// <para>The number of packets (gauge) sent out on all network interfaces by the host since the last metric collection.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("network.egress.packets"), DataMember(Name = "network.egress.packets")]
		public long? NetworkEgressPackets { get; set; }

		///<summary>
		/// <para><c>host.network.ingress.bytes</c></para>
		/// <para>The number of bytes received (gauge) on all network interfaces by the host since the last metric collection.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("network.ingress.bytes"), DataMember(Name = "network.ingress.bytes")]
		public long? NetworkIngressBytes { get; set; }

		///<summary>
		/// <para><c>host.network.ingress.packets</c></para>
		/// <para>The number of packets (gauge) received on all network interfaces by the host since the last metric collection.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("network.ingress.packets"), DataMember(Name = "network.ingress.packets")]
		public long? NetworkIngressPackets { get; set; }

		///<summary>
		/// <para><c>host.pid_ns_ino</c></para>
		/// <para>This is the inode number of the namespace in the namespace file system (nsfs). Unsigned int inum in include/linux/ns_common.h.
		/// <para><br/>This field is beta and subject to change.</para></para>
		/// <example>256383</example>
		///</summary>
		[JsonPropertyName("pid_ns_ino"), DataMember(Name = "pid_ns_ino")]
		public string? PidNsIno { get; set; }

		///<summary>
		/// <para><c>host.type</c></para>
		/// <para>Type of host.
		/// For Cloud providers this can be the machine type like `t2.medium`. If vm, this could be the container, for example, or other information meaningful in your environment.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("type"), DataMember(Name = "type")]
		public string? Type { get; set; }

		///<summary>
		/// <para><c>host.uptime</c></para>
		/// <para>Seconds the host has been up.</para>
		/// <example>1325</example>
		///</summary>
		[JsonPropertyName("uptime"), DataMember(Name = "uptime")]
		public long? Uptime { get; set; }
	}

	///<summary>
	/// Fields related to HTTP activity. Use the `url` field set to store the url of the request.
	///</summary>
	public abstract class HttpFieldSet {

		///<summary>
		/// <para><c>http.request.body.bytes</c></para>
		/// <para>Size in bytes of the request body.</para>
		/// <example>887</example>
		///</summary>
		[JsonPropertyName("request.body.bytes"), DataMember(Name = "request.body.bytes")]
		public long? RequestBodyBytes { get; set; }

		///<summary>
		/// <para><c>http.request.body.content</c></para>
		/// <para>The full HTTP request body.</para>
		/// <example>Hello world</example>
		///</summary>
		[JsonPropertyName("request.body.content"), DataMember(Name = "request.body.content")]
		public string? RequestBodyContent { get; set; }

		///<summary>
		/// <para><c>http.request.bytes</c></para>
		/// <para>Total size in bytes of the request (body and headers).</para>
		/// <example>1437</example>
		///</summary>
		[JsonPropertyName("request.bytes"), DataMember(Name = "request.bytes")]
		public long? RequestBytes { get; set; }

		///<summary>
		/// <para><c>http.request.id</c></para>
		/// <para>A unique identifier for each HTTP request to correlate logs between clients and servers in transactions.
		/// The id may be contained in a non-standard HTTP header, such as `X-Request-ID` or `X-Correlation-ID`.</para>
		/// <example>123e4567-e89b-12d3-a456-426614174000</example>
		///</summary>
		[JsonPropertyName("request.id"), DataMember(Name = "request.id")]
		public string? RequestId { get; set; }

		///<summary>
		/// <para><c>http.request.method</c></para>
		/// <para>HTTP request method.
		/// The value should retain its casing from the original event. For example, `GET`, `get`, and `GeT` are all considered valid values for this field.</para>
		/// <example>POST</example>
		///</summary>
		[JsonPropertyName("request.method"), DataMember(Name = "request.method")]
		public string? RequestMethod { get; set; }

		///<summary>
		/// <para><c>http.request.mime_type</c></para>
		/// <para>Mime type of the body of the request.
		/// This value must only be populated based on the content of the request body, not on the `Content-Type` header. Comparing the mime type of a request with the request's Content-Type header can be helpful in detecting threats or misconfigured clients.</para>
		/// <example>image/gif</example>
		///</summary>
		[JsonPropertyName("request.mime_type"), DataMember(Name = "request.mime_type")]
		public string? RequestMimeType { get; set; }

		///<summary>
		/// <para><c>http.request.referrer</c></para>
		/// <para>Referrer for this HTTP request.</para>
		/// <example>https://blog.example.com/</example>
		///</summary>
		[JsonPropertyName("request.referrer"), DataMember(Name = "request.referrer")]
		public string? RequestReferrer { get; set; }

		///<summary>
		/// <para><c>http.response.body.bytes</c></para>
		/// <para>Size in bytes of the response body.</para>
		/// <example>887</example>
		///</summary>
		[JsonPropertyName("response.body.bytes"), DataMember(Name = "response.body.bytes")]
		public long? ResponseBodyBytes { get; set; }

		///<summary>
		/// <para><c>http.response.body.content</c></para>
		/// <para>The full HTTP response body.</para>
		/// <example>Hello world</example>
		///</summary>
		[JsonPropertyName("response.body.content"), DataMember(Name = "response.body.content")]
		public string? ResponseBodyContent { get; set; }

		///<summary>
		/// <para><c>http.response.bytes</c></para>
		/// <para>Total size in bytes of the response (body and headers).</para>
		/// <example>1437</example>
		///</summary>
		[JsonPropertyName("response.bytes"), DataMember(Name = "response.bytes")]
		public long? ResponseBytes { get; set; }

		///<summary>
		/// <para><c>http.response.mime_type</c></para>
		/// <para>Mime type of the body of the response.
		/// This value must only be populated based on the content of the response body, not on the `Content-Type` header. Comparing the mime type of a response with the response's Content-Type header can be helpful in detecting misconfigured servers.</para>
		/// <example>image/gif</example>
		///</summary>
		[JsonPropertyName("response.mime_type"), DataMember(Name = "response.mime_type")]
		public string? ResponseMimeType { get; set; }

		///<summary>
		/// <para><c>http.response.status_code</c></para>
		/// <para>HTTP response status code.</para>
		/// <example>404</example>
		///</summary>
		[JsonPropertyName("response.status_code"), DataMember(Name = "response.status_code")]
		public long? ResponseStatusCode { get; set; }

		///<summary>
		/// <para><c>http.version</c></para>
		/// <para>HTTP version.</para>
		/// <example>1.1</example>
		///</summary>
		[JsonPropertyName("version"), DataMember(Name = "version")]
		public string? Version { get; set; }
	}

	///<summary>
	/// The interface fields are used to record ingress and egress interface information when reported by an observer (e.g. firewall, router, load balancer) in the context of the observer handling a network connection.  In the case of a single observer interface (e.g. network sensor on a span port) only the observer.ingress information should be populated.
	///</summary>
	public abstract class InterfaceFieldSet {

		///<summary>
		/// <para><c>interface.alias</c></para>
		/// <para>Interface alias as reported by the system, typically used in firewall implementations for e.g. inside, outside, or dmz logical interface naming.</para>
		/// <example>outside</example>
		///</summary>
		[JsonPropertyName("alias"), DataMember(Name = "alias")]
		public string? Alias { get; set; }

		///<summary>
		/// <para><c>interface.id</c></para>
		/// <para>Interface ID as reported by an observer (typically SNMP interface ID).</para>
		/// <example>10</example>
		///</summary>
		[JsonPropertyName("id"), DataMember(Name = "id")]
		public string? Id { get; set; }

		///<summary>
		/// <para><c>interface.name</c></para>
		/// <para>Interface name as reported by the system.</para>
		/// <example>eth0</example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }
	}

	///<summary>
	/// Details about the event&#x27;s logging mechanism or logging transport.&#xA;The log.* fields are typically populated with details about the logging mechanism used to create and/or transport the event. For example, syslog details belong under `log.syslog.*`.&#xA;The details specific to your event source are typically not logged under `log.*`, but rather in `event.*` or in other ECS fields.
	///</summary>
	public abstract class LogFieldSet {

		///<summary>
		/// <para><c>log.file.path</c></para>
		/// <para>Full path to the log file this event came from, including the file name. It should include the drive letter, when appropriate.
		/// If the event wasn't read from a log file, do not populate this field.</para>
		/// <example>/var/log/fun-times.log</example>
		///</summary>
		[JsonPropertyName("file.path"), DataMember(Name = "file.path")]
		public string? FilePath { get; set; }

		///<summary>
		/// <para><c>log.level</c></para>
		/// <para>Original log level of the log event.
		/// If the source of the event provides a log level or textual severity, this is the one that goes in `log.level`. If your source doesn't specify one, you may put your event transport's severity here (e.g. Syslog severity).
		/// Some examples are `warn`, `err`, `i`, `informational`.</para>
		/// <example>error</example>
		///</summary>
		[JsonPropertyName("level"), DataMember(Name = "level")]
		public string? Level { get; set; }

		///<summary>
		/// <para><c>log.logger</c></para>
		/// <para>The name of the logger inside an application. This is usually the name of the class which initialized the logger, or can be a custom name.</para>
		/// <example>org.elasticsearch.bootstrap.Bootstrap</example>
		///</summary>
		[JsonPropertyName("logger"), DataMember(Name = "logger")]
		public string? Logger { get; set; }

		///<summary>
		/// <para><c>log.origin.file.line</c></para>
		/// <para>The line number of the file containing the source code which originated the log event.</para>
		/// <example>42</example>
		///</summary>
		[JsonPropertyName("origin.file.line"), DataMember(Name = "origin.file.line")]
		public long? OriginFileLine { get; set; }

		///<summary>
		/// <para><c>log.origin.file.name</c></para>
		/// <para>The name of the file containing the source code which originated the log event.
		/// Note that this field is not meant to capture the log file. The correct field to capture the log file is `log.file.path`.</para>
		/// <example>Bootstrap.java</example>
		///</summary>
		[JsonPropertyName("origin.file.name"), DataMember(Name = "origin.file.name")]
		public string? OriginFileName { get; set; }

		///<summary>
		/// <para><c>log.origin.function</c></para>
		/// <para>The name of the function or method which originated the log event.</para>
		/// <example>init</example>
		///</summary>
		[JsonPropertyName("origin.function"), DataMember(Name = "origin.function")]
		public string? OriginFunction { get; set; }

		///<summary>
		/// <para><c>log.syslog</c></para>
		/// <para>The Syslog metadata of the event, if the event was transmitted via Syslog. Please see RFCs 5424 or 3164.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("syslog"), DataMember(Name = "syslog")]
		public LogSyslog? Syslog { get; set; }
	}

	///<summary>
	/// These fields contain Mac OS Mach Object file format (Mach-O) metadata.
	///</summary>
	public abstract class MachoFieldSet {

		///<summary>
		/// <para><c>macho.go_import_hash</c></para>
		/// <para>A hash of the Go language imports in a Mach-O file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// The algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).</para>
		/// <example>10bddcb4cee42080f76c88d9ff964491</example>
		///</summary>
		[JsonPropertyName("go_import_hash"), DataMember(Name = "go_import_hash")]
		public string? GoImportHash { get; set; }

		///<summary>
		/// <para><c>macho.go_imports</c></para>
		/// <para>List of imported Go language element names and types.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("go_imports"), DataMember(Name = "go_imports")]
		public string? GoImports { get; set; }

		///<summary>
		/// <para><c>macho.go_imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("go_imports_names_entropy"), DataMember(Name = "go_imports_names_entropy")]
		public long? GoImportsNamesEntropy { get; set; }

		///<summary>
		/// <para><c>macho.go_imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("go_imports_names_var_entropy"), DataMember(Name = "go_imports_names_var_entropy")]
		public long? GoImportsNamesVarEntropy { get; set; }

		///<summary>
		/// <para><c>macho.go_stripped</c></para>
		/// <para>Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("go_stripped"), DataMember(Name = "go_stripped")]
		public bool? GoStripped { get; set; }

		///<summary>
		/// <para><c>macho.import_hash</c></para>
		/// <para>A hash of the imports in a Mach-O file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is a synonym for symhash.</para>
		/// <example>d41d8cd98f00b204e9800998ecf8427e</example>
		///</summary>
		[JsonPropertyName("import_hash"), DataMember(Name = "import_hash")]
		public string? ImportHash { get; set; }

		///<summary>
		/// <para><c>macho.imports</c></para>
		/// <para>List of imported element names and types.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("imports"), DataMember(Name = "imports")]
		public string[]? Imports { get; set; }

		///<summary>
		/// <para><c>macho.imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("imports_names_entropy"), DataMember(Name = "imports_names_entropy")]
		public long? ImportsNamesEntropy { get; set; }

		///<summary>
		/// <para><c>macho.imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("imports_names_var_entropy"), DataMember(Name = "imports_names_var_entropy")]
		public long? ImportsNamesVarEntropy { get; set; }

		///<summary>
		/// <para><c>macho.symhash</c></para>
		/// <para>A hash of the imports in a Mach-O file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is a Mach-O implementation of the Windows PE imphash</para>
		/// <example>d3ccf195b62a9279c3c19af1080497ec</example>
		///</summary>
		[JsonPropertyName("symhash"), DataMember(Name = "symhash")]
		public string? Symhash { get; set; }

		///<summary>
		/// <para><c>macho.sections</c></para>
		/// <para>An array containing an object for each section of the Mach-O file.
		/// The keys that should be present in these objects are defined by sub-fields underneath `macho.sections.*`.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("sections"), DataMember(Name = "sections")]
		public MachoSections[]? Sections { get; set; }
	}

	///<summary>
	/// The network is defined as the communication path over which a host or network event happens.&#xA;The network.* fields should be populated with details about the network activity associated with an event.
	///</summary>
	public abstract class NetworkFieldSet {

		///<summary>
		/// <para><c>network.application</c></para>
		/// <para>When a specific application or service is identified from network connection details (source/dest IPs, ports, certificates, or wire format), this field captures the application's or service's name.
		/// For example, the original event identifies the network connection being from a specific web service in a `https` network connection, like `facebook` or `twitter`.
		/// The field value must be normalized to lowercase for querying.</para>
		/// <example>aim</example>
		///</summary>
		[JsonPropertyName("application"), DataMember(Name = "application")]
		public string? Application { get; set; }

		///<summary>
		/// <para><c>network.bytes</c></para>
		/// <para>Total bytes transferred in both directions.
		/// If `source.bytes` and `destination.bytes` are known, `network.bytes` is their sum.</para>
		/// <example>368</example>
		///</summary>
		[JsonPropertyName("bytes"), DataMember(Name = "bytes")]
		public long? Bytes { get; set; }

		///<summary>
		/// <para><c>network.community_id</c></para>
		/// <para>A hash of source and destination IPs and ports, as well as the protocol used in a communication. This is a tool-agnostic standard to identify flows.
		/// Learn more at https://github.com/corelight/community-id-spec.</para>
		/// <example>1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0=</example>
		///</summary>
		[JsonPropertyName("community_id"), DataMember(Name = "community_id")]
		public string? CommunityId { get; set; }

		///<summary>
		/// <para><c>network.direction</c></para>
		/// <para>Direction of the network traffic.
		/// When mapping events from a host-based monitoring context, populate this field from the host's point of view, using the values "ingress" or "egress".
		/// When mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of the network perimeter, using the values "inbound", "outbound", "internal" or "external".
		/// Note that "internal" is not crossing perimeter boundaries, and is meant to describe communication between two hosts within the perimeter. Note also that "external" is meant to describe traffic between two hosts that are external to the perimeter. This could for example be useful for ISPs or VPN service providers.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>ingress</item>
		/// <item>egress</item>
		/// <item>inbound</item>
		/// <item>outbound</item>
		/// <item>internal</item>
		/// <item>external</item>
		/// <item>unknown</item>
		/// </list></para>
		/// <example>inbound</example>
		///</summary>
		[JsonPropertyName("direction"), DataMember(Name = "direction")]
		public string? Direction { get; set; }

		///<summary>
		/// <para><c>network.forwarded_ip</c></para>
		/// <para>Host IP address when the source IP address is the proxy.</para>
		/// <example>192.1.1.2</example>
		///</summary>
		[JsonPropertyName("forwarded_ip"), DataMember(Name = "forwarded_ip")]
		public string? ForwardedIp { get; set; }

		///<summary>
		/// <para><c>network.iana_number</c></para>
		/// <para>IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Standardized list of protocols. This aligns well with NetFlow and sFlow related logs which use the IANA Protocol Number.</para>
		/// <example>6</example>
		///</summary>
		[JsonPropertyName("iana_number"), DataMember(Name = "iana_number")]
		public string? IanaNumber { get; set; }

		///<summary>
		/// <para><c>network.name</c></para>
		/// <para>Name given by operators to sections of their network.</para>
		/// <example>Guest Wifi</example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }

		///<summary>
		/// <para><c>network.packets</c></para>
		/// <para>Total packets transferred in both directions.
		/// If `source.packets` and `destination.packets` are known, `network.packets` is their sum.</para>
		/// <example>24</example>
		///</summary>
		[JsonPropertyName("packets"), DataMember(Name = "packets")]
		public long? Packets { get; set; }

		///<summary>
		/// <para><c>network.protocol</c></para>
		/// <para>In the OSI Model this would be the Application Layer protocol. For example, `http`, `dns`, or `ssh`.
		/// The field value must be normalized to lowercase for querying.</para>
		/// <example>http</example>
		///</summary>
		[JsonPropertyName("protocol"), DataMember(Name = "protocol")]
		public string? Protocol { get; set; }

		///<summary>
		/// <para><c>network.transport</c></para>
		/// <para>Same as network.iana_number, but instead using the Keyword name of the transport layer (udp, tcp, ipv6-icmp, etc.)
		/// The field value must be normalized to lowercase for querying.</para>
		/// <example>tcp</example>
		///</summary>
		[JsonPropertyName("transport"), DataMember(Name = "transport")]
		public string? Transport { get; set; }

		///<summary>
		/// <para><c>network.type</c></para>
		/// <para>In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc
		/// The field value must be normalized to lowercase for querying.</para>
		/// <example>ipv4</example>
		///</summary>
		[JsonPropertyName("type"), DataMember(Name = "type")]
		public string? Type { get; set; }

		///<summary>
		/// <para><c>network.inner</c></para>
		/// <para>Network.inner fields are added in addition to network.vlan fields to describe the innermost VLAN when q-in-q VLAN tagging is present. Allowed fields include vlan.id and vlan.name. Inner vlan fields are typically used when sending traffic with multiple 802.1q encapsulations to a network sensor (e.g. Zeek, Wireshark.)</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("inner"), DataMember(Name = "inner")]
		public NetworkInner? Inner { get; set; }
	}

	///<summary>
	/// An observer is defined as a special network, security, or application device used to detect, observe, or create network, security, or application-related events and metrics.&#xA;This could be a custom hardware appliance or a server that has been configured to run special network, security, or application software. Examples include firewalls, web proxies, intrusion detection/prevention systems, network monitoring sensors, web application firewalls, data loss prevention systems, and APM servers. The observer.* fields shall be populated with details of the system, if any, that detects, observes and/or creates a network, security, or application event or metric. Message queues and ETL components used in processing events or metrics are not considered observers in ECS.
	///</summary>
	public abstract class ObserverFieldSet {

		///<summary>
		/// <para><c>observer.hostname</c></para>
		/// <para>Hostname of the observer.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("hostname"), DataMember(Name = "hostname")]
		public string? Hostname { get; set; }

		///<summary>
		/// <para><c>observer.ip</c></para>
		/// <para>IP addresses of the observer.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("ip"), DataMember(Name = "ip")]
		public string[]? Ip { get; set; }

		///<summary>
		/// <para><c>observer.mac</c></para>
		/// <para>MAC addresses of the observer.
		/// The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
		/// <para>pattern: </para></para>
		/// <example>["00-00-5E-00-53-23", "00-00-5E-00-53-24"]</example>
		///</summary>
		[JsonPropertyName("mac"), DataMember(Name = "mac")]
		public string[]? Mac { get; set; }

		///<summary>
		/// <para><c>observer.name</c></para>
		/// <para>Custom name of the observer.
		/// This is a name that can be given to an observer. This can be helpful for example if multiple firewalls of the same model are used in an organization.
		/// If no custom name is needed, the field can be left empty.</para>
		/// <example>1_proxySG</example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }

		///<summary>
		/// <para><c>observer.product</c></para>
		/// <para>The product name of the observer.</para>
		/// <example>s200</example>
		///</summary>
		[JsonPropertyName("product"), DataMember(Name = "product")]
		public string? Product { get; set; }

		///<summary>
		/// <para><c>observer.serial_number</c></para>
		/// <para>Observer serial number.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("serial_number"), DataMember(Name = "serial_number")]
		public string? SerialNumber { get; set; }

		///<summary>
		/// <para><c>observer.type</c></para>
		/// <para>The type of the observer the data is coming from.
		/// There is no predefined list of observer types. Some examples are `forwarder`, `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.</para>
		/// <example>firewall</example>
		///</summary>
		[JsonPropertyName("type"), DataMember(Name = "type")]
		public string? Type { get; set; }

		///<summary>
		/// <para><c>observer.vendor</c></para>
		/// <para>Vendor name of the observer.</para>
		/// <example>Symantec</example>
		///</summary>
		[JsonPropertyName("vendor"), DataMember(Name = "vendor")]
		public string? Vendor { get; set; }

		///<summary>
		/// <para><c>observer.version</c></para>
		/// <para>Observer version.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("version"), DataMember(Name = "version")]
		public string? Version { get; set; }

		///<summary>
		/// <para><c>observer.egress</c></para>
		/// <para>Observer.egress holds information like interface number and name, vlan, and zone information to classify egress traffic.  Single armed monitoring such as a network sensor on a span port should only use observer.ingress to categorize traffic.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("egress"), DataMember(Name = "egress")]
		public ObserverEgress? Egress { get; set; }

		///<summary>
		/// <para><c>observer.ingress</c></para>
		/// <para>Observer.ingress holds information like interface number and name, vlan, and zone information to classify ingress traffic.  Single armed monitoring such as a network sensor on a span port should only use observer.ingress to categorize traffic.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("ingress"), DataMember(Name = "ingress")]
		public ObserverIngress? Ingress { get; set; }
	}

	///<summary>
	/// Fields that describe the resources which container orchestrators manage or act upon.
	///</summary>
	public abstract class OrchestratorFieldSet {

		///<summary>
		/// <para><c>orchestrator.api_version</c></para>
		/// <para>API version being used to carry out the action</para>
		/// <example>v1beta1</example>
		///</summary>
		[JsonPropertyName("api_version"), DataMember(Name = "api_version")]
		public string? ApiVersion { get; set; }

		///<summary>
		/// <para><c>orchestrator.cluster.id</c></para>
		/// <para>Unique ID of the cluster.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("cluster.id"), DataMember(Name = "cluster.id")]
		public string? ClusterId { get; set; }

		///<summary>
		/// <para><c>orchestrator.cluster.name</c></para>
		/// <para>Name of the cluster.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("cluster.name"), DataMember(Name = "cluster.name")]
		public string? ClusterName { get; set; }

		///<summary>
		/// <para><c>orchestrator.cluster.url</c></para>
		/// <para>URL of the API used to manage the cluster.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("cluster.url"), DataMember(Name = "cluster.url")]
		public string? ClusterUrl { get; set; }

		///<summary>
		/// <para><c>orchestrator.cluster.version</c></para>
		/// <para>The version of the cluster.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("cluster.version"), DataMember(Name = "cluster.version")]
		public string? ClusterVersion { get; set; }

		///<summary>
		/// <para><c>orchestrator.namespace</c></para>
		/// <para>Namespace in which the action is taking place.</para>
		/// <example>kube-system</example>
		///</summary>
		[JsonPropertyName("namespace"), DataMember(Name = "namespace")]
		public string? Namespace { get; set; }

		///<summary>
		/// <para><c>orchestrator.organization</c></para>
		/// <para>Organization affected by the event (for multi-tenant orchestrator setups).</para>
		/// <example>elastic</example>
		///</summary>
		[JsonPropertyName("organization"), DataMember(Name = "organization")]
		public string? Organization { get; set; }

		///<summary>
		/// <para><c>orchestrator.resource.annotation</c></para>
		/// <para>The list of annotations added to the resource.</para>
		/// <example>['key1:value1', 'key2:value2', 'key3:value3']</example>
		///</summary>
		[JsonPropertyName("resource.annotation"), DataMember(Name = "resource.annotation")]
		public string[]? ResourceAnnotation { get; set; }

		///<summary>
		/// <para><c>orchestrator.resource.id</c></para>
		/// <para>Unique ID of the resource being acted upon.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("resource.id"), DataMember(Name = "resource.id")]
		public string? ResourceId { get; set; }

		///<summary>
		/// <para><c>orchestrator.resource.ip</c></para>
		/// <para>IP address assigned to the resource associated with the event being observed. In the case of a Kubernetes Pod, this array would contain only one element: the IP of the Pod (as opposed to the Node on which the Pod is running).</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("resource.ip"), DataMember(Name = "resource.ip")]
		public string[]? ResourceIp { get; set; }

		///<summary>
		/// <para><c>orchestrator.resource.label</c></para>
		/// <para>The list of labels added to the resource.</para>
		/// <example>['key1:value1', 'key2:value2', 'key3:value3']</example>
		///</summary>
		[JsonPropertyName("resource.label"), DataMember(Name = "resource.label")]
		public string[]? ResourceLabel { get; set; }

		///<summary>
		/// <para><c>orchestrator.resource.name</c></para>
		/// <para>Name of the resource being acted upon.</para>
		/// <example>test-pod-cdcws</example>
		///</summary>
		[JsonPropertyName("resource.name"), DataMember(Name = "resource.name")]
		public string? ResourceName { get; set; }

		///<summary>
		/// <para><c>orchestrator.resource.parent.type</c></para>
		/// <para>Type or kind of the parent resource associated with the event being observed. In Kubernetes, this will be the name of a built-in workload resource (e.g., Deployment, StatefulSet, DaemonSet).</para>
		/// <example>DaemonSet</example>
		///</summary>
		[JsonPropertyName("resource.parent.type"), DataMember(Name = "resource.parent.type")]
		public string? ResourceParentType { get; set; }

		///<summary>
		/// <para><c>orchestrator.resource.type</c></para>
		/// <para>Type of resource being acted upon.</para>
		/// <example>service</example>
		///</summary>
		[JsonPropertyName("resource.type"), DataMember(Name = "resource.type")]
		public string? ResourceType { get; set; }

		///<summary>
		/// <para><c>orchestrator.type</c></para>
		/// <para>Orchestrator cluster type (e.g. kubernetes, nomad or cloudfoundry).</para>
		/// <example>kubernetes</example>
		///</summary>
		[JsonPropertyName("type"), DataMember(Name = "type")]
		public string? Type { get; set; }
	}

	///<summary>
	/// The organization fields enrich data with information about the company or entity the data is associated with.&#xA;These fields help you arrange or filter data stored in an index by one or multiple organizations.
	///</summary>
	public abstract class OrganizationFieldSet {

		///<summary>
		/// <para><c>organization.id</c></para>
		/// <para>Unique identifier for the organization.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("id"), DataMember(Name = "id")]
		public string? Id { get; set; }

		///<summary>
		/// <para><c>organization.name</c></para>
		/// <para>Organization name.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }
	}

	///<summary>
	/// The OS fields contain information about the operating system.
	///</summary>
	public abstract class OsFieldSet {

		///<summary>
		/// <para><c>os.family</c></para>
		/// <para>OS family (such as redhat, debian, freebsd, windows).</para>
		/// <example>debian</example>
		///</summary>
		[JsonPropertyName("family"), DataMember(Name = "family")]
		public string? Family { get; set; }

		///<summary>
		/// <para><c>os.full</c></para>
		/// <para>Operating system name, including the version or code name.</para>
		/// <example>Mac OS Mojave</example>
		///</summary>
		[JsonPropertyName("full"), DataMember(Name = "full")]
		public string? Full { get; set; }

		///<summary>
		/// <para><c>os.kernel</c></para>
		/// <para>Operating system kernel version as a raw string.</para>
		/// <example>4.4.0-112-generic</example>
		///</summary>
		[JsonPropertyName("kernel"), DataMember(Name = "kernel")]
		public string? Kernel { get; set; }

		///<summary>
		/// <para><c>os.name</c></para>
		/// <para>Operating system name, without the version.</para>
		/// <example>Mac OS X</example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }

		///<summary>
		/// <para><c>os.platform</c></para>
		/// <para>Operating system platform (such centos, ubuntu, windows).</para>
		/// <example>darwin</example>
		///</summary>
		[JsonPropertyName("platform"), DataMember(Name = "platform")]
		public string? Platform { get; set; }

		///<summary>
		/// <para><c>os.type</c></para>
		/// <para>Use the `os.type` field to categorize the operating system into one of the broad commercial families.
		/// If the OS you're dealing with is not listed as an expected value, the field should not be populated. Please let us know by opening an issue with ECS, to propose its addition.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>linux</item>
		/// <item>macos</item>
		/// <item>unix</item>
		/// <item>windows</item>
		/// <item>ios</item>
		/// <item>android</item>
		/// </list></para>
		/// <example>macos</example>
		///</summary>
		[JsonPropertyName("type"), DataMember(Name = "type")]
		public string? Type { get; set; }

		///<summary>
		/// <para><c>os.version</c></para>
		/// <para>Operating system version as a raw string.</para>
		/// <example>10.14.1</example>
		///</summary>
		[JsonPropertyName("version"), DataMember(Name = "version")]
		public string? Version { get; set; }
	}

	///<summary>
	/// These fields contain information about an installed software package. It contains general information about a package, such as name, version or size. It also contains installation details, such as time or location.
	///</summary>
	public abstract class PackageFieldSet {

		///<summary>
		/// <para><c>package.architecture</c></para>
		/// <para>Package architecture.</para>
		/// <example>x86_64</example>
		///</summary>
		[JsonPropertyName("architecture"), DataMember(Name = "architecture")]
		public string? Architecture { get; set; }

		///<summary>
		/// <para><c>package.build_version</c></para>
		/// <para>Additional information about the build version of the installed package.
		/// For example use the commit SHA of a non-released package.</para>
		/// <example>36f4f7e89dd61b0988b12ee000b98966867710cd</example>
		///</summary>
		[JsonPropertyName("build_version"), DataMember(Name = "build_version")]
		public string? BuildVersion { get; set; }

		///<summary>
		/// <para><c>package.checksum</c></para>
		/// <para>Checksum of the installed package for verification.</para>
		/// <example>68b329da9893e34099c7d8ad5cb9c940</example>
		///</summary>
		[JsonPropertyName("checksum"), DataMember(Name = "checksum")]
		public string? Checksum { get; set; }

		///<summary>
		/// <para><c>package.description</c></para>
		/// <para>Description of the package.</para>
		/// <example>Open source programming language to build simple/reliable/efficient software.</example>
		///</summary>
		[JsonPropertyName("description"), DataMember(Name = "description")]
		public string? Description { get; set; }

		///<summary>
		/// <para><c>package.install_scope</c></para>
		/// <para>Indicating how the package was installed, e.g. user-local, global.</para>
		/// <example>global</example>
		///</summary>
		[JsonPropertyName("install_scope"), DataMember(Name = "install_scope")]
		public string? InstallScope { get; set; }

		///<summary>
		/// <para><c>package.installed</c></para>
		/// <para>Time when package was installed.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("installed"), DataMember(Name = "installed")]
		public DateTimeOffset? Installed { get; set; }

		///<summary>
		/// <para><c>package.license</c></para>
		/// <para>License under which the package was released.
		/// Use a short name, e.g. the license identifier from SPDX License List where possible (https://spdx.org/licenses/).</para>
		/// <example>Apache License 2.0</example>
		///</summary>
		[JsonPropertyName("license"), DataMember(Name = "license")]
		public string? License { get; set; }

		///<summary>
		/// <para><c>package.name</c></para>
		/// <para>Package name</para>
		/// <example>go</example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }

		///<summary>
		/// <para><c>package.path</c></para>
		/// <para>Path where the package is installed.</para>
		/// <example>/usr/local/Cellar/go/1.12.9/</example>
		///</summary>
		[JsonPropertyName("path"), DataMember(Name = "path")]
		public string? Path { get; set; }

		///<summary>
		/// <para><c>package.reference</c></para>
		/// <para>Home page or reference URL of the software in this package, if available.</para>
		/// <example>https://golang.org</example>
		///</summary>
		[JsonPropertyName("reference"), DataMember(Name = "reference")]
		public string? Reference { get; set; }

		///<summary>
		/// <para><c>package.size</c></para>
		/// <para>Package size in bytes.</para>
		/// <example>62231</example>
		///</summary>
		[JsonPropertyName("size"), DataMember(Name = "size")]
		public long? Size { get; set; }

		///<summary>
		/// <para><c>package.type</c></para>
		/// <para>Type of package.
		/// This should contain the package file type, rather than the package manager name. Examples: rpm, dpkg, brew, npm, gem, nupkg, jar.</para>
		/// <example>rpm</example>
		///</summary>
		[JsonPropertyName("type"), DataMember(Name = "type")]
		public string? Type { get; set; }

		///<summary>
		/// <para><c>package.version</c></para>
		/// <para>Package version</para>
		/// <example>1.12.9</example>
		///</summary>
		[JsonPropertyName("version"), DataMember(Name = "version")]
		public string? Version { get; set; }
	}

	///<summary>
	/// These fields contain Windows Portable Executable (PE) metadata.
	///</summary>
	public abstract class PeFieldSet {

		///<summary>
		/// <para><c>pe.architecture</c></para>
		/// <para>CPU architecture target for the file.</para>
		/// <example>x64</example>
		///</summary>
		[JsonPropertyName("architecture"), DataMember(Name = "architecture")]
		public string? Architecture { get; set; }

		///<summary>
		/// <para><c>pe.company</c></para>
		/// <para>Internal company name of the file, provided at compile-time.</para>
		/// <example>Microsoft Corporation</example>
		///</summary>
		[JsonPropertyName("company"), DataMember(Name = "company")]
		public string? Company { get; set; }

		///<summary>
		/// <para><c>pe.description</c></para>
		/// <para>Internal description of the file, provided at compile-time.</para>
		/// <example>Paint</example>
		///</summary>
		[JsonPropertyName("description"), DataMember(Name = "description")]
		public string? Description { get; set; }

		///<summary>
		/// <para><c>pe.file_version</c></para>
		/// <para>Internal version of the file, provided at compile-time.</para>
		/// <example>6.3.9600.17415</example>
		///</summary>
		[JsonPropertyName("file_version"), DataMember(Name = "file_version")]
		public string? FileVersion { get; set; }

		///<summary>
		/// <para><c>pe.go_import_hash</c></para>
		/// <para>A hash of the Go language imports in a PE file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// The algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).</para>
		/// <example>10bddcb4cee42080f76c88d9ff964491</example>
		///</summary>
		[JsonPropertyName("go_import_hash"), DataMember(Name = "go_import_hash")]
		public string? GoImportHash { get; set; }

		///<summary>
		/// <para><c>pe.go_imports</c></para>
		/// <para>List of imported Go language element names and types.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("go_imports"), DataMember(Name = "go_imports")]
		public string? GoImports { get; set; }

		///<summary>
		/// <para><c>pe.go_imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("go_imports_names_entropy"), DataMember(Name = "go_imports_names_entropy")]
		public long? GoImportsNamesEntropy { get; set; }

		///<summary>
		/// <para><c>pe.go_imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of Go imports.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("go_imports_names_var_entropy"), DataMember(Name = "go_imports_names_var_entropy")]
		public long? GoImportsNamesVarEntropy { get; set; }

		///<summary>
		/// <para><c>pe.go_stripped</c></para>
		/// <para>Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("go_stripped"), DataMember(Name = "go_stripped")]
		public bool? GoStripped { get; set; }

		///<summary>
		/// <para><c>pe.imphash</c></para>
		/// <para>A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.</para>
		/// <example>0c6803c4e922103c4dca5963aad36ddf</example>
		///</summary>
		[JsonPropertyName("imphash"), DataMember(Name = "imphash")]
		public string? Imphash { get; set; }

		///<summary>
		/// <para><c>pe.import_hash</c></para>
		/// <para>A hash of the imports in a PE file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
		/// This is a synonym for imphash.</para>
		/// <example>d41d8cd98f00b204e9800998ecf8427e</example>
		///</summary>
		[JsonPropertyName("import_hash"), DataMember(Name = "import_hash")]
		public string? ImportHash { get; set; }

		///<summary>
		/// <para><c>pe.imports</c></para>
		/// <para>List of imported element names and types.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("imports"), DataMember(Name = "imports")]
		public string[]? Imports { get; set; }

		///<summary>
		/// <para><c>pe.imports_names_entropy</c></para>
		/// <para>Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("imports_names_entropy"), DataMember(Name = "imports_names_entropy")]
		public long? ImportsNamesEntropy { get; set; }

		///<summary>
		/// <para><c>pe.imports_names_var_entropy</c></para>
		/// <para>Variance for Shannon entropy calculation from the list of imported element names and types.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("imports_names_var_entropy"), DataMember(Name = "imports_names_var_entropy")]
		public long? ImportsNamesVarEntropy { get; set; }

		///<summary>
		/// <para><c>pe.original_file_name</c></para>
		/// <para>Internal name of the file, provided at compile-time.</para>
		/// <example>MSPAINT.EXE</example>
		///</summary>
		[JsonPropertyName("original_file_name"), DataMember(Name = "original_file_name")]
		public string? OriginalFileName { get; set; }

		///<summary>
		/// <para><c>pe.pehash</c></para>
		/// <para>A hash of the PE header and data from one or more PE sections. An pehash can be used to cluster files by transforming structural information about a file into a hash value.
		/// Learn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.</para>
		/// <example>73ff189b63cd6be375a7ff25179a38d347651975</example>
		///</summary>
		[JsonPropertyName("pehash"), DataMember(Name = "pehash")]
		public string? Pehash { get; set; }

		///<summary>
		/// <para><c>pe.product</c></para>
		/// <para>Internal product name of the file, provided at compile-time.</para>
		/// <example>MicrosoftÂ® WindowsÂ® Operating System</example>
		///</summary>
		[JsonPropertyName("product"), DataMember(Name = "product")]
		public string? Product { get; set; }

		///<summary>
		/// <para><c>pe.sections</c></para>
		/// <para>An array containing an object for each section of the PE file.
		/// The keys that should be present in these objects are defined by sub-fields underneath `pe.sections.*`.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("sections"), DataMember(Name = "sections")]
		public PeSections[]? Sections { get; set; }
	}

	///<summary>
	/// These fields contain information about a process.&#xA;These fields can help you correlate metrics information with a process id/name from a log message.  The `process.pid` often stays in the metric itself and is copied to the global field for correlation.
	///</summary>
	public abstract class ProcessFieldSet {

		///<summary>
		/// <para><c>process.args</c></para>
		/// <para>Array of process arguments, starting with the absolute path to the executable.
		/// May be filtered to protect sensitive information.</para>
		/// <example>["/usr/bin/ssh", "-l", "user", "10.0.0.16"]</example>
		///</summary>
		[JsonPropertyName("args"), DataMember(Name = "args")]
		public string[]? Args { get; set; }

		///<summary>
		/// <para><c>process.args_count</c></para>
		/// <para>Length of the process.args array.
		/// This field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.</para>
		/// <example>4</example>
		///</summary>
		[JsonPropertyName("args_count"), DataMember(Name = "args_count")]
		public long? ArgsCount { get; set; }

		///<summary>
		/// <para><c>process.command_line</c></para>
		/// <para>Full command line that started the process, including the absolute path to the executable, and all arguments.
		/// Some arguments may be filtered to protect sensitive information.</para>
		/// <example>/usr/bin/ssh -l user 10.0.0.16</example>
		///</summary>
		[JsonPropertyName("command_line"), DataMember(Name = "command_line")]
		public string? CommandLine { get; set; }

		///<summary>
		/// <para><c>process.end</c></para>
		/// <para>The time the process ended.</para>
		/// <example>5/23/2016 8:05:34â€¯AM</example>
		///</summary>
		[JsonPropertyName("end"), DataMember(Name = "end")]
		public DateTimeOffset? End { get; set; }

		///<summary>
		/// <para><c>process.entity_id</c></para>
		/// <para>Unique identifier for the process.
		/// The implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.
		/// Constructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.</para>
		/// <example>c2c455d9f99375d</example>
		///</summary>
		[JsonPropertyName("entity_id"), DataMember(Name = "entity_id")]
		public string? EntityId { get; set; }

		///<summary>
		/// <para><c>process.env_vars</c></para>
		/// <para>Array of environment variable bindings. Captured from a snapshot of the environment at the time of execution.
		/// May be filtered to protect sensitive information.
		/// <para><br/>This field is beta and subject to change.</para></para>
		/// <example>["PATH=/usr/local/bin:/usr/bin", "USER=ubuntu"]</example>
		///</summary>
		[JsonPropertyName("env_vars"), DataMember(Name = "env_vars")]
		public string[]? EnvVars { get; set; }

		///<summary>
		/// <para><c>process.executable</c></para>
		/// <para>Absolute path to the process executable.</para>
		/// <example>/usr/bin/ssh</example>
		///</summary>
		[JsonPropertyName("executable"), DataMember(Name = "executable")]
		public string? Executable { get; set; }

		///<summary>
		/// <para><c>process.exit_code</c></para>
		/// <para>The exit code of the process, if this is a termination event.
		/// The field should be absent if there is no exit code for the event (e.g. process start).</para>
		/// <example>137</example>
		///</summary>
		[JsonPropertyName("exit_code"), DataMember(Name = "exit_code")]
		public long? ExitCode { get; set; }

		///<summary>
		/// <para><c>process.interactive</c></para>
		/// <para>Whether the process is connected to an interactive shell.
		/// Process interactivity is inferred from the processes file descriptors. If the character device for the controlling tty is the same as stdin and stderr for the process, the process is considered interactive.
		/// Note: A non-interactive process can belong to an interactive session and is simply one that does not have open file descriptors reading the controlling TTY on FD 0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A backgrounded process is still considered interactive if stdin and stderr are connected to the controlling TTY.</para>
		/// <example>true</example>
		///</summary>
		[JsonPropertyName("interactive"), DataMember(Name = "interactive")]
		public bool? Interactive { get; set; }

		///<summary>
		/// <para><c>process.name</c></para>
		/// <para>Process name.
		/// Sometimes called program name or similar.</para>
		/// <example>ssh</example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }

		///<summary>
		/// <para><c>process.pgid</c></para>
		/// <para>Deprecated for removal in next major version release. This field is superseded by `process.group_leader.pid`.
		/// Identifier of the group of processes the process belongs to.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("pgid"), DataMember(Name = "pgid")]
		public long? Pgid { get; set; }

		///<summary>
		/// <para><c>process.pid</c></para>
		/// <para>Process id.</para>
		/// <example>4242</example>
		///</summary>
		[JsonPropertyName("pid"), DataMember(Name = "pid")]
		public long? Pid { get; set; }

		///<summary>
		/// <para><c>process.start</c></para>
		/// <para>The time the process started.</para>
		/// <example>5/23/2016 8:05:34â€¯AM</example>
		///</summary>
		[JsonPropertyName("start"), DataMember(Name = "start")]
		public DateTimeOffset? Start { get; set; }

		///<summary>
		/// <para><c>process.thread.capabilities.effective</c></para>
		/// <para>This is the set of capabilities used by the kernel to perform permission checks for the thread.
		/// <para>pattern: </para></para>
		/// <example>["CAP_BPF", "CAP_SYS_ADMIN"]</example>
		///</summary>
		[JsonPropertyName("thread.capabilities.effective"), DataMember(Name = "thread.capabilities.effective")]
		public string[]? ThreadCapabilitiesEffective { get; set; }

		///<summary>
		/// <para><c>process.thread.capabilities.permitted</c></para>
		/// <para>This is a limiting superset for the effective capabilities that the thread may assume.
		/// <para>pattern: </para></para>
		/// <example>["CAP_BPF", "CAP_SYS_ADMIN"]</example>
		///</summary>
		[JsonPropertyName("thread.capabilities.permitted"), DataMember(Name = "thread.capabilities.permitted")]
		public string[]? ThreadCapabilitiesPermitted { get; set; }

		///<summary>
		/// <para><c>process.thread.id</c></para>
		/// <para>Thread ID.</para>
		/// <example>4242</example>
		///</summary>
		[JsonPropertyName("thread.id"), DataMember(Name = "thread.id")]
		public long? ThreadId { get; set; }

		///<summary>
		/// <para><c>process.thread.name</c></para>
		/// <para>Thread name.</para>
		/// <example>thread-0</example>
		///</summary>
		[JsonPropertyName("thread.name"), DataMember(Name = "thread.name")]
		public string? ThreadName { get; set; }

		///<summary>
		/// <para><c>process.title</c></para>
		/// <para>Process title.
		/// The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("title"), DataMember(Name = "title")]
		public string? Title { get; set; }

		///<summary>
		/// <para><c>process.uptime</c></para>
		/// <para>Seconds the process has been up.</para>
		/// <example>1325</example>
		///</summary>
		[JsonPropertyName("uptime"), DataMember(Name = "uptime")]
		public long? Uptime { get; set; }

		///<summary>
		/// <para><c>process.vpid</c></para>
		/// <para>Virtual process id.
		/// The process id within a pid namespace. This is not necessarily unique across all processes on the host but it is unique within the process namespace that the process exists within.</para>
		/// <example>4242</example>
		///</summary>
		[JsonPropertyName("vpid"), DataMember(Name = "vpid")]
		public long? Vpid { get; set; }

		///<summary>
		/// <para><c>process.working_directory</c></para>
		/// <para>The working directory of the process.</para>
		/// <example>/home/alice</example>
		///</summary>
		[JsonPropertyName("working_directory"), DataMember(Name = "working_directory")]
		public string? WorkingDirectory { get; set; }

		///<summary>
		/// <para><c>process.io</c></para>
		/// <para>A chunk of input or output (IO) from a single process.
		/// This field only appears on the top level process object, which is the process that wrote the output or read the input.
		/// <para><br/>This field is beta and subject to change.</para></para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("io"), DataMember(Name = "io")]
		public ProcessIo? Io { get; set; }

		///<summary>
		/// <para><c>process.tty</c></para>
		/// <para>Information about the controlling TTY device. If set, the process belongs to an interactive session.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("tty"), DataMember(Name = "tty")]
		public ProcessTty? Tty { get; set; }
	}

	///<summary>
	/// Fields related to Windows Registry operations.
	///</summary>
	public abstract class RegistryFieldSet {

		///<summary>
		/// <para><c>registry.data.bytes</c></para>
		/// <para>Original bytes written with base64 encoding.
		/// For Windows registry operations, such as SetValueEx and RegQueryValueEx, this corresponds to the data pointed by `lp_data`. This is optional but provides better recoverability and should be populated for REG_BINARY encoded values.</para>
		/// <example>ZQBuAC0AVQBTAAAAZQBuAAAAAAA=</example>
		///</summary>
		[JsonPropertyName("data.bytes"), DataMember(Name = "data.bytes")]
		public string? DataBytes { get; set; }

		///<summary>
		/// <para><c>registry.data.strings</c></para>
		/// <para>Content when writing string types.
		/// Populated as an array when writing string data to the registry. For single string registry types (REG_SZ, REG_EXPAND_SZ), this should be an array with one string. For sequences of string with REG_MULTI_SZ, this array will be variable length. For numeric data, such as REG_DWORD and REG_QWORD, this should be populated with the decimal representation (e.g `"1"`).</para>
		/// <example>["C:\rta\red_ttp\bin\myapp.exe"]</example>
		///</summary>
		[JsonPropertyName("data.strings"), DataMember(Name = "data.strings")]
		public string[]? DataStrings { get; set; }

		///<summary>
		/// <para><c>registry.data.type</c></para>
		/// <para>Standard registry type for encoding contents</para>
		/// <example>REG_SZ</example>
		///</summary>
		[JsonPropertyName("data.type"), DataMember(Name = "data.type")]
		public string? DataType { get; set; }

		///<summary>
		/// <para><c>registry.hive</c></para>
		/// <para>Abbreviated name for the hive.</para>
		/// <example>HKLM</example>
		///</summary>
		[JsonPropertyName("hive"), DataMember(Name = "hive")]
		public string? Hive { get; set; }

		///<summary>
		/// <para><c>registry.key</c></para>
		/// <para>Hive-relative path of keys.</para>
		/// <example>SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe</example>
		///</summary>
		[JsonPropertyName("key"), DataMember(Name = "key")]
		public string? Key { get; set; }

		///<summary>
		/// <para><c>registry.path</c></para>
		/// <para>Full path, including hive, key and value</para>
		/// <example>HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe\Debugger</example>
		///</summary>
		[JsonPropertyName("path"), DataMember(Name = "path")]
		public string? Path { get; set; }

		///<summary>
		/// <para><c>registry.value</c></para>
		/// <para>Name of the value written.</para>
		/// <example>Debugger</example>
		///</summary>
		[JsonPropertyName("value"), DataMember(Name = "value")]
		public string? Value { get; set; }
	}

	///<summary>
	/// This field set is meant to facilitate pivoting around a piece of data.&#xA;Some pieces of information can be seen in many places in an ECS event. To facilitate searching for them, store an array of all seen values to their corresponding field in `related.`.&#xA;A concrete example is IP addresses, which can be under host, observer, source, destination, client, server, and network.forwarded_ip. If you append all IPs to `related.ip`, you can then search for a given IP trivially, no matter where it appeared, by querying `related.ip:192.0.2.15`.
	///</summary>
	public abstract class RelatedFieldSet {

		///<summary>
		/// <para><c>related.hash</c></para>
		/// <para>All the hashes seen on your event. Populating this field, then using it to search for hashes can help in situations where you're unsure what the hash algorithm is (and therefore which key name to search).</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("hash"), DataMember(Name = "hash")]
		public string[]? Hash { get; set; }

		///<summary>
		/// <para><c>related.hosts</c></para>
		/// <para>All hostnames or other host identifiers seen on your event. Example identifiers include FQDNs, domain names, workstation names, or aliases.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("hosts"), DataMember(Name = "hosts")]
		public string[]? Hosts { get; set; }

		///<summary>
		/// <para><c>related.ip</c></para>
		/// <para>All of the IPs seen on your event.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("ip"), DataMember(Name = "ip")]
		public string[]? Ip { get; set; }

		///<summary>
		/// <para><c>related.user</c></para>
		/// <para>All the user names or other user identifiers seen on the event.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("user"), DataMember(Name = "user")]
		public string[]? User { get; set; }
	}

	///<summary>
	/// Fields for describing risk score and risk level of entities such as hosts and users.  These fields are not allowed to be nested under `event.*`. Please continue to use  `event.risk_score` and `event.risk_score_norm` for event risk.
	///</summary>
	public abstract class RiskFieldSet {

		///<summary>
		/// <para><c>risk.calculated_level</c></para>
		/// <para>A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>High</example>
		///</summary>
		[JsonPropertyName("calculated_level"), DataMember(Name = "calculated_level")]
		public string? CalculatedLevel { get; set; }

		///<summary>
		/// <para><c>risk.calculated_score</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.</para>
		/// <example>880.73</example>
		///</summary>
		[JsonPropertyName("calculated_score"), DataMember(Name = "calculated_score")]
		public float? CalculatedScore { get; set; }

		///<summary>
		/// <para><c>risk.calculated_score_norm</c></para>
		/// <para>A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.</para>
		/// <example>88.73</example>
		///</summary>
		[JsonPropertyName("calculated_score_norm"), DataMember(Name = "calculated_score_norm")]
		public float? CalculatedScoreNorm { get; set; }

		///<summary>
		/// <para><c>risk.static_level</c></para>
		/// <para>A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>High</example>
		///</summary>
		[JsonPropertyName("static_level"), DataMember(Name = "static_level")]
		public string? StaticLevel { get; set; }

		///<summary>
		/// <para><c>risk.static_score</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.</para>
		/// <example>830.0</example>
		///</summary>
		[JsonPropertyName("static_score"), DataMember(Name = "static_score")]
		public float? StaticScore { get; set; }

		///<summary>
		/// <para><c>risk.static_score_norm</c></para>
		/// <para>A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.</para>
		/// <example>83.0</example>
		///</summary>
		[JsonPropertyName("static_score_norm"), DataMember(Name = "static_score_norm")]
		public float? StaticScoreNorm { get; set; }
	}

	///<summary>
	/// Rule fields are used to capture the specifics of any observer or agent rules that generate alerts or other notable events.&#xA;Examples of data sources that would populate the rule fields include: network admission control platforms, network or host IDS/IPS, network firewalls, web application firewalls, url filters, endpoint detection and response (EDR) systems, etc.
	///</summary>
	public abstract class RuleFieldSet {

		///<summary>
		/// <para><c>rule.author</c></para>
		/// <para>Name, organization, or pseudonym of the author or authors who created the rule used to generate this event.</para>
		/// <example>["Star-Lord"]</example>
		///</summary>
		[JsonPropertyName("author"), DataMember(Name = "author")]
		public string[]? Author { get; set; }

		///<summary>
		/// <para><c>rule.category</c></para>
		/// <para>A categorization value keyword used by the entity using the rule for detection of this event.</para>
		/// <example>Attempted Information Leak</example>
		///</summary>
		[JsonPropertyName("category"), DataMember(Name = "category")]
		public string? Category { get; set; }

		///<summary>
		/// <para><c>rule.description</c></para>
		/// <para>The description of the rule generating the event.</para>
		/// <example>Block requests to public DNS over HTTPS / TLS protocols</example>
		///</summary>
		[JsonPropertyName("description"), DataMember(Name = "description")]
		public string? Description { get; set; }

		///<summary>
		/// <para><c>rule.id</c></para>
		/// <para>A rule ID that is unique within the scope of an agent, observer, or other entity using the rule for detection of this event.</para>
		/// <example>101</example>
		///</summary>
		[JsonPropertyName("id"), DataMember(Name = "id")]
		public string? Id { get; set; }

		///<summary>
		/// <para><c>rule.license</c></para>
		/// <para>Name of the license under which the rule used to generate this event is made available.</para>
		/// <example>Apache 2.0</example>
		///</summary>
		[JsonPropertyName("license"), DataMember(Name = "license")]
		public string? License { get; set; }

		///<summary>
		/// <para><c>rule.name</c></para>
		/// <para>The name of the rule or signature generating the event.</para>
		/// <example>BLOCK_DNS_over_TLS</example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }

		///<summary>
		/// <para><c>rule.reference</c></para>
		/// <para>Reference URL to additional information about the rule used to generate this event.
		/// The URL can point to the vendor's documentation about the rule. If that's not available, it can also be a link to a more general page describing this type of alert.</para>
		/// <example>https://en.wikipedia.org/wiki/DNS_over_TLS</example>
		///</summary>
		[JsonPropertyName("reference"), DataMember(Name = "reference")]
		public string? Reference { get; set; }

		///<summary>
		/// <para><c>rule.ruleset</c></para>
		/// <para>Name of the ruleset, policy, group, or parent category in which the rule used to generate this event is a member.</para>
		/// <example>Standard_Protocol_Filters</example>
		///</summary>
		[JsonPropertyName("ruleset"), DataMember(Name = "ruleset")]
		public string? Ruleset { get; set; }

		///<summary>
		/// <para><c>rule.uuid</c></para>
		/// <para>A rule ID that is unique within the scope of a set or group of agents, observers, or other entities using the rule for detection of this event.</para>
		/// <example>1100110011</example>
		///</summary>
		[JsonPropertyName("uuid"), DataMember(Name = "uuid")]
		public string? Uuid { get; set; }

		///<summary>
		/// <para><c>rule.version</c></para>
		/// <para>The version / revision of the rule being used for analysis.</para>
		/// <example>1.1</example>
		///</summary>
		[JsonPropertyName("version"), DataMember(Name = "version")]
		public string? Version { get; set; }
	}

	///<summary>
	/// A Server is defined as the responder in a network connection for events regarding sessions, connections, or bidirectional flow records.&#xA;For TCP events, the server is the receiver of the initial SYN packet(s) of the TCP connection. For other protocols, the server is generally the responder in the network transaction. Some systems actually use the term &quot;responder&quot; to refer the server in TCP connections. The server fields describe details about the system acting as the server in the network event. Server fields are usually populated in conjunction with client fields. Server fields are generally not populated for packet-level events.&#xA;Client / server representations can add semantic context to an exchange, which is helpful to visualize the data in certain situations. If your context falls in that category, you should still ensure that source and destination are filled appropriately.
	///</summary>
	public abstract class ServerFieldSet {

		///<summary>
		/// <para><c>server.address</c></para>
		/// <para>Some event server addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
		/// Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("address"), DataMember(Name = "address")]
		public string? Address { get; set; }

		///<summary>
		/// <para><c>server.bytes</c></para>
		/// <para>Bytes sent from the server to the client.</para>
		/// <example>184</example>
		///</summary>
		[JsonPropertyName("bytes"), DataMember(Name = "bytes")]
		public long? Bytes { get; set; }

		///<summary>
		/// <para><c>server.domain</c></para>
		/// <para>The domain name of the server system.
		/// This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.</para>
		/// <example>foo.example.com</example>
		///</summary>
		[JsonPropertyName("domain"), DataMember(Name = "domain")]
		public string? Domain { get; set; }

		///<summary>
		/// <para><c>server.ip</c></para>
		/// <para>IP address of the server (IPv4 or IPv6).</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("ip"), DataMember(Name = "ip")]
		public string? Ip { get; set; }

		///<summary>
		/// <para><c>server.mac</c></para>
		/// <para>MAC address of the server.
		/// The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
		/// <para>pattern: </para></para>
		/// <example>00-00-5E-00-53-23</example>
		///</summary>
		[JsonPropertyName("mac"), DataMember(Name = "mac")]
		public string? Mac { get; set; }

		///<summary>
		/// <para><c>server.nat.ip</c></para>
		/// <para>Translated ip of destination based NAT sessions (e.g. internet to private DMZ)
		/// Typically used with load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("nat.ip"), DataMember(Name = "nat.ip")]
		public string? NatIp { get; set; }

		///<summary>
		/// <para><c>server.nat.port</c></para>
		/// <para>Translated port of destination based NAT sessions (e.g. internet to private DMZ)
		/// Typically used with load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("nat.port"), DataMember(Name = "nat.port")]
		public long? NatPort { get; set; }

		///<summary>
		/// <para><c>server.packets</c></para>
		/// <para>Packets sent from the server to the client.</para>
		/// <example>12</example>
		///</summary>
		[JsonPropertyName("packets"), DataMember(Name = "packets")]
		public long? Packets { get; set; }

		///<summary>
		/// <para><c>server.port</c></para>
		/// <para>Port of the server.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("port"), DataMember(Name = "port")]
		public long? Port { get; set; }

		///<summary>
		/// <para><c>server.registered_domain</c></para>
		/// <para>The highest registered server domain, stripped of the subdomain.
		/// For example, the registered domain for "foo.example.com" is "example.com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".</para>
		/// <example>example.com</example>
		///</summary>
		[JsonPropertyName("registered_domain"), DataMember(Name = "registered_domain")]
		public string? RegisteredDomain { get; set; }

		///<summary>
		/// <para><c>server.subdomain</c></para>
		/// <para>The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
		/// For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.</para>
		/// <example>east</example>
		///</summary>
		[JsonPropertyName("subdomain"), DataMember(Name = "subdomain")]
		public string? Subdomain { get; set; }

		///<summary>
		/// <para><c>server.top_level_domain</c></para>
		/// <para>The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".</para>
		/// <example>co.uk</example>
		///</summary>
		[JsonPropertyName("top_level_domain"), DataMember(Name = "top_level_domain")]
		public string? TopLevelDomain { get; set; }
	}

	///<summary>
	/// The service fields describe the service for or from which the data was collected.&#xA;These fields help you find and correlate logs for a specific service and version.
	///</summary>
	public abstract class ServiceFieldSet {

		///<summary>
		/// <para><c>service.address</c></para>
		/// <para>Address where data about this service was collected from.
		/// This should be a URI, network address (ipv4:port or [ipv6]:port) or a resource path (sockets).</para>
		/// <example>172.26.0.2:5432</example>
		///</summary>
		[JsonPropertyName("address"), DataMember(Name = "address")]
		public string? Address { get; set; }

		///<summary>
		/// <para><c>service.environment</c></para>
		/// <para>Identifies the environment where the service is running.
		/// If the same service runs in different environments (production, staging, QA, development, etc.), the environment can identify other instances of the same service. Can also group services and applications from the same environment.
		/// <para><br/>This field is beta and subject to change.</para></para>
		/// <example>production</example>
		///</summary>
		[JsonPropertyName("environment"), DataMember(Name = "environment")]
		public string? Environment { get; set; }

		///<summary>
		/// <para><c>service.ephemeral_id</c></para>
		/// <para>Ephemeral identifier of this service (if one exists).
		/// This id normally changes across restarts, but `service.id` does not.</para>
		/// <example>8a4f500f</example>
		///</summary>
		[JsonPropertyName("ephemeral_id"), DataMember(Name = "ephemeral_id")]
		public string? EphemeralId { get; set; }

		///<summary>
		/// <para><c>service.id</c></para>
		/// <para>Unique identifier of the running service. If the service is comprised of many nodes, the `service.id` should be the same for all nodes.
		/// This id should uniquely identify the service. This makes it possible to correlate logs and metrics for one specific service, no matter which particular node emitted the event.
		/// Note that if you need to see the events from one specific host of the service, you should filter on that `host.name` or `host.id` instead.</para>
		/// <example>d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6</example>
		///</summary>
		[JsonPropertyName("id"), DataMember(Name = "id")]
		public string? Id { get; set; }

		///<summary>
		/// <para><c>service.name</c></para>
		/// <para>Name of the service data is collected from.
		/// The name of the service is normally user given. This allows for distributed services that run on multiple hosts to correlate the related instances based on the name.
		/// In the case of Elasticsearch the `service.name` could contain the cluster name. For Beats the `service.name` is by default a copy of the `service.type` field if no name is specified.</para>
		/// <example>elasticsearch-metrics</example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }

		///<summary>
		/// <para><c>service.node.name</c></para>
		/// <para>Name of a service node.
		/// This allows for two nodes of the same service running on the same host to be differentiated. Therefore, `service.node.name` should typically be unique across nodes of a given service.
		/// In the case of Elasticsearch, the `service.node.name` could contain the unique node name within the Elasticsearch cluster. In cases where the service doesn't have the concept of a node name, the host name or container name can be used to distinguish running instances that make up this service. If those do not provide uniqueness (e.g. multiple instances of the service running on the same host) - the node name can be manually set.</para>
		/// <example>instance-0000000016</example>
		///</summary>
		[JsonPropertyName("node.name"), DataMember(Name = "node.name")]
		public string? NodeName { get; set; }

		///<summary>
		/// <para><c>service.node.role</c></para>
		/// <para>Deprecated for removal in next major version release. This field will be superseded by `node.roles`.
		/// Role of a service node.
		/// This allows for distinction between different running roles of the same service.
		/// In the case of Kibana, the `service.node.role` could be `ui` or `background_tasks`.
		/// In the case of Elasticsearch, the `service.node.role` could be `master` or `data`.
		/// Other services could use this to distinguish between a `web` and `worker` role running as part of the service.</para>
		/// <example>background_tasks</example>
		///</summary>
		[JsonPropertyName("node.role"), DataMember(Name = "node.role")]
		public string? NodeRole { get; set; }

		///<summary>
		/// <para><c>service.node.roles</c></para>
		/// <para>Roles of a service node.
		/// This allows for distinction between different running roles of the same service.
		/// In the case of Kibana, the `service.node.role` could be `ui` or `background_tasks` or both.
		/// In the case of Elasticsearch, the `service.node.role` could be `master` or `data` or both.
		/// Other services could use this to distinguish between a `web` and `worker` role running as part of the service.</para>
		/// <example>["ui", "background_tasks"]</example>
		///</summary>
		[JsonPropertyName("node.roles"), DataMember(Name = "node.roles")]
		public string[]? NodeRoles { get; set; }

		///<summary>
		/// <para><c>service.state</c></para>
		/// <para>Current state of the service.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("state"), DataMember(Name = "state")]
		public string? State { get; set; }

		///<summary>
		/// <para><c>service.type</c></para>
		/// <para>The type of the service data is collected from.
		/// The type can be used to group and correlate logs and metrics from one service type.
		/// Example: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`.</para>
		/// <example>elasticsearch</example>
		///</summary>
		[JsonPropertyName("type"), DataMember(Name = "type")]
		public string? Type { get; set; }

		///<summary>
		/// <para><c>service.version</c></para>
		/// <para>Version of the service the data was collected from.
		/// This allows to look at a data set only for a specific version of a service.</para>
		/// <example>3.2.4</example>
		///</summary>
		[JsonPropertyName("version"), DataMember(Name = "version")]
		public string? Version { get; set; }
	}

	///<summary>
	/// Source fields capture details about the sender of a network exchange/packet. These fields are populated from a network event, packet, or other event containing details of a network transaction.&#xA;Source fields are usually populated in conjunction with destination fields. The source and destination fields are considered the baseline and should always be filled if an event contains source and destination details from a network transaction. If the event also contains identification of the client and server roles, then the client and server fields should also be populated.
	///</summary>
	public abstract class SourceFieldSet {

		///<summary>
		/// <para><c>source.address</c></para>
		/// <para>Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
		/// Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("address"), DataMember(Name = "address")]
		public string? Address { get; set; }

		///<summary>
		/// <para><c>source.bytes</c></para>
		/// <para>Bytes sent from the source to the destination.</para>
		/// <example>184</example>
		///</summary>
		[JsonPropertyName("bytes"), DataMember(Name = "bytes")]
		public long? Bytes { get; set; }

		///<summary>
		/// <para><c>source.domain</c></para>
		/// <para>The domain name of the source system.
		/// This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.</para>
		/// <example>foo.example.com</example>
		///</summary>
		[JsonPropertyName("domain"), DataMember(Name = "domain")]
		public string? Domain { get; set; }

		///<summary>
		/// <para><c>source.ip</c></para>
		/// <para>IP address of the source (IPv4 or IPv6).</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("ip"), DataMember(Name = "ip")]
		public string? Ip { get; set; }

		///<summary>
		/// <para><c>source.mac</c></para>
		/// <para>MAC address of the source.
		/// The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
		/// <para>pattern: </para></para>
		/// <example>00-00-5E-00-53-23</example>
		///</summary>
		[JsonPropertyName("mac"), DataMember(Name = "mac")]
		public string? Mac { get; set; }

		///<summary>
		/// <para><c>source.nat.ip</c></para>
		/// <para>Translated ip of source based NAT sessions (e.g. internal client to internet)
		/// Typically connections traversing load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("nat.ip"), DataMember(Name = "nat.ip")]
		public string? NatIp { get; set; }

		///<summary>
		/// <para><c>source.nat.port</c></para>
		/// <para>Translated port of source based NAT sessions. (e.g. internal client to internet)
		/// Typically used with load balancers, firewalls, or routers.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("nat.port"), DataMember(Name = "nat.port")]
		public long? NatPort { get; set; }

		///<summary>
		/// <para><c>source.packets</c></para>
		/// <para>Packets sent from the source to the destination.</para>
		/// <example>12</example>
		///</summary>
		[JsonPropertyName("packets"), DataMember(Name = "packets")]
		public long? Packets { get; set; }

		///<summary>
		/// <para><c>source.port</c></para>
		/// <para>Port of the source.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("port"), DataMember(Name = "port")]
		public long? Port { get; set; }

		///<summary>
		/// <para><c>source.registered_domain</c></para>
		/// <para>The highest registered source domain, stripped of the subdomain.
		/// For example, the registered domain for "foo.example.com" is "example.com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".</para>
		/// <example>example.com</example>
		///</summary>
		[JsonPropertyName("registered_domain"), DataMember(Name = "registered_domain")]
		public string? RegisteredDomain { get; set; }

		///<summary>
		/// <para><c>source.subdomain</c></para>
		/// <para>The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
		/// For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.</para>
		/// <example>east</example>
		///</summary>
		[JsonPropertyName("subdomain"), DataMember(Name = "subdomain")]
		public string? Subdomain { get; set; }

		///<summary>
		/// <para><c>source.top_level_domain</c></para>
		/// <para>The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".</para>
		/// <example>co.uk</example>
		///</summary>
		[JsonPropertyName("top_level_domain"), DataMember(Name = "top_level_domain")]
		public string? TopLevelDomain { get; set; }
	}

	///<summary>
	/// Fields to classify events and alerts according to a threat taxonomy such as the MITRE ATT&amp;CK&#xAE; framework.&#xA;These fields are for users to classify alerts from all of their sources (e.g. IDS, NGFW, etc.) within a common taxonomy. The threat.tactic.* fields are meant to capture the high level category of the threat (e.g. &quot;impact&quot;). The threat.technique.* fields are meant to capture which kind of approach is used by this detected threat, to accomplish the goal (e.g. &quot;endpoint denial of service&quot;).
	///</summary>
	public abstract class ThreatFieldSet {

		///<summary>
		/// <para><c>threat.feed.dashboard_id</c></para>
		/// <para>The saved object ID of the dashboard belonging to the threat feed for displaying dashboard links to threat feeds in Kibana.</para>
		/// <example>5ba16340-72e6-11eb-a3e3-b3cc7c78a70f</example>
		///</summary>
		[JsonPropertyName("feed.dashboard_id"), DataMember(Name = "feed.dashboard_id")]
		public string? FeedDashboardId { get; set; }

		///<summary>
		/// <para><c>threat.feed.description</c></para>
		/// <para>Description of the threat feed in a UI friendly format.</para>
		/// <example>Threat feed from the AlienVault Open Threat eXchange network.</example>
		///</summary>
		[JsonPropertyName("feed.description"), DataMember(Name = "feed.description")]
		public string? FeedDescription { get; set; }

		///<summary>
		/// <para><c>threat.feed.name</c></para>
		/// <para>The name of the threat feed in UI friendly format.</para>
		/// <example>AlienVault OTX</example>
		///</summary>
		[JsonPropertyName("feed.name"), DataMember(Name = "feed.name")]
		public string? FeedName { get; set; }

		///<summary>
		/// <para><c>threat.feed.reference</c></para>
		/// <para>Reference information for the threat feed in a UI friendly format.</para>
		/// <example>https://otx.alienvault.com</example>
		///</summary>
		[JsonPropertyName("feed.reference"), DataMember(Name = "feed.reference")]
		public string? FeedReference { get; set; }

		///<summary>
		/// <para><c>threat.framework</c></para>
		/// <para>Name of the threat framework used to further categorize and classify the tactic and technique of the reported threat. Framework classification can be provided by detecting systems, evaluated at ingest time, or retrospectively tagged to events.</para>
		/// <example>MITRE ATT&amp;CK</example>
		///</summary>
		[JsonPropertyName("framework"), DataMember(Name = "framework")]
		public string? Framework { get; set; }

		///<summary>
		/// <para><c>threat.group.alias</c></para>
		/// <para>The alias(es) of the group for a set of related intrusion activity that are tracked by a common name in the security community.
		/// While not required, you can use a MITRE ATT&amp;CKÂ® group alias(es).</para>
		/// <example>[ "Magecart Group 6" ]</example>
		///</summary>
		[JsonPropertyName("group.alias"), DataMember(Name = "group.alias")]
		public string[]? GroupAlias { get; set; }

		///<summary>
		/// <para><c>threat.group.id</c></para>
		/// <para>The id of the group for a set of related intrusion activity that are tracked by a common name in the security community.
		/// While not required, you can use a MITRE ATT&amp;CKÂ® group id.</para>
		/// <example>G0037</example>
		///</summary>
		[JsonPropertyName("group.id"), DataMember(Name = "group.id")]
		public string? GroupId { get; set; }

		///<summary>
		/// <para><c>threat.group.name</c></para>
		/// <para>The name of the group for a set of related intrusion activity that are tracked by a common name in the security community.
		/// While not required, you can use a MITRE ATT&amp;CKÂ® group name.</para>
		/// <example>FIN6</example>
		///</summary>
		[JsonPropertyName("group.name"), DataMember(Name = "group.name")]
		public string? GroupName { get; set; }

		///<summary>
		/// <para><c>threat.group.reference</c></para>
		/// <para>The reference URL of the group for a set of related intrusion activity that are tracked by a common name in the security community.
		/// While not required, you can use a MITRE ATT&amp;CKÂ® group reference URL.</para>
		/// <example>https://attack.mitre.org/groups/G0037/</example>
		///</summary>
		[JsonPropertyName("group.reference"), DataMember(Name = "group.reference")]
		public string? GroupReference { get; set; }

		///<summary>
		/// <para><c>threat.indicator.confidence</c></para>
		/// <para>Identifies the vendor-neutral confidence rating using the None/Low/Medium/High scale defined in Appendix A of the STIX 2.1 framework. Vendor-specific confidence scales may be added as custom fields.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>Not Specified</item>
		/// <item>None</item>
		/// <item>Low</item>
		/// <item>Medium</item>
		/// <item>High</item>
		/// </list></para>
		/// <example>Medium</example>
		///</summary>
		[JsonPropertyName("indicator.confidence"), DataMember(Name = "indicator.confidence")]
		public string? IndicatorConfidence { get; set; }

		///<summary>
		/// <para><c>threat.indicator.description</c></para>
		/// <para>Describes the type of action conducted by the threat.</para>
		/// <example>IP x.x.x.x was observed delivering the Angler EK.</example>
		///</summary>
		[JsonPropertyName("indicator.description"), DataMember(Name = "indicator.description")]
		public string? IndicatorDescription { get; set; }

		///<summary>
		/// <para><c>threat.indicator.email.address</c></para>
		/// <para>Identifies a threat indicator as an email address (irrespective of direction).</para>
		/// <example>phish@example.com</example>
		///</summary>
		[JsonPropertyName("indicator.email.address"), DataMember(Name = "indicator.email.address")]
		public string? IndicatorEmailAddress { get; set; }

		///<summary>
		/// <para><c>threat.indicator.first_seen</c></para>
		/// <para>The date and time when intelligence source first reported sighting this indicator.</para>
		/// <example>11/5/2020 5:25:47â€¯PM</example>
		///</summary>
		[JsonPropertyName("indicator.first_seen"), DataMember(Name = "indicator.first_seen")]
		public DateTimeOffset? IndicatorFirstSeen { get; set; }

		///<summary>
		/// <para><c>threat.indicator.ip</c></para>
		/// <para>Identifies a threat indicator as an IP address (irrespective of direction).</para>
		/// <example>1.2.3.4</example>
		///</summary>
		[JsonPropertyName("indicator.ip"), DataMember(Name = "indicator.ip")]
		public string? IndicatorIp { get; set; }

		///<summary>
		/// <para><c>threat.indicator.last_seen</c></para>
		/// <para>The date and time when intelligence source last reported sighting this indicator.</para>
		/// <example>11/5/2020 5:25:47â€¯PM</example>
		///</summary>
		[JsonPropertyName("indicator.last_seen"), DataMember(Name = "indicator.last_seen")]
		public DateTimeOffset? IndicatorLastSeen { get; set; }

		///<summary>
		/// <para><c>threat.indicator.marking.tlp</c></para>
		/// <para>Traffic Light Protocol sharing markings.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>WHITE</item>
		/// <item>CLEAR</item>
		/// <item>GREEN</item>
		/// <item>AMBER</item>
		/// <item>AMBER+STRICT</item>
		/// <item>RED</item>
		/// </list></para>
		/// <example>CLEAR</example>
		///</summary>
		[JsonPropertyName("indicator.marking.tlp"), DataMember(Name = "indicator.marking.tlp")]
		public string? IndicatorMarkingTlp { get; set; }

		///<summary>
		/// <para><c>threat.indicator.marking.tlp_version</c></para>
		/// <para>Traffic Light Protocol version.</para>
		/// <example>2.0</example>
		///</summary>
		[JsonPropertyName("indicator.marking.tlp_version"), DataMember(Name = "indicator.marking.tlp_version")]
		public string? IndicatorMarkingTlpVersion { get; set; }

		///<summary>
		/// <para><c>threat.indicator.modified_at</c></para>
		/// <para>The date and time when intelligence source last modified information for this indicator.</para>
		/// <example>11/5/2020 5:25:47â€¯PM</example>
		///</summary>
		[JsonPropertyName("indicator.modified_at"), DataMember(Name = "indicator.modified_at")]
		public DateTimeOffset? IndicatorModifiedAt { get; set; }

		///<summary>
		/// <para><c>threat.indicator.name</c></para>
		/// <para>The display name indicator in an UI friendly format
		/// URL, IP address, email address, registry key, port number, hash value, or other relevant name can serve as the display name.</para>
		/// <example>5.2.75.227</example>
		///</summary>
		[JsonPropertyName("indicator.name"), DataMember(Name = "indicator.name")]
		public string? IndicatorName { get; set; }

		///<summary>
		/// <para><c>threat.indicator.port</c></para>
		/// <para>Identifies a threat indicator as a port number (irrespective of direction).</para>
		/// <example>443</example>
		///</summary>
		[JsonPropertyName("indicator.port"), DataMember(Name = "indicator.port")]
		public long? IndicatorPort { get; set; }

		///<summary>
		/// <para><c>threat.indicator.provider</c></para>
		/// <para>The name of the indicator's provider.</para>
		/// <example>lrz_urlhaus</example>
		///</summary>
		[JsonPropertyName("indicator.provider"), DataMember(Name = "indicator.provider")]
		public string? IndicatorProvider { get; set; }

		///<summary>
		/// <para><c>threat.indicator.reference</c></para>
		/// <para>Reference URL linking to additional information about this indicator.</para>
		/// <example>https://system.example.com/indicator/0001234</example>
		///</summary>
		[JsonPropertyName("indicator.reference"), DataMember(Name = "indicator.reference")]
		public string? IndicatorReference { get; set; }

		///<summary>
		/// <para><c>threat.indicator.scanner_stats</c></para>
		/// <para>Count of AV/EDR vendors that successfully detected malicious file or URL.</para>
		/// <example>4</example>
		///</summary>
		[JsonPropertyName("indicator.scanner_stats"), DataMember(Name = "indicator.scanner_stats")]
		public long? IndicatorScannerStats { get; set; }

		///<summary>
		/// <para><c>threat.indicator.sightings</c></para>
		/// <para>Number of times this indicator was observed conducting threat activity.</para>
		/// <example>20</example>
		///</summary>
		[JsonPropertyName("indicator.sightings"), DataMember(Name = "indicator.sightings")]
		public long? IndicatorSightings { get; set; }

		///<summary>
		/// <para><c>threat.indicator.type</c></para>
		/// <para>Type of indicator as represented by Cyber Observable in STIX 2.0.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>autonomous-system</item>
		/// <item>artifact</item>
		/// <item>directory</item>
		/// <item>domain-name</item>
		/// <item>email-addr</item>
		/// <item>file</item>
		/// <item>ipv4-addr</item>
		/// <item>ipv6-addr</item>
		/// <item>mac-addr</item>
		/// <item>mutex</item>
		/// <item>port</item>
		/// <item>process</item>
		/// <item>software</item>
		/// <item>url</item>
		/// <item>user-account</item>
		/// <item>windows-registry-key</item>
		/// <item>x509-certificate</item>
		/// </list></para>
		/// <example>ipv4-addr</example>
		///</summary>
		[JsonPropertyName("indicator.type"), DataMember(Name = "indicator.type")]
		public string? IndicatorType { get; set; }

		///<summary>
		/// <para><c>threat.software.alias</c></para>
		/// <para>The alias(es) of the software for a set of related intrusion activity that are tracked by a common name in the security community.
		/// While not required, you can use a MITRE ATT&amp;CKÂ® associated software description.</para>
		/// <example>[ "X-Agent" ]</example>
		///</summary>
		[JsonPropertyName("software.alias"), DataMember(Name = "software.alias")]
		public string[]? SoftwareAlias { get; set; }

		///<summary>
		/// <para><c>threat.software.id</c></para>
		/// <para>The id of the software used by this threat to conduct behavior commonly modeled using MITRE ATT&amp;CKÂ®.
		/// While not required, you can use a MITRE ATT&amp;CKÂ® software id.</para>
		/// <example>S0552</example>
		///</summary>
		[JsonPropertyName("software.id"), DataMember(Name = "software.id")]
		public string? SoftwareId { get; set; }

		///<summary>
		/// <para><c>threat.software.name</c></para>
		/// <para>The name of the software used by this threat to conduct behavior commonly modeled using MITRE ATT&amp;CKÂ®.
		/// While not required, you can use a MITRE ATT&amp;CKÂ® software name.</para>
		/// <example>AdFind</example>
		///</summary>
		[JsonPropertyName("software.name"), DataMember(Name = "software.name")]
		public string? SoftwareName { get; set; }

		///<summary>
		/// <para><c>threat.software.platforms</c></para>
		/// <para>The platforms of the software used by this threat to conduct behavior commonly modeled using MITRE ATT&amp;CKÂ®.
		/// While not required, you can use MITRE ATT&amp;CKÂ® software platform values.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>AWS</item>
		/// <item>Azure</item>
		/// <item>Azure AD</item>
		/// <item>GCP</item>
		/// <item>Linux</item>
		/// <item>macOS</item>
		/// <item>Network</item>
		/// <item>Office 365</item>
		/// <item>SaaS</item>
		/// <item>Windows</item>
		/// </list></para>
		/// <example>[ "Windows" ]</example>
		///</summary>
		[JsonPropertyName("software.platforms"), DataMember(Name = "software.platforms")]
		public string[]? SoftwarePlatforms { get; set; }

		///<summary>
		/// <para><c>threat.software.reference</c></para>
		/// <para>The reference URL of the software used by this threat to conduct behavior commonly modeled using MITRE ATT&amp;CKÂ®.
		/// While not required, you can use a MITRE ATT&amp;CKÂ® software reference URL.</para>
		/// <example>https://attack.mitre.org/software/S0552/</example>
		///</summary>
		[JsonPropertyName("software.reference"), DataMember(Name = "software.reference")]
		public string? SoftwareReference { get; set; }

		///<summary>
		/// <para><c>threat.software.type</c></para>
		/// <para>The type of software used by this threat to conduct behavior commonly modeled using MITRE ATT&amp;CKÂ®.
		/// While not required, you can use a MITRE ATT&amp;CKÂ® software type.
		/// <para><br/>Expected Values:</para>
		/// <list type="bullet">
		/// <item>Malware</item>
		/// <item>Tool</item>
		/// </list></para>
		/// <example>Tool</example>
		///</summary>
		[JsonPropertyName("software.type"), DataMember(Name = "software.type")]
		public string? SoftwareType { get; set; }

		///<summary>
		/// <para><c>threat.tactic.id</c></para>
		/// <para>The id of tactic used by this threat. You can use a MITRE ATT&amp;CKÂ® tactic, for example. (ex. https://attack.mitre.org/tactics/TA0002/ )</para>
		/// <example>TA0002</example>
		///</summary>
		[JsonPropertyName("tactic.id"), DataMember(Name = "tactic.id")]
		public string[]? TacticId { get; set; }

		///<summary>
		/// <para><c>threat.tactic.name</c></para>
		/// <para>Name of the type of tactic used by this threat. You can use a MITRE ATT&amp;CKÂ® tactic, for example. (ex. https://attack.mitre.org/tactics/TA0002/)</para>
		/// <example>Execution</example>
		///</summary>
		[JsonPropertyName("tactic.name"), DataMember(Name = "tactic.name")]
		public string[]? TacticName { get; set; }

		///<summary>
		/// <para><c>threat.tactic.reference</c></para>
		/// <para>The reference url of tactic used by this threat. You can use a MITRE ATT&amp;CKÂ® tactic, for example. (ex. https://attack.mitre.org/tactics/TA0002/ )</para>
		/// <example>https://attack.mitre.org/tactics/TA0002/</example>
		///</summary>
		[JsonPropertyName("tactic.reference"), DataMember(Name = "tactic.reference")]
		public string[]? TacticReference { get; set; }

		///<summary>
		/// <para><c>threat.technique.id</c></para>
		/// <para>The id of technique used by this threat. You can use a MITRE ATT&amp;CKÂ® technique, for example. (ex. https://attack.mitre.org/techniques/T1059/)</para>
		/// <example>T1059</example>
		///</summary>
		[JsonPropertyName("technique.id"), DataMember(Name = "technique.id")]
		public string[]? TechniqueId { get; set; }

		///<summary>
		/// <para><c>threat.technique.name</c></para>
		/// <para>The name of technique used by this threat. You can use a MITRE ATT&amp;CKÂ® technique, for example. (ex. https://attack.mitre.org/techniques/T1059/)</para>
		/// <example>Command and Scripting Interpreter</example>
		///</summary>
		[JsonPropertyName("technique.name"), DataMember(Name = "technique.name")]
		public string[]? TechniqueName { get; set; }

		///<summary>
		/// <para><c>threat.technique.reference</c></para>
		/// <para>The reference url of technique used by this threat. You can use a MITRE ATT&amp;CKÂ® technique, for example. (ex. https://attack.mitre.org/techniques/T1059/)</para>
		/// <example>https://attack.mitre.org/techniques/T1059/</example>
		///</summary>
		[JsonPropertyName("technique.reference"), DataMember(Name = "technique.reference")]
		public string[]? TechniqueReference { get; set; }

		///<summary>
		/// <para><c>threat.technique.subtechnique.id</c></para>
		/// <para>The full id of subtechnique used by this threat. You can use a MITRE ATT&amp;CKÂ® subtechnique, for example. (ex. https://attack.mitre.org/techniques/T1059/001/)</para>
		/// <example>T1059.001</example>
		///</summary>
		[JsonPropertyName("technique.subtechnique.id"), DataMember(Name = "technique.subtechnique.id")]
		public string[]? TechniqueSubtechniqueId { get; set; }

		///<summary>
		/// <para><c>threat.technique.subtechnique.name</c></para>
		/// <para>The name of subtechnique used by this threat. You can use a MITRE ATT&amp;CKÂ® subtechnique, for example. (ex. https://attack.mitre.org/techniques/T1059/001/)</para>
		/// <example>PowerShell</example>
		///</summary>
		[JsonPropertyName("technique.subtechnique.name"), DataMember(Name = "technique.subtechnique.name")]
		public string[]? TechniqueSubtechniqueName { get; set; }

		///<summary>
		/// <para><c>threat.technique.subtechnique.reference</c></para>
		/// <para>The reference url of subtechnique used by this threat. You can use a MITRE ATT&amp;CKÂ® subtechnique, for example. (ex. https://attack.mitre.org/techniques/T1059/001/)</para>
		/// <example>https://attack.mitre.org/techniques/T1059/001/</example>
		///</summary>
		[JsonPropertyName("technique.subtechnique.reference"), DataMember(Name = "technique.subtechnique.reference")]
		public string[]? TechniqueSubtechniqueReference { get; set; }

		///<summary>
		/// <para><c>threat.enrichments</c></para>
		/// <para>A list of associated indicators objects enriching the event, and the context of that association/enrichment.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("enrichments"), DataMember(Name = "enrichments")]
		public ThreatEnrichments[]? Enrichments { get; set; }
	}

	///<summary>
	/// Fields related to a TLS connection. These fields focus on the TLS protocol itself and intentionally avoids in-depth analysis of the related x.509 certificate files.
	///</summary>
	public abstract class TlsFieldSet {

		///<summary>
		/// <para><c>tls.cipher</c></para>
		/// <para>String indicating the cipher used during the current connection.</para>
		/// <example>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256</example>
		///</summary>
		[JsonPropertyName("cipher"), DataMember(Name = "cipher")]
		public string? Cipher { get; set; }

		///<summary>
		/// <para><c>tls.client.certificate</c></para>
		/// <para>PEM-encoded stand-alone certificate offered by the client. This is usually mutually-exclusive of `client.certificate_chain` since this value also exists in that list.</para>
		/// <example>MII...</example>
		///</summary>
		[JsonPropertyName("client.certificate"), DataMember(Name = "client.certificate")]
		public string? ClientCertificate { get; set; }

		///<summary>
		/// <para><c>tls.client.certificate_chain</c></para>
		/// <para>Array of PEM-encoded certificates that make up the certificate chain offered by the client. This is usually mutually-exclusive of `client.certificate` since that value should be the first certificate in the chain.</para>
		/// <example>["MII...", "MII..."]</example>
		///</summary>
		[JsonPropertyName("client.certificate_chain"), DataMember(Name = "client.certificate_chain")]
		public string[]? ClientCertificateChain { get; set; }

		///<summary>
		/// <para><c>tls.client.hash.md5</c></para>
		/// <para>Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.</para>
		/// <example>0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC</example>
		///</summary>
		[JsonPropertyName("client.hash.md5"), DataMember(Name = "client.hash.md5")]
		public string? ClientHashMd5 { get; set; }

		///<summary>
		/// <para><c>tls.client.hash.sha1</c></para>
		/// <para>Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.</para>
		/// <example>9E393D93138888D288266C2D915214D1D1CCEB2A</example>
		///</summary>
		[JsonPropertyName("client.hash.sha1"), DataMember(Name = "client.hash.sha1")]
		public string? ClientHashSha1 { get; set; }

		///<summary>
		/// <para><c>tls.client.hash.sha256</c></para>
		/// <para>Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.</para>
		/// <example>0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0</example>
		///</summary>
		[JsonPropertyName("client.hash.sha256"), DataMember(Name = "client.hash.sha256")]
		public string? ClientHashSha256 { get; set; }

		///<summary>
		/// <para><c>tls.client.issuer</c></para>
		/// <para>Distinguished name of subject of the issuer of the x.509 certificate presented by the client.</para>
		/// <example>CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com</example>
		///</summary>
		[JsonPropertyName("client.issuer"), DataMember(Name = "client.issuer")]
		public string? ClientIssuer { get; set; }

		///<summary>
		/// <para><c>tls.client.ja3</c></para>
		/// <para>A hash that identifies clients based on how they perform an SSL/TLS handshake.</para>
		/// <example>d4e5b18d6b55c71272893221c96ba240</example>
		///</summary>
		[JsonPropertyName("client.ja3"), DataMember(Name = "client.ja3")]
		public string? ClientJa3 { get; set; }

		///<summary>
		/// <para><c>tls.client.not_after</c></para>
		/// <para>Date/Time indicating when client certificate is no longer considered valid.</para>
		/// <example>1/1/2021 12:00:00â€¯AM</example>
		///</summary>
		[JsonPropertyName("client.not_after"), DataMember(Name = "client.not_after")]
		public DateTimeOffset? ClientNotAfter { get; set; }

		///<summary>
		/// <para><c>tls.client.not_before</c></para>
		/// <para>Date/Time indicating when client certificate is first considered valid.</para>
		/// <example>1/1/1970 12:00:00â€¯AM</example>
		///</summary>
		[JsonPropertyName("client.not_before"), DataMember(Name = "client.not_before")]
		public DateTimeOffset? ClientNotBefore { get; set; }

		///<summary>
		/// <para><c>tls.client.server_name</c></para>
		/// <para>Also called an SNI, this tells the server which hostname to which the client is attempting to connect to. When this value is available, it should get copied to `destination.domain`.</para>
		/// <example>www.elastic.co</example>
		///</summary>
		[JsonPropertyName("client.server_name"), DataMember(Name = "client.server_name")]
		public string? ClientServerName { get; set; }

		///<summary>
		/// <para><c>tls.client.subject</c></para>
		/// <para>Distinguished name of subject of the x.509 certificate presented by the client.</para>
		/// <example>CN=myclient, OU=Documentation Team, DC=example, DC=com</example>
		///</summary>
		[JsonPropertyName("client.subject"), DataMember(Name = "client.subject")]
		public string? ClientSubject { get; set; }

		///<summary>
		/// <para><c>tls.client.supported_ciphers</c></para>
		/// <para>Array of ciphers offered by the client during the client hello.</para>
		/// <example>["TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", "..."]</example>
		///</summary>
		[JsonPropertyName("client.supported_ciphers"), DataMember(Name = "client.supported_ciphers")]
		public string[]? ClientSupportedCiphers { get; set; }

		///<summary>
		/// <para><c>tls.curve</c></para>
		/// <para>String indicating the curve used for the given cipher, when applicable.</para>
		/// <example>secp256r1</example>
		///</summary>
		[JsonPropertyName("curve"), DataMember(Name = "curve")]
		public string? Curve { get; set; }

		///<summary>
		/// <para><c>tls.established</c></para>
		/// <para>Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("established"), DataMember(Name = "established")]
		public bool? Established { get; set; }

		///<summary>
		/// <para><c>tls.next_protocol</c></para>
		/// <para>String indicating the protocol being tunneled. Per the values in the IANA registry (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids), this string should be lower case.</para>
		/// <example>http/1.1</example>
		///</summary>
		[JsonPropertyName("next_protocol"), DataMember(Name = "next_protocol")]
		public string? NextProtocol { get; set; }

		///<summary>
		/// <para><c>tls.resumed</c></para>
		/// <para>Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("resumed"), DataMember(Name = "resumed")]
		public bool? Resumed { get; set; }

		///<summary>
		/// <para><c>tls.server.certificate</c></para>
		/// <para>PEM-encoded stand-alone certificate offered by the server. This is usually mutually-exclusive of `server.certificate_chain` since this value also exists in that list.</para>
		/// <example>MII...</example>
		///</summary>
		[JsonPropertyName("server.certificate"), DataMember(Name = "server.certificate")]
		public string? ServerCertificate { get; set; }

		///<summary>
		/// <para><c>tls.server.certificate_chain</c></para>
		/// <para>Array of PEM-encoded certificates that make up the certificate chain offered by the server. This is usually mutually-exclusive of `server.certificate` since that value should be the first certificate in the chain.</para>
		/// <example>["MII...", "MII..."]</example>
		///</summary>
		[JsonPropertyName("server.certificate_chain"), DataMember(Name = "server.certificate_chain")]
		public string[]? ServerCertificateChain { get; set; }

		///<summary>
		/// <para><c>tls.server.hash.md5</c></para>
		/// <para>Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.</para>
		/// <example>0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC</example>
		///</summary>
		[JsonPropertyName("server.hash.md5"), DataMember(Name = "server.hash.md5")]
		public string? ServerHashMd5 { get; set; }

		///<summary>
		/// <para><c>tls.server.hash.sha1</c></para>
		/// <para>Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.</para>
		/// <example>9E393D93138888D288266C2D915214D1D1CCEB2A</example>
		///</summary>
		[JsonPropertyName("server.hash.sha1"), DataMember(Name = "server.hash.sha1")]
		public string? ServerHashSha1 { get; set; }

		///<summary>
		/// <para><c>tls.server.hash.sha256</c></para>
		/// <para>Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.</para>
		/// <example>0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0</example>
		///</summary>
		[JsonPropertyName("server.hash.sha256"), DataMember(Name = "server.hash.sha256")]
		public string? ServerHashSha256 { get; set; }

		///<summary>
		/// <para><c>tls.server.issuer</c></para>
		/// <para>Subject of the issuer of the x.509 certificate presented by the server.</para>
		/// <example>CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com</example>
		///</summary>
		[JsonPropertyName("server.issuer"), DataMember(Name = "server.issuer")]
		public string? ServerIssuer { get; set; }

		///<summary>
		/// <para><c>tls.server.ja3s</c></para>
		/// <para>A hash that identifies servers based on how they perform an SSL/TLS handshake.</para>
		/// <example>394441ab65754e2207b1e1b457b3641d</example>
		///</summary>
		[JsonPropertyName("server.ja3s"), DataMember(Name = "server.ja3s")]
		public string? ServerJa3s { get; set; }

		///<summary>
		/// <para><c>tls.server.not_after</c></para>
		/// <para>Timestamp indicating when server certificate is no longer considered valid.</para>
		/// <example>1/1/2021 12:00:00â€¯AM</example>
		///</summary>
		[JsonPropertyName("server.not_after"), DataMember(Name = "server.not_after")]
		public DateTimeOffset? ServerNotAfter { get; set; }

		///<summary>
		/// <para><c>tls.server.not_before</c></para>
		/// <para>Timestamp indicating when server certificate is first considered valid.</para>
		/// <example>1/1/1970 12:00:00â€¯AM</example>
		///</summary>
		[JsonPropertyName("server.not_before"), DataMember(Name = "server.not_before")]
		public DateTimeOffset? ServerNotBefore { get; set; }

		///<summary>
		/// <para><c>tls.server.subject</c></para>
		/// <para>Subject of the x.509 certificate presented by the server.</para>
		/// <example>CN=www.example.com, OU=Infrastructure Team, DC=example, DC=com</example>
		///</summary>
		[JsonPropertyName("server.subject"), DataMember(Name = "server.subject")]
		public string? ServerSubject { get; set; }

		///<summary>
		/// <para><c>tls.version</c></para>
		/// <para>Numeric part of the version parsed from the original string.</para>
		/// <example>1.2</example>
		///</summary>
		[JsonPropertyName("version"), DataMember(Name = "version")]
		public string? Version { get; set; }

		///<summary>
		/// <para><c>tls.version_protocol</c></para>
		/// <para>Normalized lowercase protocol name parsed from original string.</para>
		/// <example>tls</example>
		///</summary>
		[JsonPropertyName("version_protocol"), DataMember(Name = "version_protocol")]
		public string? VersionProtocol { get; set; }
	}

	///<summary>
	/// URL fields provide support for complete or partial URLs, and supports the breaking down into scheme, domain, path, and so on.
	///</summary>
	public abstract class UrlFieldSet {

		///<summary>
		/// <para><c>url.domain</c></para>
		/// <para>Domain of the url, such as "www.elastic.co".
		/// In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field.
		/// If the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC 2732), the `[` and `]` characters should also be captured in the `domain` field.</para>
		/// <example>www.elastic.co</example>
		///</summary>
		[JsonPropertyName("domain"), DataMember(Name = "domain")]
		public string? Domain { get; set; }

		///<summary>
		/// <para><c>url.extension</c></para>
		/// <para>The field contains the file extension from the original request url, excluding the leading dot.
		/// The file extension is only set if it exists, as not every url has a file extension.
		/// The leading period must not be included. For example, the value must be "png", not ".png".
		/// Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").</para>
		/// <example>png</example>
		///</summary>
		[JsonPropertyName("extension"), DataMember(Name = "extension")]
		public string? Extension { get; set; }

		///<summary>
		/// <para><c>url.fragment</c></para>
		/// <para>Portion of the url after the `#`, such as "top".
		/// The `#` is not part of the fragment.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("fragment"), DataMember(Name = "fragment")]
		public string? Fragment { get; set; }

		///<summary>
		/// <para><c>url.full</c></para>
		/// <para>If full URLs are important to your use case, they should be stored in `url.full`, whether this field is reconstructed or present in the event source.</para>
		/// <example>https://www.elastic.co:443/search?q=elasticsearch#top</example>
		///</summary>
		[JsonPropertyName("full"), DataMember(Name = "full")]
		public string? Full { get; set; }

		///<summary>
		/// <para><c>url.original</c></para>
		/// <para>Unmodified original url as seen in the event source.
		/// Note that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.
		/// This field is meant to represent the URL as it was observed, complete or not.</para>
		/// <example>https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch</example>
		///</summary>
		[JsonPropertyName("original"), DataMember(Name = "original")]
		public string? Original { get; set; }

		///<summary>
		/// <para><c>url.password</c></para>
		/// <para>Password of the request.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("password"), DataMember(Name = "password")]
		public string? Password { get; set; }

		///<summary>
		/// <para><c>url.path</c></para>
		/// <para>Path of the request, such as "/search".</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("path"), DataMember(Name = "path")]
		public string? Path { get; set; }

		///<summary>
		/// <para><c>url.port</c></para>
		/// <para>Port of the request, such as 443.</para>
		/// <example>443</example>
		///</summary>
		[JsonPropertyName("port"), DataMember(Name = "port")]
		public long? Port { get; set; }

		///<summary>
		/// <para><c>url.query</c></para>
		/// <para>The query field describes the query string of the request, such as "q=elasticsearch".
		/// The `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("query"), DataMember(Name = "query")]
		public string? Query { get; set; }

		///<summary>
		/// <para><c>url.registered_domain</c></para>
		/// <para>The highest registered url domain, stripped of the subdomain.
		/// For example, the registered domain for "foo.example.com" is "example.com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".</para>
		/// <example>example.com</example>
		///</summary>
		[JsonPropertyName("registered_domain"), DataMember(Name = "registered_domain")]
		public string? RegisteredDomain { get; set; }

		///<summary>
		/// <para><c>url.scheme</c></para>
		/// <para>Scheme of the request, such as "https".
		/// Note: The `:` is not part of the scheme.</para>
		/// <example>https</example>
		///</summary>
		[JsonPropertyName("scheme"), DataMember(Name = "scheme")]
		public string? Scheme { get; set; }

		///<summary>
		/// <para><c>url.subdomain</c></para>
		/// <para>The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
		/// For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.</para>
		/// <example>east</example>
		///</summary>
		[JsonPropertyName("subdomain"), DataMember(Name = "subdomain")]
		public string? Subdomain { get; set; }

		///<summary>
		/// <para><c>url.top_level_domain</c></para>
		/// <para>The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
		/// This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".</para>
		/// <example>co.uk</example>
		///</summary>
		[JsonPropertyName("top_level_domain"), DataMember(Name = "top_level_domain")]
		public string? TopLevelDomain { get; set; }

		///<summary>
		/// <para><c>url.username</c></para>
		/// <para>Username of the request.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("username"), DataMember(Name = "username")]
		public string? Username { get; set; }
	}

	///<summary>
	/// The user fields describe information about the user that is relevant to the event.&#xA;Fields can have one entry or multiple entries. If a user has more than one id, provide an array that includes all of them.
	///</summary>
	public abstract class UserFieldSet {

		///<summary>
		/// <para><c>user.domain</c></para>
		/// <para>Name of the directory the user is a member of.
		/// For example, an LDAP or Active Directory domain name.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("domain"), DataMember(Name = "domain")]
		public string? Domain { get; set; }

		///<summary>
		/// <para><c>user.email</c></para>
		/// <para>User email address.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("email"), DataMember(Name = "email")]
		public string? Email { get; set; }

		///<summary>
		/// <para><c>user.full_name</c></para>
		/// <para>User's full name, if available.</para>
		/// <example>Albert Einstein</example>
		///</summary>
		[JsonPropertyName("full_name"), DataMember(Name = "full_name")]
		public string? FullName { get; set; }

		///<summary>
		/// <para><c>user.hash</c></para>
		/// <para>Unique user hash to correlate information for a user in anonymized form.
		/// Useful if `user.id` or `user.name` contain confidential information and cannot be used.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("hash"), DataMember(Name = "hash")]
		public string? Hash { get; set; }

		///<summary>
		/// <para><c>user.id</c></para>
		/// <para>Unique identifier of the user.</para>
		/// <example>S-1-5-21-202424912787-2692429404-2351956786-1000</example>
		///</summary>
		[JsonPropertyName("id"), DataMember(Name = "id")]
		public string? Id { get; set; }

		///<summary>
		/// <para><c>user.name</c></para>
		/// <para>Short name or login of the user.</para>
		/// <example>a.einstein</example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }

		///<summary>
		/// <para><c>user.roles</c></para>
		/// <para>Array of user roles at the time of the event.</para>
		/// <example>["kibana_admin", "reporting_user"]</example>
		///</summary>
		[JsonPropertyName("roles"), DataMember(Name = "roles")]
		public string[]? Roles { get; set; }
	}

	///<summary>
	/// The user_agent fields normally come from a browser request.&#xA;They often show up in web service logs coming from the parsed user agent string.
	///</summary>
	public abstract class UserAgentFieldSet {

		///<summary>
		/// <para><c>user_agent.device.name</c></para>
		/// <para>Name of the device.</para>
		/// <example>iPhone</example>
		///</summary>
		[JsonPropertyName("device.name"), DataMember(Name = "device.name")]
		public string? DeviceName { get; set; }

		///<summary>
		/// <para><c>user_agent.name</c></para>
		/// <para>Name of the user agent.</para>
		/// <example>Safari</example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }

		///<summary>
		/// <para><c>user_agent.original</c></para>
		/// <para>Unparsed user_agent string.</para>
		/// <example>Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1</example>
		///</summary>
		[JsonPropertyName("original"), DataMember(Name = "original")]
		public string? Original { get; set; }

		///<summary>
		/// <para><c>user_agent.version</c></para>
		/// <para>Version of the user agent.</para>
		/// <example>12.0</example>
		///</summary>
		[JsonPropertyName("version"), DataMember(Name = "version")]
		public string? Version { get; set; }
	}

	///<summary>
	/// The VLAN fields are used to identify 802.1q tag(s) of a packet, as well as ingress and egress VLAN associations of an observer in relation to a specific packet or connection.&#xA;Network.vlan fields are used to record a single VLAN tag, or the outer tag in the case of q-in-q encapsulations, for a packet or connection as observed, typically provided by a network sensor (e.g. Zeek, Wireshark) passively reporting on traffic.&#xA;Network.inner VLAN fields are used to report inner q-in-q 802.1q tags (multiple 802.1q encapsulations) as observed, typically provided by a network sensor  (e.g. Zeek, Wireshark) passively reporting on traffic. Network.inner VLAN fields should only be used in addition to network.vlan fields to indicate q-in-q tagging.&#xA;Observer.ingress and observer.egress VLAN values are used to record observer specific information when observer events contain discrete ingress and egress VLAN information, typically provided by firewalls, routers, or load balancers.
	///</summary>
	public abstract class VlanFieldSet {

		///<summary>
		/// <para><c>vlan.id</c></para>
		/// <para>VLAN ID as reported by the observer.</para>
		/// <example>10</example>
		///</summary>
		[JsonPropertyName("id"), DataMember(Name = "id")]
		public string? Id { get; set; }

		///<summary>
		/// <para><c>vlan.name</c></para>
		/// <para>Optional VLAN name as reported by the observer.</para>
		/// <example>outside</example>
		///</summary>
		[JsonPropertyName("name"), DataMember(Name = "name")]
		public string? Name { get; set; }
	}

	///<summary>
	/// The vulnerability fields describe information about a vulnerability that is relevant to an event.
	///</summary>
	public abstract class VulnerabilityFieldSet {

		///<summary>
		/// <para><c>vulnerability.category</c></para>
		/// <para>The type of system or architecture that the vulnerability affects. These may be platform-specific (for example, Debian or SUSE) or general (for example, Database or Firewall). For example (https://qualysguard.qualys.com/qwebhelp/fo_portal/knowledgebase/vulnerability_categories.htm[Qualys vulnerability categories])
		/// This field must be an array.</para>
		/// <example>["Firewall"]</example>
		///</summary>
		[JsonPropertyName("category"), DataMember(Name = "category")]
		public string[]? Category { get; set; }

		///<summary>
		/// <para><c>vulnerability.classification</c></para>
		/// <para>The classification of the vulnerability scoring system. For example (https://www.first.org/cvss/)</para>
		/// <example>CVSS</example>
		///</summary>
		[JsonPropertyName("classification"), DataMember(Name = "classification")]
		public string? Classification { get; set; }

		///<summary>
		/// <para><c>vulnerability.description</c></para>
		/// <para>The description of the vulnerability that provides additional context of the vulnerability. For example (https://cve.mitre.org/about/faqs.html#cve_entry_descriptions_created[Common Vulnerabilities and Exposure CVE description])</para>
		/// <example>In macOS before 2.12.6, there is a vulnerability in the RPC...</example>
		///</summary>
		[JsonPropertyName("description"), DataMember(Name = "description")]
		public string? Description { get; set; }

		///<summary>
		/// <para><c>vulnerability.enumeration</c></para>
		/// <para>The type of identifier used for this vulnerability. For example (https://cve.mitre.org/about/)</para>
		/// <example>CVE</example>
		///</summary>
		[JsonPropertyName("enumeration"), DataMember(Name = "enumeration")]
		public string? Enumeration { get; set; }

		///<summary>
		/// <para><c>vulnerability.id</c></para>
		/// <para>The identification (ID) is the number portion of a vulnerability entry. It includes a unique identification number for the vulnerability. For example (https://cve.mitre.org/about/faqs.html#what_is_cve_id)[Common Vulnerabilities and Exposure CVE ID]</para>
		/// <example>CVE-2019-00001</example>
		///</summary>
		[JsonPropertyName("id"), DataMember(Name = "id")]
		public string? Id { get; set; }

		///<summary>
		/// <para><c>vulnerability.reference</c></para>
		/// <para>A resource that provides additional information, context, and mitigations for the identified vulnerability.</para>
		/// <example>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-6111</example>
		///</summary>
		[JsonPropertyName("reference"), DataMember(Name = "reference")]
		public string? Reference { get; set; }

		///<summary>
		/// <para><c>vulnerability.report_id</c></para>
		/// <para>The report or scan identification number.</para>
		/// <example>20191018.0001</example>
		///</summary>
		[JsonPropertyName("report_id"), DataMember(Name = "report_id")]
		public string? ReportId { get; set; }

		///<summary>
		/// <para><c>vulnerability.scanner.vendor</c></para>
		/// <para>The name of the vulnerability scanner vendor.</para>
		/// <example>Tenable</example>
		///</summary>
		[JsonPropertyName("scanner.vendor"), DataMember(Name = "scanner.vendor")]
		public string? ScannerVendor { get; set; }

		///<summary>
		/// <para><c>vulnerability.score.base</c></para>
		/// <para>Scores can range from 0.0 to 10.0, with 10.0 being the most severe.
		/// Base scores cover an assessment for exploitability metrics (attack vector, complexity, privileges, and user interaction), impact metrics (confidentiality, integrity, and availability), and scope. For example (https://www.first.org/cvss/specification-document)</para>
		/// <example>5.5</example>
		///</summary>
		[JsonPropertyName("score.base"), DataMember(Name = "score.base")]
		public float? ScoreBase { get; set; }

		///<summary>
		/// <para><c>vulnerability.score.environmental</c></para>
		/// <para>Scores can range from 0.0 to 10.0, with 10.0 being the most severe.
		/// Environmental scores cover an assessment for any modified Base metrics, confidentiality, integrity, and availability requirements. For example (https://www.first.org/cvss/specification-document)</para>
		/// <example>5.5</example>
		///</summary>
		[JsonPropertyName("score.environmental"), DataMember(Name = "score.environmental")]
		public float? ScoreEnvironmental { get; set; }

		///<summary>
		/// <para><c>vulnerability.score.temporal</c></para>
		/// <para>Scores can range from 0.0 to 10.0, with 10.0 being the most severe.
		/// Temporal scores cover an assessment for code maturity, remediation level, and confidence. For example (https://www.first.org/cvss/specification-document)</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("score.temporal"), DataMember(Name = "score.temporal")]
		public float? ScoreTemporal { get; set; }

		///<summary>
		/// <para><c>vulnerability.score.version</c></para>
		/// <para>The National Vulnerability Database (NVD) provides qualitative severity rankings of "Low", "Medium", and "High" for CVSS v2.0 base score ranges in addition to the severity ratings for CVSS v3.0 as they are defined in the CVSS v3.0 specification.
		/// CVSS is owned and managed by FIRST.Org, Inc. (FIRST), a US-based non-profit organization, whose mission is to help computer security incident response teams across the world. For example (https://nvd.nist.gov/vuln-metrics/cvss)</para>
		/// <example>2.0</example>
		///</summary>
		[JsonPropertyName("score.version"), DataMember(Name = "score.version")]
		public string? ScoreVersion { get; set; }

		///<summary>
		/// <para><c>vulnerability.severity</c></para>
		/// <para>The severity of the vulnerability can help with metrics and internal prioritization regarding remediation. For example (https://nvd.nist.gov/vuln-metrics/cvss)</para>
		/// <example>Critical</example>
		///</summary>
		[JsonPropertyName("severity"), DataMember(Name = "severity")]
		public string? Severity { get; set; }
	}

	///<summary>
	/// This implements the common core fields for x509 certificates. This information is likely logged with TLS sessions, digital signatures found in executable binaries, S/MIME information in email bodies, or analysis of files on disk.&#xA;When the certificate relates to a file, use the fields at `file.x509`. When hashes of the DER-encoded certificate are available, the `hash` data set should be populated as well (e.g. `file.hash.sha256`).&#xA;Events that contain certificate information about network connections, should use the x509 fields under the relevant TLS fields: `tls.server.x509` and/or `tls.client.x509`.
	///</summary>
	public abstract class X509FieldSet {

		///<summary>
		/// <para><c>x509.alternative_names</c></para>
		/// <para>List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.</para>
		/// <example>*.elastic.co</example>
		///</summary>
		[JsonPropertyName("alternative_names"), DataMember(Name = "alternative_names")]
		public string[]? AlternativeNames { get; set; }

		///<summary>
		/// <para><c>x509.issuer.common_name</c></para>
		/// <para>List of common name (CN) of issuing certificate authority.</para>
		/// <example>Example SHA2 High Assurance Server CA</example>
		///</summary>
		[JsonPropertyName("issuer.common_name"), DataMember(Name = "issuer.common_name")]
		public string[]? IssuerCommonName { get; set; }

		///<summary>
		/// <para><c>x509.issuer.country</c></para>
		/// <para>List of country \(C) codes</para>
		/// <example>US</example>
		///</summary>
		[JsonPropertyName("issuer.country"), DataMember(Name = "issuer.country")]
		public string[]? IssuerCountry { get; set; }

		///<summary>
		/// <para><c>x509.issuer.distinguished_name</c></para>
		/// <para>Distinguished name (DN) of issuing certificate authority.</para>
		/// <example>C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2 High Assurance Server CA</example>
		///</summary>
		[JsonPropertyName("issuer.distinguished_name"), DataMember(Name = "issuer.distinguished_name")]
		public string? IssuerDistinguishedName { get; set; }

		///<summary>
		/// <para><c>x509.issuer.locality</c></para>
		/// <para>List of locality names (L)</para>
		/// <example>Mountain View</example>
		///</summary>
		[JsonPropertyName("issuer.locality"), DataMember(Name = "issuer.locality")]
		public string[]? IssuerLocality { get; set; }

		///<summary>
		/// <para><c>x509.issuer.organization</c></para>
		/// <para>List of organizations (O) of issuing certificate authority.</para>
		/// <example>Example Inc</example>
		///</summary>
		[JsonPropertyName("issuer.organization"), DataMember(Name = "issuer.organization")]
		public string[]? IssuerOrganization { get; set; }

		///<summary>
		/// <para><c>x509.issuer.organizational_unit</c></para>
		/// <para>List of organizational units (OU) of issuing certificate authority.</para>
		/// <example>www.example.com</example>
		///</summary>
		[JsonPropertyName("issuer.organizational_unit"), DataMember(Name = "issuer.organizational_unit")]
		public string[]? IssuerOrganizationalUnit { get; set; }

		///<summary>
		/// <para><c>x509.issuer.state_or_province</c></para>
		/// <para>List of state or province names (ST, S, or P)</para>
		/// <example>California</example>
		///</summary>
		[JsonPropertyName("issuer.state_or_province"), DataMember(Name = "issuer.state_or_province")]
		public string[]? IssuerStateOrProvince { get; set; }

		///<summary>
		/// <para><c>x509.not_after</c></para>
		/// <para>Time at which the certificate is no longer considered valid.</para>
		/// <example>7/16/2020 3:15:39â€¯AM</example>
		///</summary>
		[JsonPropertyName("not_after"), DataMember(Name = "not_after")]
		public DateTimeOffset? NotAfter { get; set; }

		///<summary>
		/// <para><c>x509.not_before</c></para>
		/// <para>Time at which the certificate is first considered valid.</para>
		/// <example>8/16/2019 1:40:25â€¯AM</example>
		///</summary>
		[JsonPropertyName("not_before"), DataMember(Name = "not_before")]
		public DateTimeOffset? NotBefore { get; set; }

		///<summary>
		/// <para><c>x509.public_key_algorithm</c></para>
		/// <para>Algorithm used to generate the public key.</para>
		/// <example>RSA</example>
		///</summary>
		[JsonPropertyName("public_key_algorithm"), DataMember(Name = "public_key_algorithm")]
		public string? PublicKeyAlgorithm { get; set; }

		///<summary>
		/// <para><c>x509.public_key_curve</c></para>
		/// <para>The curve used by the elliptic curve public key algorithm. This is algorithm specific.</para>
		/// <example>nistp521</example>
		///</summary>
		[JsonPropertyName("public_key_curve"), DataMember(Name = "public_key_curve")]
		public string? PublicKeyCurve { get; set; }

		///<summary>
		/// <para><c>x509.public_key_exponent</c></para>
		/// <para>Exponent used to derive the public key. This is algorithm specific.
		/// <para><br/>Stored but not available for search in Elasticsearch by default</para></para>
		/// <example>65537</example>
		///</summary>
		[JsonPropertyName("public_key_exponent"), DataMember(Name = "public_key_exponent")]
		public long? PublicKeyExponent { get; set; }

		///<summary>
		/// <para><c>x509.public_key_size</c></para>
		/// <para>The size of the public key space in bits.</para>
		/// <example>2048</example>
		///</summary>
		[JsonPropertyName("public_key_size"), DataMember(Name = "public_key_size")]
		public long? PublicKeySize { get; set; }

		///<summary>
		/// <para><c>x509.serial_number</c></para>
		/// <para>Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.</para>
		/// <example>55FBB9C7DEBF09809D12CCAA</example>
		///</summary>
		[JsonPropertyName("serial_number"), DataMember(Name = "serial_number")]
		public string? SerialNumber { get; set; }

		///<summary>
		/// <para><c>x509.signature_algorithm</c></para>
		/// <para>Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.</para>
		/// <example>SHA256-RSA</example>
		///</summary>
		[JsonPropertyName("signature_algorithm"), DataMember(Name = "signature_algorithm")]
		public string? SignatureAlgorithm { get; set; }

		///<summary>
		/// <para><c>x509.subject.common_name</c></para>
		/// <para>List of common names (CN) of subject.</para>
		/// <example>shared.global.example.net</example>
		///</summary>
		[JsonPropertyName("subject.common_name"), DataMember(Name = "subject.common_name")]
		public string[]? SubjectCommonName { get; set; }

		///<summary>
		/// <para><c>x509.subject.country</c></para>
		/// <para>List of country \(C) code</para>
		/// <example>US</example>
		///</summary>
		[JsonPropertyName("subject.country"), DataMember(Name = "subject.country")]
		public string[]? SubjectCountry { get; set; }

		///<summary>
		/// <para><c>x509.subject.distinguished_name</c></para>
		/// <para>Distinguished name (DN) of the certificate subject entity.</para>
		/// <example>C=US, ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net</example>
		///</summary>
		[JsonPropertyName("subject.distinguished_name"), DataMember(Name = "subject.distinguished_name")]
		public string? SubjectDistinguishedName { get; set; }

		///<summary>
		/// <para><c>x509.subject.locality</c></para>
		/// <para>List of locality names (L)</para>
		/// <example>San Francisco</example>
		///</summary>
		[JsonPropertyName("subject.locality"), DataMember(Name = "subject.locality")]
		public string[]? SubjectLocality { get; set; }

		///<summary>
		/// <para><c>x509.subject.organization</c></para>
		/// <para>List of organizations (O) of subject.</para>
		/// <example>Example, Inc.</example>
		///</summary>
		[JsonPropertyName("subject.organization"), DataMember(Name = "subject.organization")]
		public string[]? SubjectOrganization { get; set; }

		///<summary>
		/// <para><c>x509.subject.organizational_unit</c></para>
		/// <para>List of organizational units (OU) of subject.</para>
		/// <example></example>
		///</summary>
		[JsonPropertyName("subject.organizational_unit"), DataMember(Name = "subject.organizational_unit")]
		public string[]? SubjectOrganizationalUnit { get; set; }

		///<summary>
		/// <para><c>x509.subject.state_or_province</c></para>
		/// <para>List of state or province names (ST, S, or P)</para>
		/// <example>California</example>
		///</summary>
		[JsonPropertyName("subject.state_or_province"), DataMember(Name = "subject.state_or_province")]
		public string[]? SubjectStateOrProvince { get; set; }

		///<summary>
		/// <para><c>x509.version_number</c></para>
		/// <para>Version of x509 format.</para>
		/// <example>3</example>
		///</summary>
		[JsonPropertyName("version_number"), DataMember(Name = "version_number")]
		public string? VersionNumber { get; set; }
	}
}
