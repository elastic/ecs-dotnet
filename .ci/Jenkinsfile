#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'linux && immutable' }
  environment {
    REPO = 'ecs-dotnet'
    BASE_DIR = "src/go.elastic.co/apm/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
    DOTNET_CLI_TELEMETRY_OPTOUT = 'true'
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE = 'true'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*jenkins\\W+run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Sanity checks') {
      environment {
        HOME = "${env.WORKSPACE}"
        PATH = "${env.HOME}/bin:${env.PATH}"
      }
      options { skipDefaultCheckout() }
      steps {
        deleteDir()
        unstash 'source'
        dir("${BASE_DIR}"){
          preCommit(commit: "${GIT_BASE_COMMIT}", junit: true)
        }
      }
    }
    stage('Parallel'){
      parallel {
        stage('Linux') {
          options { skipDefaultCheckout() }
          environment {
            MSBUILDDEBUGPATH = "${env.WORKSPACE}"
          }
          steps {
            withGithubNotify(context: 'Linux') {
              deleteDir()
              unstash 'source'
              dir("${BASE_DIR}"){
                dotnet(){
                  sh script: './build.sh release -c false', label: 'build'
                }
              }
            }
          }
          post {
            unsuccessful {
              archiveArtifacts(allowEmptyArchive: true, artifacts: "${MSBUILDDEBUGPATH}/**/MSBuild_*.failure.txt")
            }
            always {
              junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/build/output/junit-*.xml")
            }
          }
        }
        stage('Windows') {
          agent { label 'windows-2019-immutable' }
          options { skipDefaultCheckout() }
          environment {
            HOME = "${env.WORKSPACE}"
            DOTNET_ROOT = "C:\\Program Files\\dotnet"
            PATH = "${env.DOTNET_ROOT};${env.DOTNET_ROOT}\\tools;${env.PATH};${env.HOME}\\bin"
            MSBUILDDEBUGPATH = "${env.WORKSPACE}"
          }
          stages {
            stage('Build') {
              steps {
                withGithubNotify(context: 'Windows') {
                  unstash 'source'
                  dir("${BASE_DIR}"){
                    bat script: 'choco install dotnetcore-sdk -m -y --no-progress -r --version 3.1.200', label: 'Tools'
                    bat script: 'build.bat release -c false', label: 'build'
                  }
                }
              }
              post {
                unsuccessful {
                  archiveArtifacts(allowEmptyArchive: true, artifacts: "${MSBUILDDEBUGPATH}/**/MSBuild_*.failure.txt")
                }
              }
            }
            stage('Deploy') {
              when {
                branch 'master'
              }
              steps {
                dir("${BASE_DIR}"){
                  release('secret/apm-team/ci/elastic-observability-appveyor')
                }
              }
              post {
                always {
                  archiveArtifacts(allowEmptyArchive: true, artifacts: "${BASE_DIR}/**/build/output/*.nupkg")
                }
              }
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult()
    }
  }
}

def dotnet(Closure body){
  def dockerTagName = 'docker.elastic.co/observability-ci/ecs-dotnet-sdk-linux:latest'
  sh label: 'Docker build', script: "docker build --tag ${dockerTagName} .ci/docker/sdk-linux"
  docker.image("${dockerTagName}").inside("-e HOME='${env.WORKSPACE}/${env.BASE_DIR}'"){
    body()
  }
}

def release(secret){
  def repo = getVaultSecret(secret: secret)
  withEnvMask(vars: [[var: 'REPO_API_KEY', password: repo.data.apiKey], [var: 'REPO_API_URL', password: repo.data.url]]){
    bat(label: 'Deploy', script: ".ci/deploy.bat ${REPO_API_KEY} ${REPO_API_URL}")
  }
}
