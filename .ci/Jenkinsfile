#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'linux && immutable' }
  environment {
    REPO = 'ecs-dotnet'
    BASE_DIR = "src/go.elastic.co/apm/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
    DOTNET_CLI_TELEMETRY_OPTOUT = 'true'
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE = 'true'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*jenkins\\W+run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true, shallow: false)
        dir("${BASE_DIR}"){
          sh(label: 'Fetch tags', script: 'git fetch --prune --tags')
        }
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Sanity checks') {
      environment {
        HOME = "${env.WORKSPACE}"
        PATH = "${env.HOME}/bin:${env.PATH}"
      }
      options { skipDefaultCheckout() }
      steps {
        deleteDir()
        unstash 'source'
        dir("${BASE_DIR}"){
          preCommit(commit: "${GIT_BASE_COMMIT}", junit: true)
        }
      }
    }
    stage('Parallel'){
      when {
        not { buildingTag() }
        beforeAgent true
      }
      parallel {
        stage('Linux') {
          options { skipDefaultCheckout() }
          environment {
            MSBUILDDEBUGPATH = "${env.WORKSPACE}"
          }
          steps {
            withGithubNotify(context: 'Linux') {
              deleteDir()
              unstash 'source'
              dir("${BASE_DIR}"){
                dotnet(){
                  sh script: './build.sh release -c false', label: 'build'
                }
              }
            }
          }
          post {
            unsuccessful {
              archiveArtifacts(allowEmptyArchive: true, artifacts: "${MSBUILDDEBUGPATH}/**/MSBuild_*.failure.txt")
            }
            always {
              dir("${BASE_DIR}"){
                junit(allowEmptyResults: true, keepLongStdio: true, testResults: 'build/output/junit-*.xml')
                archiveArtifacts(allowEmptyArchive: true, artifacts: 'build/output/**/*')
              }
            }
          }
        }
        stage('Windows') {
          agent { label 'windows-2019-immutable' }
          options { skipDefaultCheckout() }
          environment {
            HOME = "${env.WORKSPACE}"
            DOTNET_ROOT = "C:\\Program Files\\dotnet"
            PATH = "${env.DOTNET_ROOT};${env.DOTNET_ROOT}\\tools;${env.PATH};${env.HOME}\\bin"
            MSBUILDDEBUGPATH = "${env.WORKSPACE}"
          }
          stages {
            stage('Build') {
              steps {
                withGithubNotify(context: 'Windows') {
                  unstash 'source'
                  dir("${BASE_DIR}"){
                    bat script: 'choco install dotnetcore-sdk -m -y --no-progress -r --version 3.1.202', label: 'Tools'
                    bat script: 'build.bat release -c false', label: 'build'
                  }
                }
              }
              post {
                unsuccessful {
                  archiveArtifacts(allowEmptyArchive: true, artifacts: "${MSBUILDDEBUGPATH}/**/MSBuild_*.failure.txt")
                }
                always {
                  dir("${BASE_DIR}"){
                    junit(allowEmptyResults: true, keepLongStdio: true, testResults: 'build/output/junit-*.xml')
                    archiveArtifacts(allowEmptyArchive: true, artifacts: 'build/output/**/*')
                  }
                }
              }
            }
          }
        }
      }
    }
    stage('Release') {
      when {
        beforeAgent true
        anyOf {
          tag pattern: '\\d+\\.\\d+\\.\\d+(-(alpha|beta|rc)\\d*)?', comparator: 'REGEXP'
          branch 'master'
        }
      }
      stages {
        stage('Generate') {
          steps {
            deleteDir()
            unstash 'source'
            dir("${BASE_DIR}"){
              dotnet() {
                sh(label: 'Generate local nuget packages', script: './build.sh generatepackages -s true')
                sh(label: 'Validate *.npkg files that were created', script: './build.sh validatepackages -s true')
                sh(label: 'Inspect public API change', script: './build.sh generateapichanges -s true')
              }
            }
          }
        }
        stage('Release to feedz.io') {
          when { branch 'master' }
          steps {
            dir("${BASE_DIR}"){
              deploy(secret: 'secret/apm-team/ci/elastic-observability-feedz.io')
            }
          }
        }
        stage('Release Notes') {
          when { buildingTag() }
          steps {
            dir("${BASE_DIR}"){
              withGitRelease(credentialsId: '2a9602aa-ab9f-4e52-baf3-b71ca88469c7-UserAndToken') {
                dotnet() {
                  sh(label: 'Generate release notes', script: './build.sh generatereleasenotes -s true')
                  sh(label: 'Inspect public API change', script: './build.sh generateapichanges -s true')
                  sh(label: 'Create or update release for tag on github', script: "./build.sh createreleaseongithub -s true --token ${GITHUB_TOKEN}")
                }
              }
            }
          }
        }
        stage('Release to NuGet') {
          when { buildingTag() }
          steps {
            dir("${BASE_DIR}"){
              //deploy(secret: 'secret/apm-team/ci/elastic-observability-nuget')
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult()
    }
  }
}

def dotnet(Closure body){
  def dockerTagName = 'docker.elastic.co/observability-ci/ecs-dotnet-sdk-linux:latest'
  // When running in the CI with multiple parallel stages
  // the access could be considered as a DDOS attack.
  retryWithSleep(retries: 2, seconds: 5, backoff: true) {
    sh label: 'Docker build', script: "docker build --tag ${dockerTagName} .ci/docker/sdk-linux"
  }
  docker.image("${dockerTagName}").inside("-e HOME='${env.WORKSPACE}/${env.BASE_DIR}'"){
    body()
  }
}

def deploy(Map args = [:]) {
  def secret = args.secret
  def repo = getVaultSecret(secret: secret)
  withEnvMask(vars: [ [var: 'REPO_API_KEY', password: repo.data.apiKey],
                      [var: 'REPO_API_URL', password: repo.data.url] ]) {
    if (isUnix()) {
      dotnet(){
        sh(label: 'Deploy', script: ".ci/deploy.sh ${REPO_API_KEY} ${REPO_API_URL}")
      }
    } else {
      bat(label: 'Deploy', script: ".ci/deploy.bat ${REPO_API_KEY} ${REPO_API_URL}")
    }
  }
}
