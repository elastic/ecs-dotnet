#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'linux && immutable' }
  environment {
    REPO = 'ecs-dotnet'
    BASE_DIR = "src/go.elastic.co/apm/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*jenkins\\W+run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Sanity checks') {
      environment {
        HOME = "${env.WORKSPACE}"
        PATH = "${env.HOME}/bin:${env.PATH}"
      }
      options { skipDefaultCheckout() }
      steps {
        deleteDir()
        unstash 'source'
        dir("${BASE_DIR}"){
          preCommit(commit: "${GIT_BASE_COMMIT}", junit: true)
        }
      }
    }
    stage('Parallel'){
      parallel {
        stage('Linux') {
          options { skipDefaultCheckout() }
          environment {
            MSBUILDDEBUGPATH = "${env.WORKSPACE}"
          }
          steps {
            withGithubNotify(context: 'Linux') {
              deleteDir()
              unstash 'source'
              dir("${BASE_DIR}"){
                dotnet(){
                  sh './build.sh'
                }
              }
            }
          }
          post {
            unsuccessful {
              archiveArtifacts(allowEmptyArchive: true, artifacts: "${MSBUILDDEBUGPATH}/**/MSBuild_*.failure.txt")
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult()
    }
  }
}

def dotnet(Closure body){
  def dockerTagName = 'docker.elastic.co/observability-ci/ecs-dotnet-sdk-linux:latest'
  sh label: 'Docker build', script: "docker build --tag ${dockerTagName} .ci/docker/sdk-linux"
  docker.image("${dockerTagName}").inside("-e HOME='${env.WORKSPACE}/${env.BASE_DIR}'"){
    body()
  }
}
