[[serilog-data-shipper]]
=== Elastic.Serilog.Sinks

A https://serilog.net/[Serilog] sink that writes logs directly to https://www.elastic.co/elasticsearch/[Elasticsearch] or https://www.elastic.co/cloud[Elastic Cloud]

==== Installation

Add a reference to the `Elastic.Serilog.Sinks` package:

[source,xml]
[subs="attributes"]
----
<PackageReference Include="Elastic.Serilog.Sinks" Version="{ecs-logging-dotnet-version}" />
----

==== Usage 

There's a few ways that you can extend a `Serilog` `LoggerConfiguration`:

[source,csharp]
----
Log.Logger = new LoggerConfiguration()
	.MinimumLevel.Debug()
	.Enrich.FromLogContext()

----

*NOTE:* Don't forget we also publish an https://github.com/elastic/ecs-dotnet/blob/main/src/Elastic.Apm.SerilogEnricher/readme.md[`Elastic.Apm.SerilogEnricher`] for the Elastic APM Agent!

Writing to `Elasticsearch`

[source,csharp]
----
.WriteTo.Elasticsearch(new [] { new Uri("http://localhost:9200" )}, opts =>
{
	opts.DataStream = new DataStreamName("logs", "console-example", "demo");
	opts.BootstrapMethod = BootstrapMethod.Failure;
	opts.ConfigureChannel = channelOpts =>
	{
		channelOpts.BufferOptions = new BufferOptions 
		{ 
			ConcurrentConsumers = 10 
		};
	};
}, transport =>
{
	// transport.Authentication(new BasicAuthentication(username, password)); // Basic Auth
	// transport.Authentication(new ApiKey(base64EncodedApiKey)); // ApiKey
})

----

Writing to `Elastic Cloud`:

[source,csharp]
----
.WriteTo.ElasticCloud("cloudId", "cloudUser", "cloudPass", opts =>
----

`opts` is an instance of `ElasticsearchSinkOptions` with the following options


==== Configuration

|===
|Option |Description 

|`Transport` |An instance of `Elastic.Transport` that dictates where and how we are communicating to. Defaults to `http://localhost:9200` 
|`DataStream` |Where to write data, defaults to the `logs-dotnet-default` datastream. 
|`BootstrapMethod` |Wheter the sink should attempt to install component and index templates to ensure the datastream has ECS mappings. Can be be either `None` (the default), `Silent` (attempt but fail silently), `Failure` (attempt and fail with exceptions if bootstrapping fails). 
|`TextFormatting` |Allows explicit control of over the `EcsTextFormatterConfiguration` used to emit ECS json documents. See https://github.com/elastic/ecs-dotnet/tree/main/src/Elastic.CommonSchema.Serilog[`Elastic.CommonSchema.Serilog`] for available options. 
|`ConfigureChannel` |A callback receiving the `DatastreamChannelOptions` which allows you to control sizing, backpressure etc. See https://github.com/elastic/elastic-ingest-dotnet/blob/main/src/Elastic.Ingest.Elasticsearch/README.md#elasticingestelasticsearch[`Elastic.Ingest.Elasticsearch`] for more information.
|===

Note that you can also pass `ElasticsearchSinkOptions` directly

[source,csharp]
----
.WriteTo.Elasticsearch(new ElasticsearchSinkOptions(client.Transport))
----

This allows you to reuse the `Transport` used by the Elasticsearch Client for instance.

==== Authentication

When {es} security features are enabled, requests without a valid authentication header will be rejected.
You can enable authentication via one of the methods below:

**Basic Auth**

[source,csharp]
----
.WriteTo.Elasticsearch(new [] { new Uri("http://localhost:9200" )}, opts =>
{
	...
}, transport =>
{
	transport.Authentication(new BasicAuthentication(username, password)); <1>
})

----
<1> Basic authentication

**API Key**

[source,csharp]
----
.WriteTo.Elasticsearch(new [] { new Uri("http://localhost:9200" )}, opts =>
{
	...
}, transport =>
{
	transport.Authentication(new ApiKey(base64EncodedApiKey)); <1>
})

----
<1> API Key

To learn more about authentication with the {stack}, see {ref}/setting-up-authentication.html[User Authentication].

==== ECS Aware Message Templates

This sink by proxy of its formatter allows you to set ECS fields directly from the message template using properties that adhere to the
https://messagetemplates.org/ format.

The available ECS message template properties are listed under `LogTemplateProperties.*` e.g `LogTemplateProperties.TraceId`

[source,chsarp]
----
Log.Information("The time is {TraceId}", "my-trace-id");
----

Will override `trace.id` on the resulting ECS json document.

==== Troubleshooting

In case of issues, you can enable the [Serilog Self-Log feature](https://github.com/serilog/serilog/wiki/Debugging-and-Diagnostics#selflog) to expose any error you might have encountered.

==== Comparison with https://github.com/serilog-contrib/serilog-sinks-elasticsearch[`Serilog.Sinks.Elasticsearch`]

* `Serilog.Sinks.Elasticsearch` is an amazing community led sink that has a ton of options and works against older Elasticsearch versions `< 8.0`.
* `Serilog.Sinks.Elasticsearch` is unofficially supported by Elastic with some of the .NET team helping to maintain it.
* `Elastic.Serilog.Sinks` is *officially* supported by Elastic and was purposely build to adhere to newer best practices around logging, datastreams and ILM.
* `Elastic.Serilog.Sinks` is purposely build to have fewer configuration options and be more prescriptive than `Serilog.Sinks.Elasticsearch`.
* That is not to say there aren't plenty of configuration hooks in `Elastic.Serilog.Sinks`

===== Notable absent features:

* `Elastic.Serilog.Sinks` only works with `Elasticsearch 8.x` and up.
* This is because the bootrapping (`BootstrapMethod`) attempts to load templates build for Elasticsearch 8.0 and up.
* `Elastic.Serilog.Sinks` has only one way it emits data to Elasticsearch confirming to the https://github.com/elastic/ecs-logging[ecs-logging specification]
* That doesn't mean you can not introduce your own additional properties though.
* `Elastic.Serilog.Sinks` has no durable mode.
* If you need higher guarantees on log delivery use https://github.com/serilog/serilog-sinks-file[`Serilog.Sinks.File`] with our https://www.nuget.org/packages/Elastic.CommonSchema.Serilog/[ECS log formatter] for Serilog and use https://www.elastic.co/beats/filebeat[filebeat] to ship these logs.
* Check out {fleet-guide}/fleet-overview.html[Elastic Agent and Fleet] to simplify collecting logs and metrics on the edge.

If you miss a particular feature from `Serilog.Sinks.Elasticsearch` in `Elastic.Serilog.Sinks` please open a https://github.com/elastic/ecs-dotnet/issues/new?assignees=&labels=enhancement&template=feature_request.md&title=%5BFEATURE%5D[feature request]! We'd love to grow this sink organically moving forward.
