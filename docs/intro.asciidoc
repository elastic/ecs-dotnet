[[intro]]
== Introduction

ECS logging are integrations for your favorite .NET logging libraries.
They make it easy to format your logs into ECS-compatible JSON.

TIP: Want to learn more about ECS, ECS logging, and other available language plugins?
See the {ecs-logging-ref}/intro.html[ECS logging overview].

The .NET ECS libraries fall into several catagories

[float]
=== Domain

At its core all .NET ECS libraries are powered by `Elastic.CommonSchema`
which strongly types the ECS specification to .NET classes. 

This library can be used to map your events to ECS in a typesafe fashion.

[float]
=== Log Formatters

Our log formatters allow you to change the way various logging frameworks
log to IO (file/console) to use ECS json.

* `Elastic.CommonSchema.Log4Net`
* `Elastic.CommonSchema.NLog`
* `Elastic.CommonSchema.Serilog`

[float]
=== Data Shippers

Our datashippers integrate with logging frameworks to facilitate 
sending events (logs) to various off Elastic receivers.

Currently these shippers support Elastic Cloud & Elasticsearch but 
other outputs are in the works.

* `Elastic.Extensions.Logging`
* `Elastic.Serilog.Sinks`
* `Elastic.CommonSchema.BenchmarkDotNetExporter`


[float]
=== Enrichers 

Enrichers can be installed next to `Log Formatters` and `Data Shippers` to automatically
enrich the ECS json that gets produced.

* `Elastic.Apm.NLog`
* `Elastic.Apm.SerilogEnricher`

=== Architecture

image:images/ecs-dotnet-overview.png["ECS.NET Artichtecture overview"]

The libraries reuse the same components that power other .NET libraries from Elastic.

Ensuring a common way to both configure and monitor Elastic's .NET libraries.

At its core all `Data Shippers` reuse `Elastic.Transport` to
coordinate HttpRequests. This library is also the heart of Elastic's clients and ensures
we share best practices and configuration options.

Furthermore the ECS.NET libraries built upon the push based ingestion 
abstractions from https://github.com/elastic/elastic-ingest-dotnet[Elastic.Ingest.*] that 
presents an easy to use `System.Threading.Channels` backed method to push events as batches at variable rates to external datasources.


