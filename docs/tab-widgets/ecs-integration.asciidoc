// tag::serilog[]
**Serilog Text Formatter**

`EcsTextFormatter` is an `ITextFormatter` implementation in
Elastic.CommonSchema.Serilog that formats Serilog events into
a JSON representation that adheres to the Elastic Common Schema specification.

It can be configured in conjunction with a Serilog Sink. To configure
with the file sink for example, first install
https://www.nuget.org/packages/Serilog.Sinks.File/[Serilog.Sinks.File] nuget
package

[source,sh]
----
Install-Package Serilog.Sinks.File
----

Then configure the file sink to use `EcsTextFormatter`:

[source,csharp]
----
var logger = new LoggerConfiguration()
    .WriteTo.File(new EcsTextFormatter(), "/path/to/log.txt")
    .CreateLogger();
----

Now, when logging events

[source,csharp]
----
logger.Information("Checkout contains {ItemCount} items", 12); <1>
----
<1> log a message with the information level

Each Serilog log event will be formatted as single line JSON in the file
`/path/to/log.txt`.

// end::serilog[]

// tag::nlog[]
**NLog Layout**

`EcsLayout` is a `Layout` implementation in Elastic.CommonSchema.NLog that
formats an NLog event into a JSON representation that adheres to the
Elastic Common Schema specification.

It can be configured as the layout of an NLog Target. To configure
with the file target for example, using code configuration:

[source, csharp]
----
var config = new LoggingConfiguration();
var fileTarget = new FileTarget()
{
    Layout = new EcsLayout(), <1>
    FileName = "/path/to/log.txt"
};
config.AddRule(LogLevel.Info, LogLevel.Fatal, fileTarget);
LogManager.Configuration = config;
var logger = LogManager.GetCurrentClassLogger();
----
<1> Create a new instance of ECS layout

In addition to code configuration, `EcsLayout` can be configured using
XML configuration in https://github.com/nlog/NLog/wiki/Configuration-file[`NLog.config`]:

[source,xml]
----
<nlog>
  <extensions>
    <add assembly="Elastic.CommonSchema.NLog"/>
  </extensions>
  <targets>
    <target name="file" type="File">
      <layout xsi:type="EcsLayout">
      </layout>
    </target>
  </targets>
  <rules>
    <logger name="*" minLevel="Info" writeTo="File" />
  </rules>
</nlog>
----

Now, when logging events:

[source,csharp]
----
logger.Info("Checkout contains {ItemCount} items", 12); <1>
----
<1> log a message with the information level

Each NLog log event will be formatted as single line JSON in the file
`/path/to/log.txt`.

**EcsLayout Parameter Options**

The following properties determine which properties should be included
or excluded as metadata of an event

|====
| Parameter name | Type | Default | Description

| `IncludeAllProperties`
| bool
| `true`
| Include LogEvent properties as metadata

| `IncludeMdlc`
| bool
| `false`
| Include NLog Scope Context Properties as metadata

| `ExcludeProperties`
| string
|
| Comma separated string of properties to exclude from metadata
|====

The following are NLog `Layout` properties used to capture
information for an event

|====
| Parameter name | Type | Default | Description

| `EventAction`
| string
|
| The action captured by the event

| `EventCategory`
| string
|
| The category of the event.

| `EventId`
| string
|
| The unique identifier for the event

| `EventKind`
| string
|
| The kind of event. High level information about what kind of information the event contains

| `EventSeverity`
| long
| _NLog level_

* Trace, Debug:: 7
* Info:: 6
* Warn:: 4
* Error:: 3
* Fatal:: 2

| The severity of the event

| `AgentId`
| string
|
| The id of the agent collecting events

| `AgentName`
| string
|
| The name of the agent collecting events

| `AgentType`
| string
|
| The type of the agent collecting events

| `AgentVersion`
| string
|
| The version of the agent collecting events

| `ProcessExecutable`
| string
| `${processname:FullName=true}`
| Absolute path to the process executable

| `ProcessId`
| long
| `${processid}`
| The process id (pid)

| `ProcessName`
| string
| `${processname:FullName=false}`
| The name of the process

| `ProcessThreadId`
| long
| `${threadid}`
| The id of the process thread

| `ProcessTitle`
| string
| `${processinfo:MainWindowTitle}`
| The title of the process

| `ServerAddress`
| string
|
| The address of the server

| `ServerIp`
| string
|
| The IP address of the server

| `ServerUser`
| string
| `${environment-user}`
| Information about the user that is relevant to the event

| `HostId`
| string
|
| Unique host id. Hostnames are not always unique, so use an id that is meaningful in your environment

| `HostIp`
|
| `${local-ip:cachedSeconds=60}` _(requires NLog 4.6.8+)_
| The IP address of the host

| `HostName`
| string
| `${machinename}`
| The name of the host

| `LogOriginCallSiteMethod`
| string
| `${exception:format=method}`
| The name of the function or method which originated the event

| `LogOriginCallSiteFile`
| string
| `${exception:format=source}`
| The file containing the source code which originated the event

| `LogOriginCallSiteLine`
| string
|
| The line number of the file containing the source code which originated the event

|====

// end::nlog[]